
# Industry Update
    industries_update = {
        
		for_each_loop = {
			array = buildings
			value = bu_token
			index = ind
			break = ind_break

			industry_update = yes

        }
		for_each_loop = {
			array = rgos
			value = bu_token
			index = ind
			break = ind_break

			industry_update = yes
        }
    }
    industries_update_finances = {
		for_each_loop = {
			array = buildings
			value = bu_token
			index = ind
			break = ind_break

			industry_update_finances = yes

        }
		for_each_loop = {
			array = rgos
			value = bu_token
			index = ind
			break = ind_break

			industry_update_finances = yes
        }
    }
    industries_update_construction_retooling = {
		clear_array = industries_under_construction_array
		clear_array = industries_retooling_array
        for_each_loop = {
            array = industries
			value = iuc_industry
            
            set_variable = { retooling_cost@var:iuc_industry = 0 }
            clear_array = retooling_resources@var:iuc_industry
            clear_array = retooling_amount@var:iuc_industry
            clear_array = retooling_cost@var:iuc_industry
			if = {
				limit = {
					NOT = { check_variable = { retooling_pm@var:iuc_industry = 0 } }
				}
                set_temp_variable = { pm_temp = retooling_pm@var:iuc_industry }

                set_variable = { retooling_time_left@var:iuc_industry = controller:pm_retooling_duration@var:pm_temp }
                subtract_from_variable = { retooling_time_left@var:iuc_industry = retooling_progress@var:iuc_industry }
                clamp_variable = { var = retooling_time_left@var:iuc_industry min = 0 max = controller:pm_retooling_duration@var:pm_temp }

                set_temp_variable = { retooling_multiplier = 1 }
                if = { limit = { check_variable = { retooling_time_left@var:iuc_industry < 1 } } set_temp_variable = { retooling_multiplier = retooling_time_left@var:iuc_industry } }
            
                # Modifiers
                set_temp_variable = { retooling_speed_temp = 1 }
                add_to_temp_variable = { retooling_speed_temp = building_retooling_speed_factor }
                
                set_temp_variable = { retooling_cost_temp = 1 }
                add_to_temp_variable = { retooling_cost_temp = building_retooling_cost_factor }

                # Input Costs
                for_each_loop = {
                    array = controller:pm_input@var:pm_temp
                    value = iuc_resource
                    index = iuc_ii

                    set_temp_variable = { amount_temp = controller:pm_input_amount@var:pm_temp^iuc_ii }
                    multiply_temp_variable = { amount_temp = global.building_base_output_value@var:iuc_industry }
                    multiply_temp_variable = { amount_temp = retooling_speed_temp }
                    multiply_temp_variable = { amount_temp = retooling_cost_temp }
                    multiply_temp_variable = { amount_temp = retooling_multiplier }
                    multiply_temp_variable = { amount_temp = size@var:iuc_industry }
                    divide_temp_variable = { amount_temp = global.base_price@var:iuc_resource }
                    
                    set_temp_variable = { cost_temp = amount_temp }
                    multiply_temp_variable = { cost_temp = controller:price@var:iuc_resource }

                    add_to_array = { retooling_resources@var:iuc_industry = iuc_resource }
                    add_to_array = { retooling_amount@var:iuc_industry = amount_temp }
                    add_to_array = { retooling_cost@var:iuc_industry = cost_temp }
                }
            }
            else = {
				set_variable = { retooling_time_left@var:iuc_industry = 0 }
				set_variable = { retooling_progress@var:iuc_industry = 0 }
            }
        }
    }

    industry_update = {

        # Helper Temp Variables
        set_temp_variable = { production_method_temp = production_method@var:bu_token }
        set_temp_variable = { automation_method_temp = automation_method@var:bu_token }

        set_temp_variable = { output_modifier_temp = building_output_factor@var:bu_token }
        add_to_temp_variable = { output_modifier_temp = 1 }

        set_temp_variable = { throughput_modifier_temp = building_throughput_factor@var:bu_token }
        add_to_temp_variable = { throughput_modifier_temp = 1 }

        set_temp_variable = { input_modifier_temp = building_input_factor@var:bu_token }
        add_to_temp_variable = { input_modifier_temp = 1 }
        
        set_temp_variable = { cap_modifier_temp = building_industrial_capacity_use_factor@var:bu_token }
        add_to_temp_variable = { cap_modifier_temp = 1 }

        # Reset to 0
        set_variable = { jobs@var:bu_token = 0 }
        set_variable = { jobs_available@var:bu_token = 0 }
        set_variable = { employed@var:bu_token = 0 }

        set_variable = { money_limit@var:bu_token = 0 }
        set_variable = { revenue_goods@var:bu_token = 0 }
        set_variable = { expenses_input@var:bu_token = 0 }
        
        set_temp_variable = { revenue_temp = 0 }
        set_temp_variable = { expenses_temp = 0 }

        # Update Industry Size
        if = { # RGOs
            limit = {
                is_in_array = { global.rgo_token_array = bu_token }
            }
            set_variable = { size@var:bu_token = base_resource@var:bu_token }
        }
        
        # Production & Automation Method Jobs
        set_temp_variable = { base_jobs_temp = global.building_base_employees@var:bu_token }
        multiply_temp_variable = { base_jobs_temp = size@var:bu_token }

        set_variable = { laborers_jobs@var:bu_token = controller:pm_workforce_laborers@var:production_method_temp }
        add_to_variable = { laborers_jobs@var:bu_token = controller:pm_workforce_laborers@var:automation_method_temp }
        clamp_variable = { var = laborers_jobs@var:bu_token min = 0 }
        set_variable = { laborers_ratio@var:bu_token = laborers_jobs@var:bu_token }

        set_variable = { workers_jobs@var:bu_token = controller:pm_workforce_workers@var:production_method_temp }
        add_to_variable = { workers_jobs@var:bu_token = controller:pm_workforce_workers@var:automation_method_temp }
        clamp_variable = { var = workers_jobs@var:bu_token min = 0 }
        set_variable = { workers_ratio@var:bu_token = workers_jobs@var:bu_token }

        set_variable = { professionals_jobs@var:bu_token = controller:pm_workforce_professionals@var:production_method_temp }
        add_to_variable = { professionals_jobs@var:bu_token = controller:pm_workforce_professionals@var:automation_method_temp }
        clamp_variable = { var = professionals_jobs@var:bu_token min = 0 }
        set_variable = { professionals_ratio@var:bu_token = professionals_jobs@var:bu_token }

        set_variable = { specialists_jobs@var:bu_token = controller:pm_workforce_specialists@var:production_method_temp }
        add_to_variable = { specialists_jobs@var:bu_token = controller:pm_workforce_specialists@var:automation_method_temp }
        clamp_variable = { var = specialists_jobs@var:bu_token min = 0 }
        set_variable = { specialists_ratio@var:bu_token = specialists_jobs@var:bu_token }
        
        set_variable = { payroll_multiplier@var:bu_token = 0 }
        set_temp_variable = { payroll_multiplier_temp = laborers_jobs@var:bu_token }
        multiply_temp_variable = { payroll_multiplier_temp = 2 }
        add_to_variable = { payroll_multiplier@var:bu_token = payroll_multiplier_temp }
        set_temp_variable = { payroll_multiplier_temp = workers_jobs@var:bu_token }
        multiply_temp_variable = { payroll_multiplier_temp = 5 }
        add_to_variable = { payroll_multiplier@var:bu_token = payroll_multiplier_temp }
        set_temp_variable = { payroll_multiplier_temp = professionals_jobs@var:bu_token }
        multiply_temp_variable = { payroll_multiplier_temp = 10 }
        add_to_variable = { payroll_multiplier@var:bu_token = payroll_multiplier_temp }
        set_temp_variable = { payroll_multiplier_temp = specialists_jobs@var:bu_token }
        multiply_temp_variable = { payroll_multiplier_temp = 20 }
        add_to_variable = { payroll_multiplier@var:bu_token = payroll_multiplier_temp }
        multiply_variable = { payroll_multiplier@var:bu_token = global.building_base_employees@var:bu_token }

        
        multiply_variable = { laborers_jobs@var:bu_token = base_jobs_temp }
        multiply_variable = { workers_jobs@var:bu_token = base_jobs_temp }
        multiply_variable = { professionals_jobs@var:bu_token = base_jobs_temp }
        multiply_variable = { specialists_jobs@var:bu_token = base_jobs_temp }

        if = { # Laborers
            limit = {
                check_variable = { laborers_jobs@var:bu_token > 0 }
            }
            if = {
                limit = {
                    check_variable = { laborers_jobs@var:bu_token > 10000 }
                }
                set_variable = { laborers_employed@var:bu_token = laborers_jobs@var:bu_token }
                divide_variable = { laborers_employed@var:bu_token = 100 }
                multiply_variable = { laborers_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { laborers_employed@var:bu_token = 100 }
                multiply_variable = { laborers_employed@var:bu_token = laborers_job_fulfillment }
            }
            else = {
                set_variable = { laborers_employed@var:bu_token = laborers_jobs@var:bu_token }
                multiply_variable = { laborers_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { laborers_employed@var:bu_token = 100 }
                multiply_variable = { laborers_employed@var:bu_token = laborers_job_fulfillment }
                divide_variable = { laborers_employed@var:bu_token = 100 }
            }

			add_to_variable = { jobs@var:bu_token = laborers_jobs@var:bu_token }
			add_to_variable = { employed@var:bu_token = laborers_employed@var:bu_token }
        }
        else = {
            set_variable = { laborers_employed@var:bu_token = 0 }
        }

        if = { # Workers
            limit = {
                check_variable = { workers_jobs@var:bu_token > 0 }
            }
            if = {
                limit = {
                    check_variable = { workers_jobs@var:bu_token > 10000 }
                }
                set_variable = { workers_employed@var:bu_token = workers_jobs@var:bu_token }
                divide_variable = { workers_employed@var:bu_token = 100 }
                multiply_variable = { workers_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { workers_employed@var:bu_token = 100 }
                multiply_variable = { workers_employed@var:bu_token = workers_job_fulfillment }
            }
            else = {
                set_variable = { workers_employed@var:bu_token = workers_jobs@var:bu_token }
                multiply_variable = { workers_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { workers_employed@var:bu_token = 100 }
                multiply_variable = { workers_employed@var:bu_token = workers_job_fulfillment }
                divide_variable = { workers_employed@var:bu_token = 100 }
            }

			add_to_variable = { jobs@var:bu_token = workers_jobs@var:bu_token }
			add_to_variable = { employed@var:bu_token = workers_employed@var:bu_token }
        }
        else = {
            set_variable = { workers_employed@var:bu_token = 0 }
        }

        if = { # Professionals
            limit = {
                check_variable = { professionals_jobs@var:bu_token > 0 }
            }
            if = {
                limit = {
                    check_variable = { professionals_jobs@var:bu_token > 10000 }
                }
                set_variable = { professionals_employed@var:bu_token = professionals_jobs@var:bu_token }
                divide_variable = { professionals_employed@var:bu_token = 100 }
                multiply_variable = { professionals_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { professionals_employed@var:bu_token = 100 }
                multiply_variable = { professionals_employed@var:bu_token = professionals_job_fulfillment }
            }
            else = {
                set_variable = { professionals_employed@var:bu_token = professionals_jobs@var:bu_token }
                multiply_variable = { professionals_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { professionals_employed@var:bu_token = 100 }
                multiply_variable = { professionals_employed@var:bu_token = professionals_job_fulfillment }
                divide_variable = { professionals_employed@var:bu_token = 100 }
            }

			add_to_variable = { jobs@var:bu_token = professionals_jobs@var:bu_token }
			add_to_variable = { employed@var:bu_token = professionals_employed@var:bu_token }
        }
        else = {
            set_variable = { professionals_employed@var:bu_token = 0 }
        }

        if = { # Specialists
            limit = {
                check_variable = { specialists_jobs@var:bu_token > 0 }
            }
            if = {
                limit = {
                    check_variable = { specialists_jobs@var:bu_token > 10000 }
                }
                set_variable = { specialists_employed@var:bu_token = specialists_jobs@var:bu_token }
                divide_variable = { specialists_employed@var:bu_token = 100 }
                multiply_variable = { specialists_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { specialists_employed@var:bu_token = 100 }
                multiply_variable = { specialists_employed@var:bu_token = specialists_job_fulfillment }
            }
            else = {
                set_variable = { specialists_employed@var:bu_token = specialists_jobs@var:bu_token }
                multiply_variable = { specialists_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { specialists_employed@var:bu_token = 100 }
                multiply_variable = { specialists_employed@var:bu_token = specialists_job_fulfillment }
                divide_variable = { specialists_employed@var:bu_token = 100 }
            }

			add_to_variable = { jobs@var:bu_token = specialists_jobs@var:bu_token }
			add_to_variable = { employed@var:bu_token = specialists_employed@var:bu_token }
        }
        else = {
            set_variable = { specialists_employed@var:bu_token = 0 }
        }

		#Employment/Production Percentage
			set_variable = { employment_percentage@var:bu_token = employed@var:bu_token }
            if = {
                limit = {
                    check_variable = { employment_percentage@var:bu_token < 1000 }
                }
                multiply_variable = { employment_percentage@var:bu_token = 100 }
                divide_variable = { employment_percentage@var:bu_token = jobs@var:bu_token }
            }
            else = {
                divide_variable = { employment_percentage@var:bu_token = jobs@var:bu_token }
                multiply_variable = { employment_percentage@var:bu_token = 100 }
            }

            set_temp_variable = { total_prod_temp = 0 }
            set_temp_variable = { production_temp = laborers_employed@var:bu_token }
            multiply_temp_variable = { production_temp = 2 }
            add_to_temp_variable = { total_prod_temp = production_temp }
            set_temp_variable = { production_temp = workers_employed@var:bu_token }
            multiply_temp_variable = { production_temp = 5 }
            add_to_temp_variable = { total_prod_temp = production_temp }
            set_temp_variable = { production_temp = professionals_employed@var:bu_token }
            multiply_temp_variable = { production_temp = 10 }
            add_to_temp_variable = { total_prod_temp = production_temp }
            set_temp_variable = { production_temp = specialists_employed@var:bu_token }
            multiply_temp_variable = { production_temp = 20 }
            add_to_temp_variable = { total_prod_temp = production_temp }
            if = {
                limit = {
                    check_variable = { total_prod_temp > 10000 }
                }
                divide_temp_variable = { total_prod_temp = payroll_multiplier@var:bu_token }
                divide_temp_variable = { total_prod_temp = size@var:bu_token }
                multiply_temp_variable = { total_prod_temp = 100 }
            }
            else = {
                multiply_temp_variable = { total_prod_temp = 100 }
                divide_temp_variable = { total_prod_temp = payroll_multiplier@var:bu_token }
                divide_temp_variable = { total_prod_temp = size@var:bu_token }
            }
            set_variable = { production_percentage@var:bu_token = total_prod_temp }
		#

        #Capacities
            set_variable = { industrial_capacity_use@var:bu_token = controller:pm_industrial_capacity_use@var:production_method_temp }
            add_to_variable = { industrial_capacity_use@var:bu_token = controller:pm_industrial_capacity_use@var:automation_method_temp }
            multiply_variable = { industrial_capacity_use@var:bu_token = cap_modifier_temp }
            multiply_variable = { industrial_capacity_use@var:bu_token = input_modifier_temp }
            multiply_variable = { industrial_capacity_use@var:bu_token = throughput_modifier_temp }
            
            set_variable = { industrial_capacity_use_max@var:bu_token = industrial_capacity_use@var:bu_token }

            multiply_variable = { industrial_capacity_use@var:bu_token = size@var:bu_token }
            multiply_variable = { industrial_capacity_use@var:bu_token = production_percentage@var:bu_token }
            divide_variable = { industrial_capacity_use@var:bu_token = 100 }

            set_variable = { shipping_capacity@var:bu_token = controller:pm_shipping_capacity@var:production_method_temp }
            add_to_variable = { shipping_capacity@var:bu_token = controller:pm_shipping_capacity@var:automation_method_temp }
            multiply_variable = { shipping_capacity@var:bu_token = output_modifier_temp }
            multiply_variable = { shipping_capacity@var:bu_token = throughput_modifier_temp }
            
            set_variable = { industrial_capacity@var:bu_token = controller:pm_industrial_capacity@var:production_method_temp }
            add_to_variable = { industrial_capacity@var:bu_token = controller:pm_industrial_capacity@var:automation_method_temp }
            multiply_variable = { industrial_capacity@var:bu_token = output_modifier_temp }
            multiply_variable = { industrial_capacity@var:bu_token = throughput_modifier_temp }

            set_variable = { industrial_capacity_max@var:bu_token = industrial_capacity@var:bu_token }

            multiply_variable = { shipping_capacity@var:bu_token = size@var:bu_token }
            multiply_variable = { shipping_capacity@var:bu_token = production_percentage@var:bu_token }
            divide_variable = { shipping_capacity@var:bu_token = 100 }
            multiply_variable = { industrial_capacity@var:bu_token = size@var:bu_token }
            multiply_variable = { industrial_capacity@var:bu_token = production_percentage@var:bu_token }
            divide_variable = { industrial_capacity@var:bu_token = 100 }
            
            set_temp_variable = { exp_temp = industrial_capacity_use_max@var:bu_token }
            multiply_temp_variable = { exp_temp = price_industrial_capacity }
            add_to_temp_variable = { expenses_temp = exp_temp }
            set_temp_variable = { rev_temp = industrial_capacity_max@var:bu_token }
            multiply_temp_variable = { rev_temp = price_industrial_capacity }
            add_to_temp_variable = { revenue_temp = rev_temp }
        #

        # Output
            clear_array = production@var:bu_token
            clear_array = revenue_goods@var:bu_token
            for_each_loop = {
                array = global.building_base_production@var:bu_token
                value = br_token
                index = ii

                set_variable = { production_output_multiplier@var:bu_token = controller:pm_output_multiplier@var:production_method_temp }

                # Production
                set_temp_variable = { prod_temp = global.building_base_production_amount@var:bu_token^ii }              # Base resource production per size
                multiply_temp_variable = { prod_temp = production_output_multiplier@var:bu_token }                      # Multiply by PM Output Multiplier
                multiply_temp_variable = { prod_temp = throughput_modifier_temp }                                       # Throughput modifier
                multiply_temp_variable = { prod_temp = output_modifier_temp }                                           # Output modifier
                multiply_temp_variable = { prod_temp = production_percentage@var:bu_token }                             # Multiply by Production Percentage
                divide_temp_variable = { prod_temp = 100 }
                multiply_temp_variable = { prod_temp = size@var:bu_token }                                              # Multiply by size

                # Goods Revenue
                set_temp_variable = { money_temp = prod_temp }
                multiply_temp_variable = { money_temp = controller:price@var:br_token }
                
                add_to_array = { production@var:bu_token = prod_temp }
                add_to_array = { revenue_goods@var:bu_token = money_temp }
                add_to_variable = { revenue_goods@var:bu_token = money_temp }

                # For productivity
                set_temp_variable = { productivity_temp = global.building_base_production_amount@var:bu_token^ii }
                multiply_temp_variable = { productivity_temp = production_output_multiplier@var:bu_token }
                multiply_temp_variable = { productivity_temp = throughput_modifier_temp }
                multiply_temp_variable = { productivity_temp = output_modifier_temp }
                set_temp_variable = { money_limit_temp = productivity_temp }

                multiply_temp_variable = { productivity_temp = controller:price@var:br_token }
                add_to_temp_variable = { revenue_temp = productivity_temp }
                                
                multiply_temp_variable = { money_limit_temp = size@var:bu_token }
                multiply_temp_variable = { money_limit_temp = global.base_price@var:br_token }
                add_to_variable = { money_limit@var:bu_token = money_limit_temp }
            }
        #
        
        # Input
            # Compile Inputs from the PM and AM Together
            clear_array = input@var:bu_token
            clear_array = input_base_amount@var:bu_token
            clear_array = input_amount@var:bu_token
            clear_array = input_cost@var:bu_token
            for_each_loop = {
                array = controller:pm_input@var:production_method_temp
                value = br_token
                index = bu_i

                add_to_array = { input@var:bu_token = br_token }
                add_to_array = { input_base_amount@var:bu_token = controller:pm_input_amount@var:production_method_temp^bu_i }
                add_to_array = { input_amount@var:bu_token = 0 }
                add_to_array = { input_cost@var:bu_token = 0 }
            }
            for_each_loop = {
                array = controller:pm_input@var:automation_method_temp
                value = br_token
                index = bu_i

                if = {
                    limit = { is_in_array = { input@var:bu_token = br_token } }

                    for_each_loop = {
                        array = input@var:bu_token
                        value = br_token2
                        index = bu_ii
                        break = bu_brk

                        if = {
                            limit = { check_variable = { br_token2 = br_token } }
                            add_to_variable = { input_base_amount@var:bu_token^bu_ii = controller:pm_input_amount@var:automation_method_temp^bu_i }
                            clamp_variable = { var = input_base_amount@var:bu_token^bu_ii min = 0 }

                            set_temp_variable = { bu_brk = 1 }
                        }
                    }
                }
                else = {
                    add_to_array = { input@var:bu_token = br_token }
                    add_to_array = { input_base_amount@var:bu_token = controller:pm_input_amount@var:automation_method_temp^bu_i }
                    add_to_array = { input_amount@var:bu_token = 0 }
                    add_to_array = { input_cost@var:bu_token = 0 }
                }
            }

            # Calculate Input Reqs & Costs
            for_each_loop = {
                array = input@var:bu_token
                value = br_token
                index = ii

                # Production
                set_temp_variable = { prod_temp = input_base_amount@var:bu_token^ii }                                   # Base resource production % of base output value
                multiply_temp_variable = { prod_temp = global.building_base_output_value@var:bu_token }                 # Base Output Value
                multiply_temp_variable = { prod_temp = throughput_modifier_temp }                                       # Throughput modifier
                multiply_temp_variable = { prod_temp = input_modifier_temp }                                            # Input modifier
                multiply_temp_variable = { prod_temp = production_percentage@var:bu_token }                             # Multiply by Production Percentage
                divide_temp_variable = { prod_temp = 100 }
                multiply_temp_variable = { prod_temp = size@var:bu_token }
                divide_temp_variable = { prod_temp = global.base_price@var:br_token }

                # Goods Revenue
                set_temp_variable = { money_temp = prod_temp }
                multiply_temp_variable = { money_temp = controller:price@var:br_token }
                
                set_variable = { input_amount@var:bu_token^ii = prod_temp }
                set_variable = { input_cost@var:bu_token^ii = money_temp }
                add_to_variable = { expenses_input@var:bu_token = money_temp }

                # For productivity
                set_temp_variable = { productivity_temp = input_base_amount@var:bu_token^ii }
                multiply_temp_variable = { productivity_temp = global.building_base_output_value@var:bu_token }
                multiply_temp_variable = { productivity_temp = throughput_modifier_temp }
                multiply_temp_variable = { productivity_temp = input_modifier_temp }    
                multiply_temp_variable = { productivity_temp = controller:price@var:br_token }
                divide_temp_variable = { productivity_temp = global.base_price@var:br_token }
                add_to_temp_variable = { expenses_temp = productivity_temp }
                
                divide_temp_variable = { productivity_temp = controller:price@var:br_token }
                
                multiply_temp_variable = { productivity_temp = size@var:bu_token }
                multiply_temp_variable = { productivity_temp = global.base_price@var:br_token }
                add_to_variable = { money_limit@var:bu_token = productivity_temp }
            }
        #
        #Productivity
            set_variable = { productivity@var:bu_token = revenue_temp }
            subtract_from_variable = { productivity@var:bu_token = expenses_temp }
            divide_variable = { productivity@var:bu_token = payroll_multiplier@var:bu_token }
        #

        if = { # Govt Controlled Industries
            limit = {
                check_variable = { global.building_government_control@var:bu_token = 1 }
            }
        }
        else = { # Normal Finances
            set_variable = { revenue_industrial_capacity@var:bu_token = industrial_capacity@var:bu_token }
            multiply_variable = { revenue_industrial_capacity@var:bu_token = price_industrial_capacity }

            set_variable = { revenue@var:bu_token = revenue_goods@var:bu_token }
            add_to_variable = { revenue@var:bu_token = revenue_industrial_capacity@var:bu_token }

            #Expenses
            set_variable = { expenses_industrial_capacity@var:bu_token = industrial_capacity_use@var:bu_token }
            multiply_variable = { expenses_industrial_capacity@var:bu_token = price_industrial_capacity }
            
            set_variable = { expenses_payroll@var:bu_token = size@var:bu_token }
            multiply_variable = { expenses_payroll@var:bu_token = production_percentage@var:bu_token }
            divide_variable = { expenses_payroll@var:bu_token = 100 }
            multiply_variable = { expenses_payroll@var:bu_token = base_wage }
            multiply_variable = { expenses_payroll@var:bu_token = payroll_multiplier@var:bu_token }

            set_variable = { expenses@var:bu_token = expenses_payroll@var:bu_token }
            add_to_variable = { expenses@var:bu_token = expenses_input@var:bu_token }
            add_to_variable = { expenses@var:bu_token = expenses_industrial_capacity@var:bu_token }

            #Profit
            set_variable = { profit@var:bu_token = revenue@var:bu_token }
            subtract_from_variable = { profit@var:bu_token = expenses@var:bu_token }

            #Subsidies - TODO
            set_variable = { revenue_subsidies@var:bu_token = 0 }

            add_to_variable = { revenue@var:bu_token = revenue_subsidies@var:bu_token }
            add_to_variable = { profit@var:bu_token = revenue_subsidies@var:bu_token }


            #Money Accumulation
            set_variable = { money_accumulation@var:bu_token = profit@var:bu_token }
            divide_variable = { money_accumulation@var:bu_token = 2 }
            set_variable = { dividends@var:bu_token = profit@var:bu_token }
            divide_variable = { dividends@var:bu_token = 2 }

            set_temp_variable = { money_temp = money@var:bu_token }
            add_to_temp_variable = { money_temp = money_accumulation@var:bu_token }
            if = {
                limit = {
                    check_variable = { money_temp > money_limit@var:bu_token }
                }
                subtract_from_temp_variable = { money_temp = money_limit@var:bu_token }
                subtract_from_variable = { money_accumulation@var:bu_token = money_temp }
                add_to_variable = { dividends@var:bu_token = money_temp }
            }
            if = {
                limit = {
                    check_variable = { money_temp < 0 }
                }
                subtract_from_variable = { money_accumulation@var:bu_token = money_temp }
                add_to_variable = { dividends@var:bu_token = money_temp }
            }

            #Profitability
            set_variable = { profitability@var:bu_token = profit@var:bu_token }
            divide_variable = { profitability@var:bu_token = revenue@var:bu_token }
        }
    }
    industry_update_finances = {
        # Reset to 0
        set_variable = { expenses_payroll@var:bu_token = 0 }
        set_variable = { revenue_goods@var:bu_token = 0 }
        set_variable = { expenses_input@var:bu_token = 0 }
        
        set_temp_variable = { revenue_temp = 0 }
        set_temp_variable = { expenses_temp = 0 }

        # Capacities
            set_temp_variable = { exp_temp = industrial_capacity_use_max@var:bu_token }
            multiply_temp_variable = { exp_temp = price_industrial_capacity }
            add_to_temp_variable = { expenses_temp = exp_temp }

            set_temp_variable = { rev_temp = industrial_capacity_max@var:bu_token }
            multiply_temp_variable = { rev_temp = price_industrial_capacity }
            add_to_temp_variable = { revenue_temp = rev_temp }
        #

        # Output
            for_each_loop = {
                array = global.building_base_production@var:bu_token
                value = br_token
                index = ii

                # Goods Revenue
                set_temp_variable = { money_temp = production@var:bu_token^ii }
                multiply_temp_variable = { money_temp = controller:price@var:br_token }
                set_variable = { revenue_goods@var:bu_token^ii = money_temp }
                add_to_variable = { revenue_goods@var:bu_token = money_temp }

                # For productivity
                set_temp_variable = { productivity_temp = global.building_base_production_amount@var:bu_token^ii }
                multiply_temp_variable = { productivity_temp = production_output_multiplier@var:bu_token }
                multiply_temp_variable = { productivity_temp = throughput_modifier_temp }
                multiply_temp_variable = { productivity_temp = output_modifier_temp }
                multiply_temp_variable = { productivity_temp = controller:price@var:br_token }
                add_to_temp_variable = { revenue_temp = productivity_temp }
            }
        #
        
        # Input
            for_each_loop = {
                array = input@var:bu_token
                value = br_token
                index = ii

                # Goods Revenue
                set_temp_variable = { money_temp = input_amount@var:bu_token^ii }
                multiply_temp_variable = { money_temp = controller:price@var:br_token }
                
                set_variable = { input_cost@var:bu_token^ii = money_temp }
                add_to_variable = { expenses_input@var:bu_token = money_temp }

                # For productivity
                set_temp_variable = { productivity_temp = input_base_amount@var:bu_token^ii }
                multiply_temp_variable = { productivity_temp = global.building_base_output_value@var:bu_token }
                multiply_temp_variable = { productivity_temp = throughput_modifier_temp }
                multiply_temp_variable = { productivity_temp = input_modifier_temp }    
                multiply_temp_variable = { productivity_temp = controller:price@var:br_token }
                divide_temp_variable = { productivity_temp = global.base_price@var:br_token }
                add_to_temp_variable = { expenses_temp = productivity_temp }
            }
        #

        # Productivity
            set_variable = { productivity@var:bu_token = revenue_temp }
            subtract_from_variable = { productivity@var:bu_token = expenses_temp }
            divide_variable = { productivity@var:bu_token = payroll_multiplier@var:bu_token }
        #

        if = { # Govt Controlled Industries
            limit = {
                check_variable = { global.building_government_control@var:bu_token = 1 }
            }
        }
        else = { # Normal Finances
            set_variable = { revenue_industrial_capacity@var:bu_token = industrial_capacity@var:bu_token }
            multiply_variable = { revenue_industrial_capacity@var:bu_token = price_industrial_capacity }

            set_variable = { revenue@var:bu_token = revenue_goods@var:bu_token }
            add_to_variable = { revenue@var:bu_token = revenue_industrial_capacity@var:bu_token }

            #Expenses
            set_variable = { expenses_industrial_capacity@var:bu_token = industrial_capacity_use@var:bu_token }
            multiply_variable = { expenses_industrial_capacity@var:bu_token = price_industrial_capacity }
            
            set_variable = { expenses_payroll@var:bu_token = size@var:bu_token }
            multiply_variable = { expenses_payroll@var:bu_token = production_percentage@var:bu_token }
            divide_variable = { expenses_payroll@var:bu_token = 100 }
            multiply_variable = { expenses_payroll@var:bu_token = base_wage }
            multiply_variable = { expenses_payroll@var:bu_token = payroll_multiplier@var:bu_token }

            set_variable = { expenses@var:bu_token = expenses_payroll@var:bu_token }
            add_to_variable = { expenses@var:bu_token = expenses_input@var:bu_token }
            add_to_variable = { expenses@var:bu_token = expenses_industrial_capacity@var:bu_token }

            #Profit
            set_variable = { profit@var:bu_token = revenue@var:bu_token }
            subtract_from_variable = { profit@var:bu_token = expenses@var:bu_token }

            #Subsidies - TODO
            set_variable = { revenue_subsidies@var:bu_token = 0 }

            add_to_variable = { revenue@var:bu_token = revenue_subsidies@var:bu_token }
            add_to_variable = { profit@var:bu_token = revenue_subsidies@var:bu_token }


            #Money Accumulation
            set_variable = { money_accumulation@var:bu_token = profit@var:bu_token }
            divide_variable = { money_accumulation@var:bu_token = 2 }
            set_variable = { dividends@var:bu_token = profit@var:bu_token }
            divide_variable = { dividends@var:bu_token = 2 }

            set_temp_variable = { money_temp = money@var:bu_token }
            add_to_temp_variable = { money_temp = money_accumulation@var:bu_token }
            if = {
                limit = {
                    check_variable = { money_temp > money_limit@var:bu_token }
                }
                subtract_from_temp_variable = { money_temp = money_limit@var:bu_token }
                subtract_from_variable = { money_accumulation@var:bu_token = money_temp }
                add_to_variable = { dividends@var:bu_token = money_temp }
            }
            if = {
                limit = {
                    check_variable = { money_temp < 0 }
                }
                subtract_from_variable = { money_accumulation@var:bu_token = money_temp }
                add_to_variable = { dividends@var:bu_token = money_temp }
            }

            #Profitability
            set_variable = { profitability@var:bu_token = profit@var:bu_token }
            divide_variable = { profitability@var:bu_token = revenue@var:bu_token }
        }
    }

    refresh_pm_list = {
        # industry_token, am_select
        clear_array = pm_show

        if = { # Production Methods
            limit = { check_variable = { am_select = 0 } }
            for_each_loop = {
                array = global.building_production_methods@var:industry_token
                value = pm_temp

                add_to_array = { pm_show = pm_temp }
            }
        }
        else_if = { # Automation Methods
            limit = { check_variable = { am_select = 1 } }
            for_each_loop = {
                array = global.building_automation_methods@var:industry_token
                value = pm_temp

                add_to_array = { pm_show = pm_temp }
            }
        }
    }
#

# Industry Scripts
    industry_productivity_sort = {
        # Puts industries into an array sorted by the base productivity

        clear_array = industries_productivity_sort
        for_each_loop = {
            array = industries
            value = om_building
            
            set_temp_variable = { effective_wage_om = productivity@var:om_building }

            for_each_loop = {
                array = industries_productivity_sort
                index = ii
                value = vv
                break = bb

                set_temp_variable = { effective_wage_vv = productivity@var:vv }

                if = {
                    limit = {
                        check_variable = { effective_wage_vv < effective_wage_om }
                    }
                    add_to_array = { 
                        array = industries_productivity_sort 
                        value = om_building
                        index = ii
                    }
                    set_temp_variable = { bb = 1 }
                }
            }
            if = {
                limit = {
                    check_variable = { bb = 0 }
                }
                add_to_array = { industries_productivity_sort = om_building }
            }
        }
    }
    base_wage_calculation = {
        set_temp_variable = { subs_farm_productivity = 1 }
        if = {
            limit = {
                check_variable = { productivity@token:subsistence_farm > subs_farm_productivity }
            }
            set_temp_variable = { subs_farm_productivity = productivity@token:subsistence_farm }
        }
        divide_temp_variable = { subs_farm_productivity = 2 }

        # Is the sum of payroll_multiplier * size * productivity across every industry.
        set_temp_variable = { base_wage_counting = 0 }

        # Sourcing all job types
        set_temp_variable = { total_jobs_weight = 0.1 }
        add_to_temp_variable = { total_jobs_weight = slaves_workforce }
        add_to_temp_variable = { total_jobs_weight = peasants_workforce }
        set_temp_variable = { weight_temp = laborers_workforce }
        multiply_temp_variable = { weight_temp = 2 }
        add_to_temp_variable = { total_jobs_weight = weight_temp }
        set_temp_variable = { weight_temp = workers_workforce }
        multiply_temp_variable = { weight_temp = 5 }
        add_to_temp_variable = { total_jobs_weight = weight_temp }
        set_temp_variable = { weight_temp = professionals_workforce }
        multiply_temp_variable = { weight_temp = 10 }
        add_to_temp_variable = { total_jobs_weight = weight_temp }
        set_temp_variable = { weight_temp = specialists_workforce }
        multiply_temp_variable = { weight_temp = 20 }
        add_to_temp_variable = { total_jobs_weight = weight_temp }

        set_temp_variable = { remaining_jobs = total_jobs_weight }

        for_each_loop = {
            array = industries_productivity_sort
            value = b_temp
            
            # Base Wage Addition
            if = {
                limit = {
                    check_variable = { remaining_jobs > 0 }
                }
                # If there are still jobs to account for, then weight the jobs from this industry and add them up
                set_temp_variable = { jobs_wage_to_count = payroll_multiplier@var:b_temp }
                multiply_temp_variable = { jobs_wage_to_count = size@var:b_temp }

                if = { limit = { check_variable = { jobs_wage_to_count > remaining_jobs } } set_temp_variable = { jobs_wage_to_count = remaining_jobs } }
                subtract_from_temp_variable = { remaining_jobs = jobs_wage_to_count }

                # Add to base_wage_counting for calculating the base wage using the productivity of the most productive industries
                if = {
                    limit = {
                        check_variable = { productivity@var:b_temp > subs_farm_productivity }
                    }
                    multiply_temp_variable = { jobs_wage_to_count = productivity@var:b_temp }
                }
                else = {
                    multiply_temp_variable = { jobs_wage_to_count = subs_farm_productivity }
                }
                add_to_temp_variable = { base_wage_counting = jobs_wage_to_count }
            }
        }

        # These remaining jobs get assigned the productivity of subsistence farms 
        if = {
            limit = {
                check_variable = { remaining_jobs > 0 }
            }
            # Multiply by subs farm prod and add to base wage counting
            multiply_temp_variable = { remaining_jobs = subs_farm_productivity } # Productivity of 1 or more
            add_to_temp_variable = { base_wage_counting = remaining_jobs }
        }

        set_variable = { base_wage = base_wage_counting } # payroll_multiplier * size * productivity
        divide_variable = { base_wage = total_jobs_weight } # payroll_multiplier * size
        if = {
            limit = {
                check_variable = { base_wage < subs_farm_productivity }
            }
            set_variable = { base_wage = subs_farm_productivity }
        }

        #multiply_variable = { base_wage = wage_factor }

        set_variable = { laborers_wage = base_wage }
        multiply_variable = { laborers_wage = 2 }
        
        set_variable = { workers_wage = base_wage }
        multiply_variable = { workers_wage = 5 }
        
        set_variable = { professionals_wage = base_wage }
        multiply_variable = { professionals_wage = 10 }
        
        set_variable = { specialists_wage = base_wage }
        multiply_variable = { specialists_wage = 20 }
    }
#