
#Base Scripts
	advance_time = {
		random_country = {
			if = {
				limit = {
					check_variable = { global.month > 11 }
				}
				set_variable = { global.month = 0 }
				add_to_variable = { global.years_passed = 1 }
			}
			clear_array = global.econ_gp_list_array
			add_to_array = { global.econ_gp_list_array = ENG }
			add_to_array = { global.econ_gp_list_array = USA }
			add_to_array = { global.econ_gp_list_array = BRA }
			add_to_array = { global.econ_gp_list_array = MEX }
			add_to_array = { global.econ_gp_list_array = COL }
			add_to_array = { global.econ_gp_list_array = VEN }
			add_to_array = { global.econ_gp_list_array = CAN }
			add_to_array = { global.econ_gp_list_array = CHL }
			add_to_array = { global.econ_gp_list_array = BOL }
			add_to_array = { global.econ_gp_list_array = PRU }
			add_to_array = { global.econ_gp_list_array = ARG }
			add_to_array = { global.econ_gp_list_array = BUE }
			add_to_array = { global.econ_gp_list_array = HBC }
			add_to_array = { global.econ_gp_list_array = URG }
			add_to_array = { global.econ_gp_list_array = PAR }
			# #
			# add_to_array = { global.econ_gp_list_array = ECU }
			# #
			# add_to_array = { global.econ_gp_list_array = UTA }
			# add_to_array = { global.econ_gp_list_array = NVS }
			# add_to_array = { global.econ_gp_list_array = VAN }
			# add_to_array = { global.econ_gp_list_array = BRK }
			# add_to_array = { global.econ_gp_list_array = NFL }
			# add_to_array = { global.econ_gp_list_array = BCO }
			# add_to_array = { global.econ_gp_list_array = QCI }
			# #
			# add_to_array = { global.econ_gp_list_array = GUA }
			# add_to_array = { global.econ_gp_list_array = HON }
			# add_to_array = { global.econ_gp_list_array = NIC }
			# add_to_array = { global.econ_gp_list_array = COS }
			# add_to_array = { global.econ_gp_list_array = ELS }
			# add_to_array = { global.econ_gp_list_array = DOM }
			# add_to_array = { global.econ_gp_list_array = HAI }
			# #
			# #Primitives
			# add_to_array = { global.econ_gp_list_array = SIX }
			# add_to_array = { global.econ_gp_list_array = CHY }
			# add_to_array = { global.econ_gp_list_array = COM }
			# add_to_array = { global.econ_gp_list_array = SHO }
			# add_to_array = { global.econ_gp_list_array = APA }
			# add_to_array = { global.econ_gp_list_array = CRW }
			# add_to_array = { global.econ_gp_list_array = BFT }
			# add_to_array = { global.econ_gp_list_array = NAV }
			# add_to_array = { global.econ_gp_list_array = NEZ }
			# add_to_array = { global.econ_gp_list_array = SEM }

			clear_array = global.econ_order_array
			clear_array = global.econ_value_array
			
			for_each_scope_loop = {
				array = global.econ_gp_list_array #global.score_tag_array

				if = {
					limit = {
						NOT = { has_variable = has_afr_empire_mechanic_system }
					}
					for_each_loop = {
						array = global.econ_value_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv < industrial_power }
							}
							add_to_array = { 
								array = global.econ_value_array
								value = industrial_power
								index = ii
							}
							add_to_array = { 
								array = global.econ_order_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.econ_value_array = industrial_power }
						add_to_array = { global.econ_order_array = THIS }
					}
				}
			}

			#Reset
				#Reset Trade Stuff
					#Sorted least to greatest
					clear_array = global.life_goods_global_trade_price_array
					clear_array = global.life_goods_global_trade_country_array

					set_variable = { global.life_goods_global_trade_amount = 0 }
					set_variable = { global.life_goods_global_trade_value = 0 }
					set_variable = { global.life_goods_global_trade_actual_value = 0 }

					clear_array = global.everyday_goods_global_trade_price_array
					clear_array = global.everyday_goods_global_trade_country_array

					set_variable = { global.everyday_goods_global_trade_amount = 0 }
					set_variable = { global.everyday_goods_global_trade_value = 0 }
					set_variable = { global.everyday_goods_global_trade_actual_value = 0 }

					clear_array = global.luxury_goods_global_trade_price_array
					clear_array = global.luxury_goods_global_trade_country_array

					set_variable = { global.luxury_goods_global_trade_amount = 0 }
					set_variable = { global.luxury_goods_global_trade_value = 0 }
					set_variable = { global.luxury_goods_global_trade_actual_value = 0 }

					clear_array = global.services_global_trade_price_array
					clear_array = global.services_global_trade_country_array

					set_variable = { global.services_global_trade_amount = 0 }
					set_variable = { global.services_global_trade_value = 0 }
					set_variable = { global.services_global_trade_actual_value = 0 }

					clear_array = global.raw_goods_global_trade_price_array
					clear_array = global.raw_goods_global_trade_country_array

					set_variable = { global.raw_goods_global_trade_amount = 0 }
					set_variable = { global.raw_goods_global_trade_value = 0 }
					set_variable = { global.raw_goods_global_trade_actual_value = 0 }

					clear_array = global.industrial_goods_global_trade_price_array
					clear_array = global.industrial_goods_global_trade_country_array

					set_variable = { global.industrial_goods_global_trade_amount = 0 }
					set_variable = { global.industrial_goods_global_trade_value = 0 }
					set_variable = { global.industrial_goods_global_trade_actual_value = 0 }
				#
				#Goods
					set_variable = { global.life_goods_supply = 0 }
					set_variable = { global.life_goods_produced_amount = 0 }

					set_variable = { global.everyday_goods_supply = 0 }
					set_variable = { global.everyday_goods_produced_amount = 0 }

					set_variable = { global.luxury_goods_supply = 0 }
					set_variable = { global.luxury_goods_produced_amount = 0 }

					set_variable = { global.services_supply = 0 }
					set_variable = { global.services_produced_amount = 0 }

					set_variable = { global.raw_goods_supply = 0 }
					set_variable = { global.raw_goods_produced_amount = 0 }

					set_variable = { global.industrial_goods_supply = 0 }
					set_variable = { global.industrial_goods_produced_amount = 0 }

					set_variable = { global.life_goods_need = 0 }
					set_variable = { global.everyday_goods_need = 0 }
					set_variable = { global.luxury_goods_need = 0 }
					set_variable = { global.services_need = 0 }
					set_variable = { global.raw_goods_need = 0 }
					set_variable = { global.industrial_goods_need = 0 }

					set_variable = { global.life_goods_demand = 0 }
					set_variable = { global.everyday_goods_demand = 0 }
					set_variable = { global.luxury_goods_demand = 0 }
					set_variable = { global.services_demand = 0 }
					set_variable = { global.raw_goods_demand = 0 }
					set_variable = { global.industrial_goods_demand = 0 }
				#
				set_variable = { global.highest_state_gdp = 0 }
				set_variable = { global.highest_state_gdp_c = 0 }
			#
		}

		for_each_scope_loop = {
			array = global.econ_order_array
			#Reset
				#Reset State Trade Stuff
					#Sorted least to greatest
					clear_array = life_goods_trade_price_array
					clear_array = life_goods_trade_state_array

					set_variable = { life_goods_trade_amount = 0 }
					set_variable = { life_goods_trade_value = 0 }
					
					clear_array = everyday_goods_trade_price_array
					clear_array = everyday_goods_trade_state_array

					set_variable = { everyday_goods_trade_amount = 0 }
					set_variable = { everyday_goods_trade_value = 0 }
					
					clear_array = luxury_goods_trade_price_array
					clear_array = luxury_goods_trade_state_array

					set_variable = { luxury_goods_trade_amount = 0 }
					set_variable = { luxury_goods_trade_value = 0 }
					
					clear_array = services_trade_price_array
					clear_array = services_trade_state_array

					set_variable = { services_trade_amount = 0 }
					set_variable = { services_trade_value = 0 }
					
					clear_array = raw_goods_trade_price_array
					clear_array = raw_goods_trade_state_array

					set_variable = { raw_goods_trade_amount = 0 }
					set_variable = { raw_goods_trade_value = 0 }
					
					clear_array = industrial_goods_trade_price_array
					clear_array = industrial_goods_trade_state_array

					set_variable = { industrial_goods_trade_amount = 0 }
					set_variable = { industrial_goods_trade_value = 0 }
				#
				#Reset Global Trade Stuff
					set_variable = { life_goods_global_trade_amount = 0 } #Positive: Goods Bought / Negative: Goods Sold - Note, this only applies in this effect. It's always positive elsewhere.
					set_variable = { life_goods_global_trade_value = 0 } #Positive: Amount Recieved / Negative: Amount Paid
					set_variable = { life_goods_global_trade_actual_value = 0 }

					set_variable = { everyday_goods_global_trade_amount = 0 }
					set_variable = { everyday_goods_global_trade_value = 0 }
					set_variable = { everyday_goods_global_trade_actual_value = 0 }

					set_variable = { luxury_goods_global_trade_amount = 0 }
					set_variable = { luxury_goods_global_trade_value = 0 }
					set_variable = { luxury_goods_global_trade_actual_value = 0 }

					set_variable = { services_global_trade_amount = 0 }
					set_variable = { services_global_trade_value = 0 }
					set_variable = { services_global_trade_actual_value = 0 }

					set_variable = { raw_goods_global_trade_amount = 0 }
					set_variable = { raw_goods_global_trade_value = 0 }
					set_variable = { raw_goods_global_trade_actual_value = 0 }

					set_variable = { industrial_goods_global_trade_amount = 0 }
					set_variable = { industrial_goods_global_trade_value = 0 }
					set_variable = { industrial_goods_global_trade_actual_value = 0 }
				#

				#Bought
				set_variable = { life_goods_bought_amount = 0 }
				set_variable = { life_goods_bought_value = 0 }

				set_variable = { everyday_goods_bought_amount = 0 }
				set_variable = { everyday_goods_bought_value = 0 }
				
				set_variable = { luxury_goods_bought_amount = 0 }
				set_variable = { luxury_goods_bought_value = 0 }
				
				set_variable = { services_bought_amount = 0 }
				set_variable = { services_bought_value = 0 }
				
				set_variable = { raw_goods_bought_amount = 0 }
				set_variable = { raw_goods_bought_value = 0 }
				
				set_variable = { industrial_goods_bought_amount = 0 }
				set_variable = { industrial_goods_bought_value = 0 }

				#Sold
				set_variable = { life_goods_sold_amount = 0 }
				set_variable = { life_goods_sold_value = 0 }

				set_variable = { everyday_goods_sold_amount = 0 }
				set_variable = { everyday_goods_sold_value = 0 }
				
				set_variable = { luxury_goods_sold_amount = 0 }
				set_variable = { luxury_goods_sold_value = 0 }
				
				set_variable = { services_sold_amount = 0 }
				set_variable = { services_sold_value = 0 }
				
				set_variable = { raw_goods_sold_amount = 0 }
				set_variable = { raw_goods_sold_value = 0 }
				
				set_variable = { industrial_goods_sold_amount = 0 }
				set_variable = { industrial_goods_sold_value = 0 }

				#Government
				set_variable = { life_goods_government_stockpile = 0 }
				set_variable = { everyday_goods_government_stockpile = 0 }
				set_variable = { luxury_goods_government_stockpile = 0 }
				set_variable = { services_government_stockpile = 0 }
				set_variable = { raw_goods_government_stockpile = 0 }
				set_variable = { industrial_goods_government_stockpile = 0 }
				
				set_variable = { life_goods_government_demand = 0 }
				set_variable = { everyday_goods_government_demand = 0 }
				set_variable = { luxury_goods_government_demand = 0 }
				set_variable = { services_government_demand = 0 }
				set_variable = { raw_goods_government_demand = 0 }
				set_variable = { industrial_goods_government_demand = 0 }

				reset_supply = yes
				reset_demand = yes
			#
			set_variable = { actual_revenue = 0 }
			set_variable = { actual_income_tax_revenue = 0 }
			set_variable = { actual_spending = 0 }
			set_variable = { actual_infrastructure_spending = 0 }
			set_variable = { actual_construction_spending = 0 }
			set_variable = { actual_industrial_spending = 0 }
			set_variable = { actual_tariff_revenue = 0 }
			set_variable = { actual_sales_tax_revenue = 0 }
			set_variable = { actual_trade_subsidy_spending = 0 }
			set_variable = { actual_administration_spending = 0 }
			set_variable = { actual_life_goods_spending = 0 }
			set_variable = { actual_everyday_goods_spending = 0 }
			set_variable = { actual_luxury_goods_spending = 0 }
			set_variable = { actual_services_spending = 0 }
			set_variable = { actual_raw_goods_spending = 0 }
			set_variable = { actual_industrial_goods_spending = 0 }
			set_variable = { actual_military_spending = 0 }
			set_variable = { actual_project_spending = 0 }

			set_variable = { gdp_amount = 0 }
			set_variable = { gdp_amount_this_year = 0 }
			set_variable = { gdp_amount_last_year = 0 }
			set_variable = { annual_gdp_amount = 0 }

			set_variable = { national_bank_interest_gain = 0 }

			calibrate_tech_bonuses = yes

			#Military Demand (Also handles battalion count)
			calculate_military_demand = yes

			every_controlled_state = {
				#Soldier Payroll
					set_temp_variable = { payroll_temp = 0 }

					set_temp_variable = { conscripted_amount = PREV.max_available_manpower_k } #Temporary
					multiply_temp_variable = { conscripted_amount = 10 }
					divide_temp_variable = { conscripted_amount = PREV.max_manpower_k }
					multiply_temp_variable = { conscripted_amount = state_population_k }
					divide_temp_variable = { conscripted_amount = 10 }

					set_temp_variable = { need_temp = global.conscripted_base_life_goods_need }
					multiply_temp_variable = { need_temp = conscripted_amount }
					divide_temp_variable = { need_temp = 100 }
					multiply_temp_variable = { need_temp = life_goods_price }
					add_to_temp_variable = { payroll_temp = need_temp }

					set_temp_variable = { need_temp = global.conscripted_base_everyday_goods_need }
					multiply_temp_variable = { need_temp = conscripted_amount }
					divide_temp_variable = { need_temp = 100 }
					multiply_temp_variable = { need_temp = everyday_goods_price }
					add_to_temp_variable = { payroll_temp = need_temp }
					
					set_temp_variable = { need_temp = global.conscripted_base_luxury_goods_need }
					multiply_temp_variable = { need_temp = conscripted_amount }
					divide_temp_variable = { need_temp = 100 }
					multiply_temp_variable = { need_temp = luxury_goods_price }
					add_to_temp_variable = { payroll_temp = need_temp }

					multiply_temp_variable = { payroll_temp = global.conscripted_payroll_multiplier }
					add_to_variable = { pops_earnings = payroll_temp }
					add_to_variable = { soldiers_earnings = payroll_temp }
					subtract_from_variable = { PREV.treasury = payroll_temp }
					add_to_variable = { PREV.actual_military_spending = payroll_temp }
				#
				#Pops/Govt get paid
					set_variable = { pops_spending = 0 }
					set_variable = { pops_goods_spending = 0 }

					add_to_variable = { pops_money = pops_earnings }
					#Upper Strata
					set_temp_variable = { tax_temp = aristocrats_earnings }
					add_to_temp_variable = { tax_temp = capitalists_earnings }
					multiply_temp_variable = { tax_temp = PREV.income_tax_upper_strata_percentage }
					divide_temp_variable = { tax_temp = 100 }
					subtract_from_variable = { pops_money = tax_temp }
					add_to_variable = { pops_spending = tax_temp }
					add_to_variable = { PREV.treasury = tax_temp }
					add_to_variable = { PREV.actual_income_tax_revenue = tax_temp }

					#Middle Strata
					set_temp_variable = { tax_temp = artisans_earnings }
					add_to_temp_variable = { tax_temp = professionals_earnings }
					add_to_temp_variable = { tax_temp = specialists_earnings }
					multiply_temp_variable = { tax_temp = PREV.income_tax_middle_strata_percentage }
					divide_temp_variable = { tax_temp = 100 }
					subtract_from_variable = { pops_money = tax_temp }
					add_to_variable = { pops_spending = tax_temp }
					add_to_variable = { PREV.treasury = tax_temp }
					add_to_variable = { PREV.actual_income_tax_revenue = tax_temp }

					#Lower Strata
					set_temp_variable = { tax_temp = rgos_earnings }
					add_to_temp_variable = { tax_temp = craftsmen_earnings }
					add_to_temp_variable = { tax_temp = clerks_earnings }
					multiply_temp_variable = { tax_temp = PREV.income_tax_lower_strata_percentage }
					divide_temp_variable = { tax_temp = 100 }
					subtract_from_variable = { pops_money = tax_temp }
					add_to_variable = { pops_spending = tax_temp }
					add_to_variable = { PREV.treasury = tax_temp }
					add_to_variable = { PREV.actual_income_tax_revenue = tax_temp }
				#
				#Administration
					set_temp_variable = { admin_temp = pops_earnings }
					multiply_temp_variable = { admin_temp = global.administration_base_expense }
					divide_temp_variable = { admin_temp = 100 }
					if = {
						limit = {
							check_variable = { pops_amount < global.administration_population_expense }
						}
						set_temp_variable = { modifier_temp = global.administration_population_expense }
						subtract_from_temp_variable = { modifier_temp = pops_amount }
						divide_temp_variable = { modifier_temp = global.administration_population_expense }
						multiply_temp_variable = { modifier_temp = global.administration_population_expense_modifier }
						add_to_temp_variable = { modifier_temp = 1 }
						multiply_temp_variable = { admin_temp = modifier_temp }
					}
					subtract_from_variable = { PREV.treasury = admin_temp }
					add_to_variable = { PREV.actual_administration_spending = admin_temp }
				#
				#Reset
					set_variable = { life_goods_trade_amount = 0 } #Positive: Goods Bought / Negative: Goods Sold - Note, this only applies in this effect. It's always positive elsewhere.
					set_variable = { life_goods_trade_value = 0 } #Positive: Amount Recieved / Negative: Amount Paid

					set_variable = { everyday_goods_trade_amount = 0 }
					set_variable = { everyday_goods_trade_value = 0 }
					
					set_variable = { luxury_goods_trade_amount = 0 }
					set_variable = { luxury_goods_trade_value = 0 }
					
					set_variable = { services_trade_amount = 0 }
					set_variable = { services_trade_value = 0 }
					
					set_variable = { raw_goods_trade_amount = 0 }
					set_variable = { raw_goods_trade_value = 0 }
					
					set_variable = { industrial_goods_trade_amount = 0 }
					set_variable = { industrial_goods_trade_value = 0 }

					#Bought
					set_variable = { life_goods_bought_amount = 0 }
					set_variable = { life_goods_bought_value = 0 }

					set_variable = { everyday_goods_bought_amount = 0 }
					set_variable = { everyday_goods_bought_value = 0 }
					
					set_variable = { luxury_goods_bought_amount = 0 }
					set_variable = { luxury_goods_bought_value = 0 }
					
					set_variable = { services_bought_amount = 0 }
					set_variable = { services_bought_value = 0 }
					
					set_variable = { raw_goods_bought_amount = 0 }
					set_variable = { raw_goods_bought_value = 0 }
					
					set_variable = { industrial_goods_bought_amount = 0 }
					set_variable = { industrial_goods_bought_value = 0 }

					#Sold
					set_variable = { life_goods_sold_amount = 0 }
					set_variable = { life_goods_sold_value = 0 }

					set_variable = { everyday_goods_sold_amount = 0 }
					set_variable = { everyday_goods_sold_value = 0 }
					
					set_variable = { luxury_goods_sold_amount = 0 }
					set_variable = { luxury_goods_sold_value = 0 }
					
					set_variable = { services_sold_amount = 0 }
					set_variable = { services_sold_value = 0 }
					
					set_variable = { raw_goods_sold_amount = 0 }
					set_variable = { raw_goods_sold_value = 0 }
					
					set_variable = { industrial_goods_sold_amount = 0 }
					set_variable = { industrial_goods_sold_value = 0 }


					set_variable = { pops_earnings = 0 }

					set_variable = { pops_savings_deposits = 0 }
					set_variable = { pops_savings_interest = 0 }
					set_variable = { pops_savings_withdrawals = 0 }

					set_variable = { pops_artisans_everyday_goods_sold = 0 }
					set_variable = { pops_artisans_luxury_goods_sold = 0 }
					set_variable = { pops_artisans_industrial_goods_sold = 0 }

					set_variable = { pops_rgos_life_goods_sold = 0 }
					set_variable = { pops_rgos_raw_goods_sold = 0 }

					set_variable = { pops_services_sold = 0 }


					set_variable = { soldiers_earnings = 0 }
					set_variable = { officers_earnings = 0 }

					set_variable = { factory_everyday_goods_sold = 0 }
					set_variable = { factory_everyday_goods_earnings = 0 }
					set_variable = { factory_everyday_goods_spending = 0 }
					
					set_variable = { factory_luxury_goods_sold = 0 }
					set_variable = { factory_luxury_goods_earnings = 0 }
					set_variable = { factory_luxury_goods_spending = 0 }
					
					set_variable = { factory_industrial_goods_sold = 0 }
					set_variable = { factory_industrial_goods_earnings = 0 }
					set_variable = { factory_industrial_goods_spending = 0 }
				#
				
				set_variable = { infrastructure_max_level = PREV.infrastructure_max_level }

				
				#Pops withdraw from Savings
					if = {
						limit = {
							check_variable = { pops_money < 0 }
							check_variable = { pops_savings > 0 }
						}
						set_temp_variable = { pops_savings_temp = pops_money }
						multiply_temp_variable = { pops_savings_temp = -2 }
						if = {
							limit = {
								check_variable = { pops_savings_temp > pops_savings }
							}
							set_temp_variable = { pops_savings_temp = pops_savings }
						}
						subtract_from_variable = { pops_savings = pops_savings_temp }
						add_to_variable = { pops_money = pops_savings_temp }
						add_to_variable = { pops_savings_withdrawals = pops_savings_temp }
					}
					if = {
						limit = {
							check_variable = { pops_life_goods_fulfilled_percentage < pops_annual_life_goods_fulfilled_percentage }
							check_variable = { pops_savings > 0 }
						}
						set_temp_variable = { pops_savings_temp = pops_annual_life_goods_fulfilled_percentage }
						subtract_from_temp_variable = { pops_savings_temp = pops_life_goods_fulfilled_percentage }
						multiply_temp_variable = { pops_savings_temp = pops_life_goods_need }
						multiply_temp_variable = { pops_savings_temp = life_goods_price }
						divide_temp_variable = { pops_savings_temp = 2 }
						if = {
							limit = {
								check_variable = { pops_savings_temp > pops_savings }
							}
							set_temp_variable = { pops_savings_temp = pops_savings }
						}
						subtract_from_variable = { pops_savings = pops_savings_temp }
						add_to_variable = { pops_money = pops_savings_temp }
						add_to_variable = { pops_savings_withdrawals = pops_savings_temp }
					}
					if = {
						limit = {
							check_variable = { pops_everyday_goods_fulfilled_percentage < pops_annual_everyday_goods_fulfilled_percentage }
							check_variable = { pops_savings > 0 }
						}
						set_temp_variable = { pops_savings_temp = pops_annual_everyday_goods_fulfilled_percentage }
						subtract_from_temp_variable = { pops_savings_temp = pops_everyday_goods_fulfilled_percentage }
						multiply_temp_variable = { pops_savings_temp = pops_everyday_goods_need }
						multiply_temp_variable = { pops_savings_temp = everyday_goods_price }
						divide_temp_variable = { pops_savings_temp = 2 }
						if = {
							limit = {
								check_variable = { pops_savings_temp > pops_savings }
							}
							set_temp_variable = { pops_savings_temp = pops_savings }
						}
						subtract_from_variable = { pops_savings = pops_savings_temp }
						add_to_variable = { pops_money = pops_savings_temp }
						add_to_variable = { pops_savings_withdrawals = pops_savings_temp }
					}
					if = {
						limit = {
							check_variable = { pops_luxury_goods_fulfilled_percentage < pops_annual_luxury_goods_fulfilled_percentage }
							check_variable = { pops_savings > 0 }
						}
						set_temp_variable = { pops_savings_temp = pops_annual_luxury_goods_fulfilled_percentage }
						subtract_from_temp_variable = { pops_savings_temp = pops_luxury_goods_fulfilled_percentage }
						multiply_temp_variable = { pops_savings_temp = pops_luxury_goods_need }
						multiply_temp_variable = { pops_savings_temp = luxury_goods_price }
						divide_temp_variable = { pops_savings_temp = 2 }
						if = {
							limit = {
								check_variable = { pops_savings_temp > pops_savings }
							}
							set_temp_variable = { pops_savings_temp = pops_savings }
						}
						subtract_from_variable = { pops_savings = pops_savings_temp }
						add_to_variable = { pops_money = pops_savings_temp }
						add_to_variable = { pops_savings_withdrawals = pops_savings_temp }
					}
					if = {
						limit = {
							check_variable = { pops_savings > pops_savings_goal }
							check_variable = { pops_savings > 0 }
						}
						set_temp_variable = { withdraw_temp = pops_savings }
						subtract_from_temp_variable = { withdraw_temp = pops_savings_goal }
						divide_temp_variable = { withdraw_temp = 2 }
						if = {
							limit = {
								check_variable = { withdraw_temp > pops_savings }
							}
							set_temp_variable = { withdraw_temp = pops_savings }
						}
						subtract_from_variable = { pops_savings = withdraw_temp }
						add_to_variable = { pops_money = withdraw_temp }
						add_to_variable = { pops_savings_withdrawals = withdraw_temp }
					}
				#

				#Industrial Subsidies
					set_temp_variable = { raw_goods_temp = factory_raw_goods_need }
					multiply_temp_variable = { raw_goods_temp = raw_goods_price }
					set_temp_variable = { industrial_goods_temp = factory_industrial_goods_need }
					multiply_temp_variable = { industrial_goods_temp = industrial_goods_price }

					set_temp_variable = { industrial_spending_temp = raw_goods_temp }
					add_to_temp_variable = { industrial_spending_temp = industrial_goods_temp }
					multiply_temp_variable = { industrial_spending_temp = PREV.industrial_subsidy_percentage }
					divide_temp_variable = { industrial_spending_temp = 100 }

					#Splitting between industry categories
					set_temp_variable = { m_temp = factory_everyday_goods_amount }
					multiply_temp_variable = { m_temp = 100 }
					divide_temp_variable = { m_temp = private_factory_amount }
					multiply_temp_variable = { m_temp = industrial_spending_temp }
					divide_temp_variable = { m_temp = 100 }
					add_to_variable = { factory_everyday_goods_money = m_temp }

					set_temp_variable = { m_temp = factory_luxury_goods_amount }
					multiply_temp_variable = { m_temp = 100 }
					divide_temp_variable = { m_temp = private_factory_amount }
					multiply_temp_variable = { m_temp = industrial_spending_temp }
					divide_temp_variable = { m_temp = 100 }
					add_to_variable = { factory_luxury_goods_money = m_temp }

					set_temp_variable = { m_temp = factory_industrial_goods_amount }
					multiply_temp_variable = { m_temp = 100 }
					divide_temp_variable = { m_temp = private_factory_amount }
					multiply_temp_variable = { m_temp = industrial_spending_temp }
					divide_temp_variable = { m_temp = 100 }
					add_to_variable = { factory_industrial_goods_money = m_temp }

					subtract_from_variable = { PREV.treasury = industrial_spending_temp }
					add_to_variable = { PREV.actual_industrial_spending = industrial_spending_temp }
				#

				update_modifiers_state_effects = yes
				
				#Demand will be calculated from the purchasing power and needs of factories, governments, and pops. National demand will be an accumulation of state demand.
				# calculate_demand = yes #Do first

				# update_production_maintenance = yes #Do just after Demand
				
				# calculate_supply = yes #Do just after Production
			}

			calculate_trade_neighbors = yes

			#Cleanup Trade
				#Life Goods
					set_temp_variable = { resource_temp = 0 }
					set_temp_variable = { i_temp = 0 }
					while_loop_effect = {
						limit = {
							check_variable = { i_temp < life_goods_global_trade_country_array^num }
						}

						set_temp_variable = { country_temp = life_goods_global_trade_country_array^i_temp }
						set_temp_variable = { gt_a = life_goods_global_trade_amount_@var:country_temp }
						if = {
							limit = {
								NOT = { check_variable = { gt_a > 0 } }
							}
							remove_from_array = {
								array = life_goods_global_trade_country_array
								value = country_temp
							}
							clear_variable = life_goods_global_trade_amount_@var:country_temp
							clear_variable = life_goods_global_trade_value_@var:country_temp
							clear_variable = life_goods_global_trade_shipping_cost_@var:country_temp
							clear_variable = life_goods_global_trade_lock_type_@var:country_temp
							subtract_from_temp_variable = { i_temp = 1 }
						}
						add_to_temp_variable = { i_temp = 1 }
					}
				#
			#
		}

		calculate_global_trade_supply = yes

		for_each_scope_loop = {
			array = global.econ_order_array

			#National Supply & Demand, Setting National Price
				calculate_national_supply_demand = yes
				adjust_national_price = yes
			#
		}
		
		#Calculate the Global Price for trade
		calculate_global_price = yes

		for_each_scope_loop = {
			array = global.econ_order_array

			#Calculating Supply & Demand at global price
			calculate_supply_demand_at_global_price = yes
			
			every_controlled_state = {
				#Reset Other things
					set_variable = { aristocrats_earnings = 0 }
					set_variable = { artisans_earnings = 0 }
					set_variable = { rgos_earnings = 0 }
					set_variable = { craftsmen_earnings = 0 }
					set_variable = { specialists_earnings = 0 }
					set_variable = { clerks_earnings = 0 }
					set_variable = { professionals_earnings = 0 }
					set_variable = { capitalists_earnings = 0 }


					set_variable = { pops_life_goods_fulfilled_percentage = 0 }
					set_variable = { pops_everyday_goods_fulfilled_percentage = 0 }
					set_variable = { pops_luxury_goods_fulfilled_percentage = 0 }
					set_variable = { pops_services_fulfilled_percentage = 0 }

					set_variable = { pops_artisans_raw_goods_fulfilled_percentage = 0 }

					set_variable = { factory_everyday_goods_raw_goods_fulfilled_percentage = 0 }
					set_variable = { factory_everyday_goods_industrial_goods_fulfilled_percentage = 0 }
					set_variable = { factory_luxury_goods_raw_goods_fulfilled_percentage = 0 }
					set_variable = { factory_luxury_goods_industrial_goods_fulfilled_percentage = 0 }
					set_variable = { factory_industrial_goods_raw_goods_fulfilled_percentage = 0 }
					set_variable = { factory_industrial_goods_industrial_goods_fulfilled_percentage = 0 }

					set_variable = { infrastructure_industrial_goods_fulfilled_percentage = 0 }
					
					set_variable = { pops_rgos_mechanization_industrial_goods_fulfilled_percentage = 0 }
					set_variable = { pops_rgos_mechanization_expansion_industrial_goods_fulfillment = 0 }
				#

				#Infra gets its money
					add_to_variable = { pops_earnings = infrastructure_money }

					set_variable = { infrastructure_money = infrastructure_industrial_goods_demand }
					multiply_variable = { infrastructure_money = industrial_goods_price }

					set_temp_variable = { govt_payment_temp = PREV.infrastructure_subsidy_percentage }
					multiply_temp_variable = { govt_payment_temp = infrastructure_money }
					divide_temp_variable = { govt_payment_temp = 100 }

					set_temp_variable = { pop_payment_temp = infrastructure_money }
					subtract_from_temp_variable = { pop_payment_temp = govt_payment_temp }

					subtract_from_variable = { pops_money = pop_payment_temp }
					add_to_variable = { pops_spending = pop_payment_temp }
					subtract_from_variable = { PREV.treasury = govt_payment_temp }
					add_to_variable = { PREV.actual_infrastructure_spending = govt_payment_temp }

				#
				
				#Construction
					#Infrastructure
						if = {
							limit = {
								has_state_flag = infrastructure_construction_government_subsidized
							}
							set_temp_variable = { infra_construction_funds_temp = global.infrastructure_construction_base_speed }
							set_temp_variable = { modifier_temp = infrastructure_build_speed_effect }
							add_to_temp_variable = { modifier_temp = 1 }
							multiply_temp_variable = { infra_construction_funds_temp = modifier_temp }
							multiply_temp_variable = { infra_construction_funds_temp = industrial_goods_price }
							multiply_temp_variable = { infra_construction_funds_temp = PREV.construction_spending_percentage }
							divide_temp_variable = { infra_construction_funds_temp = 100 }
							subtract_from_temp_variable = { infra_construction_funds_temp = infrastructure_construction_investment_money }
							if = {
								limit = {
									check_variable = { infra_construction_funds_temp > 0 }
								}
								add_to_variable = { infrastructure_construction_investment_money = infra_construction_funds_temp }
								subtract_from_variable = { PREV.treasury = infra_construction_funds_temp }
								add_to_variable = { PREV.actual_construction_spending = infra_construction_funds_temp }
							}
						}
					#
					#Everyday Goods Factory
						if = {
							limit = {
								has_state_flag = factory_everyday_goods_construction_government_subsidized
							}
							set_temp_variable = { construction_funds_temp = global.factory_everyday_goods_construction_base_speed }
							set_temp_variable = { modifier_temp = factory_build_speed_effect }
							add_to_temp_variable = { modifier_temp = 1 }
							multiply_temp_variable = { construction_funds_temp = modifier_temp }
							multiply_temp_variable = { construction_funds_temp = industrial_goods_price }
							multiply_temp_variable = { construction_funds_temp = PREV.construction_spending_percentage }
							divide_temp_variable = { construction_funds_temp = 100 }
							subtract_from_temp_variable = { construction_funds_temp = factory_everyday_goods_construction_investment_money }
							if = {
								limit = {
									check_variable = { construction_funds_temp > 0 }
								}
								add_to_variable = { factory_everyday_goods_construction_investment_money = construction_funds_temp }
								subtract_from_variable = { PREV.treasury = construction_funds_temp }
								add_to_variable = { PREV.actual_construction_spending = construction_funds_temp }
							}
						}
					#
					#Luxury Goods Factory
						if = {
							limit = {
								has_state_flag = factory_luxury_goods_construction_government_subsidized
							}
							set_temp_variable = { construction_funds_temp = global.factory_luxury_goods_construction_base_speed }
							set_temp_variable = { modifier_temp = factory_build_speed_effect }
							add_to_temp_variable = { modifier_temp = 1 }
							multiply_temp_variable = { construction_funds_temp = modifier_temp }
							multiply_temp_variable = { construction_funds_temp = industrial_goods_price }
							multiply_temp_variable = { construction_funds_temp = PREV.construction_spending_percentage }
							divide_temp_variable = { construction_funds_temp = 100 }
							subtract_from_temp_variable = { construction_funds_temp = factory_luxury_goods_construction_investment_money }
							if = {
								limit = {
									check_variable = { construction_funds_temp > 0 }
								}
								add_to_variable = { factory_luxury_goods_construction_investment_money = construction_funds_temp }
								subtract_from_variable = { PREV.treasury = construction_funds_temp }
								add_to_variable = { PREV.actual_construction_spending = construction_funds_temp }
							}
						}
					#
					#Industrial Goods Factory
						if = {
							limit = {
								has_state_flag = factory_industrial_goods_construction_government_subsidized
							}
							set_temp_variable = { construction_funds_temp = global.factory_industrial_goods_construction_base_speed }
							set_temp_variable = { modifier_temp = factory_build_speed_effect }
							add_to_temp_variable = { modifier_temp = 1 }
							multiply_temp_variable = { construction_funds_temp = modifier_temp }
							multiply_temp_variable = { construction_funds_temp = industrial_goods_price }
							multiply_temp_variable = { construction_funds_temp = PREV.construction_spending_percentage }
							divide_temp_variable = { construction_funds_temp = 100 }
							subtract_from_temp_variable = { construction_funds_temp = factory_industrial_goods_construction_investment_money }
							if = {
								limit = {
									check_variable = { construction_funds_temp > 0 }
								}
								add_to_variable = { factory_industrial_goods_construction_investment_money = construction_funds_temp }
								subtract_from_variable = { PREV.treasury = construction_funds_temp }
								add_to_variable = { PREV.actual_construction_spending = construction_funds_temp }
							}
						}
					#
				#

				#States get added to the trade array and get sorted by price
                    #life_goods
                        for_each_loop = {
                            array = PREV.life_goods_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > life_goods_price }
                                }
                                add_to_array = { 
                                    array = PREV.life_goods_trade_price_array 
                                    value = life_goods_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.life_goods_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.life_goods_trade_price_array = life_goods_price }
                            add_to_array = { PREV.life_goods_trade_state_array = THIS }
                        }

                    #everyday_goods
                        for_each_loop = {
                            array = PREV.everyday_goods_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > everyday_goods_price }
                                }
                                add_to_array = { 
                                    array = PREV.everyday_goods_trade_price_array 
                                    value = everyday_goods_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.everyday_goods_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.everyday_goods_trade_price_array = everyday_goods_price }
                            add_to_array = { PREV.everyday_goods_trade_state_array = THIS }
                        }

                    #luxury_goods
                        for_each_loop = {
                            array = PREV.luxury_goods_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > luxury_goods_price }
                                }
                                add_to_array = { 
                                    array = PREV.luxury_goods_trade_price_array 
                                    value = luxury_goods_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.luxury_goods_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.luxury_goods_trade_price_array = luxury_goods_price }
                            add_to_array = { PREV.luxury_goods_trade_state_array = THIS }
                        }

                    #services
                        for_each_loop = {
                            array = PREV.services_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > services_price }
                                }
                                add_to_array = { 
                                    array = PREV.services_trade_price_array 
                                    value = services_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.services_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.services_trade_price_array = services_price }
                            add_to_array = { PREV.services_trade_state_array = THIS }
                        }

                    #raw_goods
                        for_each_loop = {
                            array = PREV.raw_goods_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > raw_goods_price }
                                }
                                add_to_array = { 
                                    array = PREV.raw_goods_trade_price_array 
                                    value = raw_goods_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.raw_goods_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.raw_goods_trade_price_array = raw_goods_price }
                            add_to_array = { PREV.raw_goods_trade_state_array = THIS }
                        }

                    #industrial_goods
                        for_each_loop = {
                            array = PREV.industrial_goods_trade_price_array
                            index = ii
                            value = vv
                            break = bb

                            if = {
                                limit = {
                                    check_variable = { vv > industrial_goods_price }
                                }
                                add_to_array = { 
                                    array = PREV.industrial_goods_trade_price_array 
                                    value = industrial_goods_price
                                    index = ii
                                }
                                add_to_array = { 
                                    array = PREV.industrial_goods_trade_state_array 
                                    value = THIS
                                    index = ii
                                }
                                set_temp_variable = { bb = 1 }
                            }
                        }
                        if = {
                            limit = {
                                check_variable = { bb = 0 }
                            }
                            add_to_array = { PREV.industrial_goods_trade_price_array = industrial_goods_price }
                            add_to_array = { PREV.industrial_goods_trade_state_array = THIS }
                        }

				#
			}

			#Divide the Price/Base Price by supply to get actual price
				# divide_variable = { life_goods_price = life_goods_supply }
				# if = {
				# 	limit = {
				# 		check_variable = { life_goods_price < life_goods_trade_price_array^0 }
				# 	}
				# 	set_variable = { life_goods_price = life_goods_trade_price_array^0 }
				# }
				
				# divide_variable = { everyday_goods_price = everyday_goods_supply }
				# if = {
				# 	limit = {
				# 		check_variable = { everyday_goods_price < everyday_goods_trade_price_array^0 }
				# 	}
				# 	set_variable = { everyday_goods_price = everyday_goods_trade_price_array^0 }
				# }
				
				# divide_variable = { luxury_goods_price = luxury_goods_supply }
				# if = {
				# 	limit = {
				# 		check_variable = { luxury_goods_price < luxury_goods_trade_price_array^0 }
				# 	}
				# 	set_variable = { luxury_goods_price = luxury_goods_trade_price_array^0 }
				# }
				
				# divide_variable = { services_price = services_supply }
				# if = {
				# 	limit = {
				# 		check_variable = { services_price < services_trade_price_array^0 }
				# 	}
				# 	set_variable = { services_price = services_trade_price_array^0 }
				# }
				
				# divide_variable = { raw_goods_price = raw_goods_supply }
				# if = {
				# 	limit = {
				# 		check_variable = { raw_goods_price < raw_goods_trade_price_array^0 }
				# 	}
				# 	set_variable = { raw_goods_price = raw_goods_trade_price_array^0 }
				# }
				
				# divide_variable = { industrial_goods_price = industrial_goods_supply }
				# if = {
				# 	limit = {
				# 		check_variable = { industrial_goods_price < industrial_goods_trade_price_array^0 }
				# 	}
				# 	set_variable = { industrial_goods_price = industrial_goods_trade_price_array^0 }
				# }
			#

			#Countries get added to the global trade array and get sorted by price
				#life_goods
					for_each_loop = {
						array = global.life_goods_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > life_goods_price }
							}
							add_to_array = { 
								array = global.life_goods_global_trade_price_array 
								value = life_goods_price
								index = ii
							}
							add_to_array = { 
								array = global.life_goods_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.life_goods_global_trade_price_array = life_goods_price }
						add_to_array = { global.life_goods_global_trade_country_array = THIS }
					}

				#everyday_goods
					for_each_loop = {
						array = global.everyday_goods_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > everyday_goods_price }
							}
							add_to_array = { 
								array = global.everyday_goods_global_trade_price_array 
								value = everyday_goods_price
								index = ii
							}
							add_to_array = { 
								array = global.everyday_goods_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.everyday_goods_global_trade_price_array = everyday_goods_price }
						add_to_array = { global.everyday_goods_global_trade_country_array = THIS }
					}

				#luxury_goods
					for_each_loop = {
						array = global.luxury_goods_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > luxury_goods_price }
							}
							add_to_array = { 
								array = global.luxury_goods_global_trade_price_array 
								value = luxury_goods_price
								index = ii
							}
							add_to_array = { 
								array = global.luxury_goods_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.luxury_goods_global_trade_price_array = luxury_goods_price }
						add_to_array = { global.luxury_goods_global_trade_country_array = THIS }
					}

				#services
					for_each_loop = {
						array = global.services_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > services_price }
							}
							add_to_array = { 
								array = global.services_global_trade_price_array 
								value = services_price
								index = ii
							}
							add_to_array = { 
								array = global.services_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.services_global_trade_price_array = services_price }
						add_to_array = { global.services_global_trade_country_array = THIS }
					}

				#raw_goods
					for_each_loop = {
						array = global.raw_goods_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > raw_goods_price }
							}
							add_to_array = { 
								array = global.raw_goods_global_trade_price_array 
								value = raw_goods_price
								index = ii
							}
							add_to_array = { 
								array = global.raw_goods_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.raw_goods_global_trade_price_array = raw_goods_price }
						add_to_array = { global.raw_goods_global_trade_country_array = THIS }
					}

				#industrial_goods
					for_each_loop = {
						array = global.industrial_goods_global_trade_price_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								check_variable = { vv > industrial_goods_price }
							}
							add_to_array = { 
								array = global.industrial_goods_global_trade_price_array 
								value = industrial_goods_price
								index = ii
							}
							add_to_array = { 
								array = global.industrial_goods_global_trade_country_array 
								value = THIS
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.industrial_goods_global_trade_price_array = industrial_goods_price }
						add_to_array = { global.industrial_goods_global_trade_country_array = THIS }
					}

			#

			#INTERSTATE TRADE
				calculate_trade_coefficient = yes
				calculate_interstate_trade = yes
			#
			
			calculate_trade_step_size = yes
			set_variable = { life_goods_new_export = 0 }
			set_variable = { everyday_goods_new_export = 0 }
			set_variable = { luxury_goods_new_export = 0 }
			set_variable = { raw_goods_new_export = 0 }
			set_variable = { industrial_goods_new_export = 0 }
			set_variable = { services_new_export = 0 }
		}
	
		for_each_scope_loop = {
			array = global.econ_order_array

			sort_international_trade_array = yes
			ai_international_trade_calc = yes
		}

			#NOTE: Masters get first access to puppet/colony's market. This needs to be implemented at some point

		#INTERNATIONAL TRADE
			calculate_global_trade_supply = yes
			conduct_international_trade = yes
		#

		for_each_scope_loop = {
			array = global.econ_order_array


			#INTERNATIONAL TRADE
				#Countries with excess demand to supply will try to buy goods. Countries in the order of the "Great Powers List" go first. 
				#It is assumed that all imported and exported supply/demand will be fulfilled. This will be fulfilled in order of cheapest states to most expensive in exports and most expensive to cheapest in imports.

                # #life_goods
					# set_temp_variable = { buy_amount_left = life_goods_demand }
					# set_temp_variable = { spending_left = life_goods_demand }
					# multiply_temp_variable = { spending_left = life_goods_price }
					# #Loops thru cheapest countries to buy from
					# for_each_loop = {
					# 	array = global.life_goods_global_trade_country_array
					# 	value = country_temp
					# 	index = iii
					# 	break = cheapest_brk

					# 	#Checks if the country's goods are cheaper & shipping is affordabole 
					# 	#TODO - Shipping cost
					# 	if = {
					# 		limit = {
					# 			check_variable = { country_temp:life_goods_price < life_goods_price }
					# 			check_variable = { spending_left > 0 }
					# 			check_variable = { buy_amount_left > 0 }
					# 			check_variable = { country_temp:life_goods_supply_min < country_temp:life_goods_supply }
								
					# 		}

					# 		#Shipping Cost
					# 		set_temp_variable = { exporter_capital = country_temp:capital }
					# 		var:exporter_capital = {
					# 			set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
					# 		}
					# 		divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
					# 		set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
					# 		add_to_temp_variable = { modifier_temp = 1 }
					# 		multiply_variable = { shipping_cost = modifier_temp }
					# 		add_to_variable = { shipping_cost = 1 }

					# 		#Tariffs/Subsidies
					# 		set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					# 		add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
					# 		subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					# 		subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
					# 		add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					# 		if = {
					# 			limit = {
					# 				check_variable = { net_tariff_percentage_temp < 10 }
					# 			}
					# 			set_temp_variable = { net_tariff_percentage_temp = 10 }
					# 		}

					# 		set_temp_variable = { true_price = country_temp:life_goods_price }
					# 		multiply_temp_variable = { true_price = shipping_cost }
					# 		multiply_temp_variable = { true_price = net_tariff_percentage_temp }
					# 		divide_temp_variable = { true_price = 100 }
					# 		if = {
					# 			limit = {
					# 				check_variable = { true_price < life_goods_price }
					# 			}
					# 			#Do Trade
					# 			set_temp_variable = { u = true_price }
					# 			multiply_temp_variable = { u = country_temp:life_goods_demand }
					# 			divide_temp_variable = { u = life_goods_price }
					# 			divide_temp_variable = { u = life_goods_demand }
								
					# 			set_temp_variable = { buy_amount = life_goods_supply }
					# 			multiply_temp_variable = { buy_amount = u }
					# 			multiply_temp_variable = { buy_amount = -1 }
					# 			add_to_temp_variable = { buy_amount = country_temp:life_goods_supply }
					# 			add_to_temp_variable = { u = 1 }
					# 			divide_temp_variable = { buy_amount = u }
								
					# 			multiply_temp_variable = { buy_amount = 0.7 }

					# 			multiply_temp_variable = { buy_amount = shipping_cost }
					# 			multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
					# 			divide_temp_variable = { buy_amount = 100 }

					# 			set_temp_variable = { good_max_temp = country_temp:life_goods_supply }
					# 			subtract_from_temp_variable = { good_max_temp = country_temp:life_goods_supply_min }
								
					# 			clamp_temp_variable = {
					# 				var = buy_amount
					# 				max = good_max_temp
					# 			}
					# 			clamp_temp_variable = {
					# 				var = buy_amount
					# 				min = 0
					# 			}
					# 			set_temp_variable = { cost_temp = buy_amount }
					# 			multiply_temp_variable = { cost_temp = country_temp:life_goods_price }

					# 			if = {
					# 				limit = {
					# 					check_variable = { cost_temp > spending_left }
					# 				}
					# 				set_temp_variable = { cost_temp = spending_left }
					# 				set_temp_variable = { buy_amount = cost_temp }
					# 				divide_temp_variable = { buy_amount = state_temp:life_goods_price }
					# 			}
					# 			if = {
					# 				limit = {
					# 					check_variable = { buy_amount > 0 }
					# 				}
											
					# 				subtract_from_variable = { country_temp:life_goods_supply = buy_amount }
					# 				subtract_from_variable = { country_temp:life_goods_global_trade_amount = buy_amount }
					# 				add_to_variable = { country_temp:life_goods_global_trade_actual_value = cost_temp }
					# 				subtract_from_variable = { life_goods_global_trade_actual_value = cost_temp }
					# 				add_to_variable = { global.life_goods_global_trade_actual_value = cost_temp }
					# 				add_to_variable = { country_temp:life_goods_global_trade_value = cost_temp }

					# 				multiply_temp_variable = { buy_amount = 100 }
					# 				divide_temp_variable = { buy_amount = shipping_cost }
					# 				divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

					# 				#Tariffs/Subsidies
					# 				set_temp_variable = { export_cost_temp = 100 }
					# 				add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
					# 				subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
					# 				multiply_temp_variable = { export_cost_temp = cost_temp }
					# 				divide_temp_variable = { export_cost_temp = 100 }
					# 				set_temp_variable = { export_value_temp = export_cost_temp }
					# 				subtract_from_temp_variable = { export_value_temp = cost_temp }

					# 				set_temp_variable = { import_cost_temp = 100 }
					# 				add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
					# 				subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
					# 				multiply_temp_variable = { import_cost_temp = cost_temp }
					# 				divide_temp_variable = { import_cost_temp = 100 }
					# 				set_temp_variable = { import_value_temp = import_cost_temp }
					# 				subtract_from_temp_variable = { import_value_temp = cost_temp }

					# 				add_to_temp_variable = { cost_temp = export_value_temp }
					# 				add_to_temp_variable = { cost_temp = import_value_temp }
					# 				add_to_variable = { country_temp:treasury = export_value_temp }
					# 				add_to_variable = { treasury = import_value_temp }
					# 				if = {
					# 					limit = {
					# 						check_variable = { export_value_temp > 0 }
					# 					}
					# 					add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
					# 				}
					# 				else = {
					# 					subtract_from_variable = { country_temp:actual_trade_subsidy_spending = export_value_temp }
					# 				}
					# 				if = {
					# 					limit = {
					# 						check_variable = { import_value_temp > 0 }
					# 					}
					# 					add_to_variable = { actual_tariff_revenue = import_value_temp }
					# 				}
					# 				else = {
					# 					subtract_from_variable = { actual_trade_subsidy_spending = import_value_temp }
					# 				}

					# 				add_to_variable = { life_goods_supply = buy_amount }
					# 				add_to_variable = { life_goods_global_trade_amount = buy_amount }
					# 				add_to_variable = { global.life_goods_global_trade_amount = buy_amount }
					# 				subtract_from_temp_variable = { buy_amount_left = buy_amount }
					# 				subtract_from_temp_variable = { spending_left = cost_temp }
					# 				subtract_from_variable = { life_goods_global_trade_value = cost_temp }
					# 				add_to_variable = { global.life_goods_global_trade_value = cost_temp }
									
					# 			}
					# 		}
					# 	}
					# 	else_if = {
					# 		limit = {
					# 			OR = {
					# 				NOT = { check_variable = { buy_amount_left > 0 } }
					# 				NOT = { check_variable = { spending_left > 0 } }
					# 				NOT = {  check_variable = { country_temp:life_goods_price < life_goods_price } }
					# 			}
					# 		}
					# 		set_temp_variable = { cheapest_brk = 1 }
					# 	}
					# }
                # #everyday_goods
					# set_temp_variable = { buy_amount_left = everyday_goods_demand }
					# set_temp_variable = { spending_left = everyday_goods_demand }
					# multiply_temp_variable = { spending_left = everyday_goods_price }
					# #Loops thru cheapest countries to buy from
					# for_each_loop = {
					# 	array = global.everyday_goods_global_trade_country_array
					# 	value = country_temp
					# 	index = iii
					# 	break = cheapest_brk

					# 	#Checks if the country's goods are cheaper & shipping is affordabole 
					# 	#TODO - Shipping cost
					# 	if = {
					# 		limit = {
					# 			check_variable = { country_temp:everyday_goods_price < everyday_goods_price }
					# 			check_variable = { spending_left > 0 }
					# 			check_variable = { buy_amount_left > 0 }
					# 			check_variable = { country_temp:everyday_goods_supply_min < country_temp:everyday_goods_supply }
								
					# 		}

					# 		#Shipping Cost
					# 		set_temp_variable = { exporter_capital = country_temp:capital }
					# 		var:exporter_capital = {
					# 			set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
					# 		}
					# 		divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
					# 		set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
					# 		add_to_temp_variable = { modifier_temp = 1 }
					# 		multiply_variable = { shipping_cost = modifier_temp }
					# 		add_to_variable = { shipping_cost = 1 }

					# 		#Tariffs/Subsidies
					# 		set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					# 		add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
					# 		subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					# 		subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
					# 		add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					# 		if = {
					# 			limit = {
					# 				check_variable = { net_tariff_percentage_temp < 10 }
					# 			}
					# 			set_temp_variable = { net_tariff_percentage_temp = 10 }
					# 		}

					# 		set_temp_variable = { true_price = country_temp:everyday_goods_price }
					# 		multiply_temp_variable = { true_price = shipping_cost }
					# 		multiply_temp_variable = { true_price = net_tariff_percentage_temp }
					# 		divide_temp_variable = { true_price = 100 }
					# 		if = {
					# 			limit = {
					# 				check_variable = { true_price < everyday_goods_price }
					# 			}
					# 			#Do Trade
					# 			set_temp_variable = { u = true_price }
					# 			multiply_temp_variable = { u = country_temp:everyday_goods_demand }
					# 			divide_temp_variable = { u = everyday_goods_price }
					# 			divide_temp_variable = { u = everyday_goods_demand }
								
					# 			set_temp_variable = { buy_amount = everyday_goods_supply }
					# 			multiply_temp_variable = { buy_amount = u }
					# 			multiply_temp_variable = { buy_amount = -1 }
					# 			add_to_temp_variable = { buy_amount = country_temp:everyday_goods_supply }
					# 			add_to_temp_variable = { u = 1 }
					# 			divide_temp_variable = { buy_amount = u }
								
					# 			multiply_temp_variable = { buy_amount = 0.7 }

					# 			multiply_temp_variable = { buy_amount = shipping_cost }
					# 			multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
					# 			divide_temp_variable = { buy_amount = 100 }

					# 			set_temp_variable = { good_max_temp = country_temp:everyday_goods_supply }
					# 			subtract_from_temp_variable = { good_max_temp = country_temp:everyday_goods_supply_min }
								
					# 			clamp_temp_variable = {
					# 				var = buy_amount
					# 				max = good_max_temp
					# 			}
					# 			clamp_temp_variable = {
					# 				var = buy_amount
					# 				min = 0
					# 			}
					# 			set_temp_variable = { cost_temp = buy_amount }
					# 			multiply_temp_variable = { cost_temp = country_temp:everyday_goods_price }

					# 			if = {
					# 				limit = {
					# 					check_variable = { cost_temp > spending_left }
					# 				}
					# 				set_temp_variable = { cost_temp = spending_left }
					# 				set_temp_variable = { buy_amount = cost_temp }
					# 				divide_temp_variable = { buy_amount = state_temp:everyday_goods_price }
					# 			}
					# 			if = {
					# 				limit = {
					# 					check_variable = { buy_amount > 0 }
					# 				}
											
					# 				subtract_from_variable = { country_temp:everyday_goods_supply = buy_amount }
					# 				subtract_from_variable = { country_temp:everyday_goods_global_trade_amount = buy_amount }
					# 				add_to_variable = { country_temp:everyday_goods_global_trade_actual_value = cost_temp }
					# 				subtract_from_variable = { everyday_goods_global_trade_actual_value = cost_temp }
					# 				add_to_variable = { global.everyday_goods_global_trade_actual_value = cost_temp }
					# 				add_to_variable = { country_temp:everyday_goods_global_trade_value = cost_temp }

					# 				multiply_temp_variable = { buy_amount = 100 }
					# 				divide_temp_variable = { buy_amount = shipping_cost }
					# 				divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

					# 				#Tariffs/Subsidies
					# 				set_temp_variable = { export_cost_temp = 100 }
					# 				add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
					# 				subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
					# 				multiply_temp_variable = { export_cost_temp = cost_temp }
					# 				divide_temp_variable = { export_cost_temp = 100 }
					# 				set_temp_variable = { export_value_temp = export_cost_temp }
					# 				subtract_from_temp_variable = { export_value_temp = cost_temp }

					# 				set_temp_variable = { import_cost_temp = 100 }
					# 				add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
					# 				subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
					# 				multiply_temp_variable = { import_cost_temp = cost_temp }
					# 				divide_temp_variable = { import_cost_temp = 100 }
					# 				set_temp_variable = { import_value_temp = import_cost_temp }
					# 				subtract_from_temp_variable = { import_value_temp = cost_temp }

					# 				add_to_temp_variable = { cost_temp = export_value_temp }
					# 				add_to_temp_variable = { cost_temp = import_value_temp }
					# 				add_to_variable = { country_temp:treasury = export_value_temp }
					# 				add_to_variable = { treasury = import_value_temp }
					# 				if = {
					# 					limit = {
					# 						check_variable = { export_value_temp > 0 }
					# 					}
					# 					add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
					# 				}
					# 				else = {
					# 					subtract_from_variable = { country_temp:actual_trade_subsidy_spending = export_value_temp }
					# 				}
					# 				if = {
					# 					limit = {
					# 						check_variable = { import_value_temp > 0 }
					# 					}
					# 					add_to_variable = { actual_tariff_revenue = import_value_temp }
					# 				}
					# 				else = {
					# 					subtract_from_variable = { actual_trade_subsidy_spending = import_value_temp }
					# 				}

					# 				add_to_variable = { everyday_goods_supply = buy_amount }
					# 				add_to_variable = { everyday_goods_global_trade_amount = buy_amount }
					# 				add_to_variable = { global.everyday_goods_global_trade_amount = buy_amount }
					# 				subtract_from_temp_variable = { buy_amount_left = buy_amount }
					# 				subtract_from_temp_variable = { spending_left = cost_temp }
					# 				subtract_from_variable = { everyday_goods_global_trade_value = cost_temp }
					# 				add_to_variable = { global.everyday_goods_global_trade_value = cost_temp }
									
					# 			}
					# 		}
					# 	}
					# 	else_if = {
					# 		limit = {
					# 			OR = {
					# 				NOT = { check_variable = { buy_amount_left > 0 } }
					# 				NOT = { check_variable = { spending_left > 0 } }
					# 				NOT = {  check_variable = { country_temp:everyday_goods_price < everyday_goods_price } }
					# 			}
					# 		}
					# 		set_temp_variable = { cheapest_brk = 1 }
					# 	}
					# }
                # #luxury_goods
					# set_temp_variable = { buy_amount_left = luxury_goods_demand }
					# set_temp_variable = { spending_left = luxury_goods_demand }
					# multiply_temp_variable = { spending_left = luxury_goods_price }
					# #Loops thru cheapest countries to buy from
					# for_each_loop = {
					# 	array = global.luxury_goods_global_trade_country_array
					# 	value = country_temp
					# 	index = iii
					# 	break = cheapest_brk

					# 	#Checks if the country's goods are cheaper & shipping is affordabole 
					# 	#TODO - Shipping cost
					# 	if = {
					# 		limit = {
					# 			check_variable = { country_temp:luxury_goods_price < luxury_goods_price }
					# 			check_variable = { spending_left > 0 }
					# 			check_variable = { buy_amount_left > 0 }
					# 			check_variable = { country_temp:luxury_goods_supply_min < country_temp:luxury_goods_supply }
								
					# 		}

					# 		#Shipping Cost
					# 		set_temp_variable = { exporter_capital = country_temp:capital }
					# 		var:exporter_capital = {
					# 			set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
					# 		}
					# 		divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
					# 		set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
					# 		add_to_temp_variable = { modifier_temp = 1 }
					# 		multiply_variable = { shipping_cost = modifier_temp }
					# 		add_to_variable = { shipping_cost = 1 }

					# 		#Tariffs/Subsidies
					# 		set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					# 		add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
					# 		subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					# 		subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
					# 		add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					# 		if = {
					# 			limit = {
					# 				check_variable = { net_tariff_percentage_temp < 10 }
					# 			}
					# 			set_temp_variable = { net_tariff_percentage_temp = 10 }
					# 		}

					# 		set_temp_variable = { true_price = country_temp:luxury_goods_price }
					# 		multiply_temp_variable = { true_price = shipping_cost }
					# 		multiply_temp_variable = { true_price = net_tariff_percentage_temp }
					# 		divide_temp_variable = { true_price = 100 }
					# 		if = {
					# 			limit = {
					# 				check_variable = { true_price < luxury_goods_price }
					# 			}
					# 			#Do Trade
					# 			set_temp_variable = { u = true_price }
					# 			multiply_temp_variable = { u = country_temp:luxury_goods_demand }
					# 			divide_temp_variable = { u = luxury_goods_price }
					# 			divide_temp_variable = { u = luxury_goods_demand }
								
					# 			set_temp_variable = { buy_amount = luxury_goods_supply }
					# 			multiply_temp_variable = { buy_amount = u }
					# 			multiply_temp_variable = { buy_amount = -1 }
					# 			add_to_temp_variable = { buy_amount = country_temp:luxury_goods_supply }
					# 			add_to_temp_variable = { u = 1 }
					# 			divide_temp_variable = { buy_amount = u }
								
					# 			multiply_temp_variable = { buy_amount = 0.7 }

					# 			multiply_temp_variable = { buy_amount = shipping_cost }
					# 			multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
					# 			divide_temp_variable = { buy_amount = 100 }

					# 			set_temp_variable = { good_max_temp = country_temp:luxury_goods_supply }
					# 			subtract_from_temp_variable = { good_max_temp = country_temp:luxury_goods_supply_min }
								
					# 			clamp_temp_variable = {
					# 				var = buy_amount
					# 				max = good_max_temp
					# 			}
					# 			clamp_temp_variable = {
					# 				var = buy_amount
					# 				min = 0
					# 			}
					# 			set_temp_variable = { cost_temp = buy_amount }
					# 			multiply_temp_variable = { cost_temp = country_temp:luxury_goods_price }

					# 			if = {
					# 				limit = {
					# 					check_variable = { cost_temp > spending_left }
					# 				}
					# 				set_temp_variable = { cost_temp = spending_left }
					# 				set_temp_variable = { buy_amount = cost_temp }
					# 				divide_temp_variable = { buy_amount = state_temp:luxury_goods_price }
					# 			}
					# 			if = {
					# 				limit = {
					# 					check_variable = { buy_amount > 0 }
					# 				}
											
					# 				subtract_from_variable = { country_temp:luxury_goods_supply = buy_amount }
					# 				subtract_from_variable = { country_temp:luxury_goods_global_trade_amount = buy_amount }
					# 				add_to_variable = { country_temp:luxury_goods_global_trade_actual_value = cost_temp }
					# 				subtract_from_variable = { luxury_goods_global_trade_actual_value = cost_temp }
					# 				add_to_variable = { global.luxury_goods_global_trade_actual_value = cost_temp }
					# 				add_to_variable = { country_temp:luxury_goods_global_trade_value = cost_temp }

					# 				multiply_temp_variable = { buy_amount = 100 }
					# 				divide_temp_variable = { buy_amount = shipping_cost }
					# 				divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

					# 				#Tariffs/Subsidies
					# 				set_temp_variable = { export_cost_temp = 100 }
					# 				add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
					# 				subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
					# 				multiply_temp_variable = { export_cost_temp = cost_temp }
					# 				divide_temp_variable = { export_cost_temp = 100 }
					# 				set_temp_variable = { export_value_temp = export_cost_temp }
					# 				subtract_from_temp_variable = { export_value_temp = cost_temp }

					# 				set_temp_variable = { import_cost_temp = 100 }
					# 				add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
					# 				subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
					# 				multiply_temp_variable = { import_cost_temp = cost_temp }
					# 				divide_temp_variable = { import_cost_temp = 100 }
					# 				set_temp_variable = { import_value_temp = import_cost_temp }
					# 				subtract_from_temp_variable = { import_value_temp = cost_temp }

					# 				add_to_temp_variable = { cost_temp = export_value_temp }
					# 				add_to_temp_variable = { cost_temp = import_value_temp }
					# 				add_to_variable = { country_temp:treasury = export_value_temp }
					# 				add_to_variable = { treasury = import_value_temp }
					# 				if = {
					# 					limit = {
					# 						check_variable = { export_value_temp > 0 }
					# 					}
					# 					add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
					# 				}
					# 				else = {
					# 					subtract_from_variable = { country_temp:actual_trade_subsidy_spending = export_value_temp }
					# 				}
					# 				if = {
					# 					limit = {
					# 						check_variable = { import_value_temp > 0 }
					# 					}
					# 					add_to_variable = { actual_tariff_revenue = import_value_temp }
					# 				}
					# 				else = {
					# 					subtract_from_variable = { actual_trade_subsidy_spending = import_value_temp }
					# 				}

					# 				add_to_variable = { luxury_goods_supply = buy_amount }
					# 				add_to_variable = { luxury_goods_global_trade_amount = buy_amount }
					# 				add_to_variable = { global.luxury_goods_global_trade_amount = buy_amount }
					# 				subtract_from_temp_variable = { buy_amount_left = buy_amount }
					# 				subtract_from_temp_variable = { spending_left = cost_temp }
					# 				subtract_from_variable = { luxury_goods_global_trade_value = cost_temp }
					# 				add_to_variable = { global.luxury_goods_global_trade_value = cost_temp }
									
					# 			}
					# 		}
					# 	}
					# 	else_if = {
					# 		limit = {
					# 			OR = {
					# 				NOT = { check_variable = { buy_amount_left > 0 } }
					# 				NOT = { check_variable = { spending_left > 0 } }
					# 				NOT = {  check_variable = { country_temp:luxury_goods_price < luxury_goods_price } }
					# 			}
					# 		}
					# 		set_temp_variable = { cheapest_brk = 1 }
					# 	}
					# }
                # #services
					# set_temp_variable = { buy_amount_left = services_demand }
					# set_temp_variable = { spending_left = services_demand }
					# multiply_temp_variable = { spending_left = services_price }
					# #Loops thru cheapest countries to buy from
					# for_each_loop = {
					# 	array = global.services_global_trade_country_array
					# 	value = country_temp
					# 	index = iii
					# 	break = cheapest_brk

					# 	#Checks if the country's goods are cheaper & shipping is affordabole 
					# 	#TODO - Shipping cost
					# 	if = {
					# 		limit = {
					# 			check_variable = { country_temp:services_price < services_price }
					# 			check_variable = { spending_left > 0 }
					# 			check_variable = { buy_amount_left > 0 }
					# 			check_variable = { country_temp:services_supply_min < country_temp:services_supply }
								
					# 		}

					# 		#Shipping Cost
					# 		set_temp_variable = { exporter_capital = country_temp:capital }
					# 		var:exporter_capital = {
					# 			set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
					# 		}
					# 		divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
					# 		set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
					# 		add_to_temp_variable = { modifier_temp = 1 }
					# 		multiply_variable = { shipping_cost = modifier_temp }
					# 		add_to_variable = { shipping_cost = 1 }

					# 		#Tariffs/Subsidies
					# 		set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					# 		add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
					# 		subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					# 		subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
					# 		add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					# 		if = {
					# 			limit = {
					# 				check_variable = { net_tariff_percentage_temp < 10 }
					# 			}
					# 			set_temp_variable = { net_tariff_percentage_temp = 10 }
					# 		}

					# 		set_temp_variable = { true_price = country_temp:services_price }
					# 		multiply_temp_variable = { true_price = shipping_cost }
					# 		multiply_temp_variable = { true_price = net_tariff_percentage_temp }
					# 		divide_temp_variable = { true_price = 100 }
					# 		if = {
					# 			limit = {
					# 				check_variable = { true_price < services_price }
					# 			}
					# 			#Do Trade
					# 			set_temp_variable = { u = true_price }
					# 			multiply_temp_variable = { u = country_temp:services_demand }
					# 			divide_temp_variable = { u = services_price }
					# 			divide_temp_variable = { u = services_demand }
								
					# 			set_temp_variable = { buy_amount = services_supply }
					# 			multiply_temp_variable = { buy_amount = u }
					# 			multiply_temp_variable = { buy_amount = -1 }
					# 			add_to_temp_variable = { buy_amount = country_temp:services_supply }
					# 			add_to_temp_variable = { u = 1 }
					# 			divide_temp_variable = { buy_amount = u }
								
					# 			multiply_temp_variable = { buy_amount = 0.7 }

					# 			multiply_temp_variable = { buy_amount = shipping_cost }
					# 			multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
					# 			divide_temp_variable = { buy_amount = 100 }

					# 			set_temp_variable = { good_max_temp = country_temp:services_supply }
					# 			subtract_from_temp_variable = { good_max_temp = country_temp:services_supply_min }
								
					# 			clamp_temp_variable = {
					# 				var = buy_amount
					# 				max = good_max_temp
					# 			}
					# 			clamp_temp_variable = {
					# 				var = buy_amount
					# 				min = 0
					# 			}
					# 			set_temp_variable = { cost_temp = buy_amount }
					# 			multiply_temp_variable = { cost_temp = country_temp:services_price }

					# 			if = {
					# 				limit = {
					# 					check_variable = { cost_temp > spending_left }
					# 				}
					# 				set_temp_variable = { cost_temp = spending_left }
					# 				set_temp_variable = { buy_amount = cost_temp }
					# 				divide_temp_variable = { buy_amount = state_temp:services_price }
					# 			}
					# 			if = {
					# 				limit = {
					# 					check_variable = { buy_amount > 0 }
					# 				}
											
					# 				subtract_from_variable = { country_temp:services_supply = buy_amount }
					# 				subtract_from_variable = { country_temp:services_global_trade_amount = buy_amount }
					# 				add_to_variable = { country_temp:services_global_trade_actual_value = cost_temp }
					# 				subtract_from_variable = { services_global_trade_actual_value = cost_temp }
					# 				add_to_variable = { global.services_global_trade_actual_value = cost_temp }
					# 				add_to_variable = { country_temp:services_global_trade_value = cost_temp }

					# 				multiply_temp_variable = { buy_amount = 100 }
					# 				divide_temp_variable = { buy_amount = shipping_cost }
					# 				divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

					# 				#Tariffs/Subsidies
					# 				set_temp_variable = { export_cost_temp = 100 }
					# 				add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
					# 				subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
					# 				multiply_temp_variable = { export_cost_temp = cost_temp }
					# 				divide_temp_variable = { export_cost_temp = 100 }
					# 				set_temp_variable = { export_value_temp = export_cost_temp }
					# 				subtract_from_temp_variable = { export_value_temp = cost_temp }

					# 				set_temp_variable = { import_cost_temp = 100 }
					# 				add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
					# 				subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
					# 				multiply_temp_variable = { import_cost_temp = cost_temp }
					# 				divide_temp_variable = { import_cost_temp = 100 }
					# 				set_temp_variable = { import_value_temp = import_cost_temp }
					# 				subtract_from_temp_variable = { import_value_temp = cost_temp }

					# 				add_to_temp_variable = { cost_temp = export_value_temp }
					# 				add_to_temp_variable = { cost_temp = import_value_temp }
					# 				add_to_variable = { country_temp:treasury = export_value_temp }
					# 				add_to_variable = { treasury = import_value_temp }
					# 				if = {
					# 					limit = {
					# 						check_variable = { export_value_temp > 0 }
					# 					}
					# 					add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
					# 				}
					# 				else = {
					# 					subtract_from_variable = { country_temp:actual_trade_subsidy_spending = export_value_temp }
					# 				}
					# 				if = {
					# 					limit = {
					# 						check_variable = { import_value_temp > 0 }
					# 					}
					# 					add_to_variable = { actual_tariff_revenue = import_value_temp }
					# 				}
					# 				else = {
					# 					subtract_from_variable = { actual_trade_subsidy_spending = import_value_temp }
					# 				}

					# 				add_to_variable = { services_supply = buy_amount }
					# 				add_to_variable = { services_global_trade_amount = buy_amount }
					# 				add_to_variable = { global.services_global_trade_amount = buy_amount }
					# 				subtract_from_temp_variable = { buy_amount_left = buy_amount }
					# 				subtract_from_temp_variable = { spending_left = cost_temp }
					# 				subtract_from_variable = { services_global_trade_value = cost_temp }
					# 				add_to_variable = { global.services_global_trade_value = cost_temp }
									
					# 			}
					# 		}
					# 	}
					# 	else_if = {
					# 		limit = {
					# 			OR = {
					# 				NOT = { check_variable = { buy_amount_left > 0 } }
					# 				NOT = { check_variable = { spending_left > 0 } }
					# 				NOT = {  check_variable = { country_temp:services_price < services_price } }
					# 			}
					# 		}
					# 		set_temp_variable = { cheapest_brk = 1 }
					# 	}
					# }
                # #raw_goods
					# set_temp_variable = { buy_amount_left = raw_goods_demand }
					# set_temp_variable = { spending_left = raw_goods_demand }
					# multiply_temp_variable = { spending_left = raw_goods_price }
					# #Loops thru cheapest countries to buy from
					# for_each_loop = {
					# 	array = global.raw_goods_global_trade_country_array
					# 	value = country_temp
					# 	index = iii
					# 	break = cheapest_brk

					# 	#Checks if the country's goods are cheaper & shipping is affordabole 
					# 	#TODO - Shipping cost
					# 	if = {
					# 		limit = {
					# 			check_variable = { country_temp:raw_goods_price < raw_goods_price }
					# 			check_variable = { spending_left > 0 }
					# 			check_variable = { buy_amount_left > 0 }
					# 			check_variable = { country_temp:raw_goods_supply_min < country_temp:raw_goods_supply }
								
					# 		}

					# 		#Shipping Cost
					# 		set_temp_variable = { exporter_capital = country_temp:capital }
					# 		var:exporter_capital = {
					# 			set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
					# 		}
					# 		divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
					# 		set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
					# 		add_to_temp_variable = { modifier_temp = 1 }
					# 		multiply_variable = { shipping_cost = modifier_temp }
					# 		add_to_variable = { shipping_cost = 1 }

					# 		#Tariffs/Subsidies
					# 		set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					# 		add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
					# 		subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					# 		subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
					# 		add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					# 		if = {
					# 			limit = {
					# 				check_variable = { net_tariff_percentage_temp < 10 }
					# 			}
					# 			set_temp_variable = { net_tariff_percentage_temp = 10 }
					# 		}

					# 		set_temp_variable = { true_price = country_temp:raw_goods_price }
					# 		multiply_temp_variable = { true_price = shipping_cost }
					# 		multiply_temp_variable = { true_price = net_tariff_percentage_temp }
					# 		divide_temp_variable = { true_price = 100 }
					# 		if = {
					# 			limit = {
					# 				check_variable = { true_price < raw_goods_price }
					# 			}
					# 			#Do Trade
					# 			set_temp_variable = { u = true_price }
					# 			multiply_temp_variable = { u = country_temp:raw_goods_demand }
					# 			divide_temp_variable = { u = raw_goods_price }
					# 			divide_temp_variable = { u = raw_goods_demand }
								
					# 			set_temp_variable = { buy_amount = raw_goods_supply }
					# 			multiply_temp_variable = { buy_amount = u }
					# 			multiply_temp_variable = { buy_amount = -1 }
					# 			add_to_temp_variable = { buy_amount = country_temp:raw_goods_supply }
					# 			add_to_temp_variable = { u = 1 }
					# 			divide_temp_variable = { buy_amount = u }
								
					# 			multiply_temp_variable = { buy_amount = 0.7 }

					# 			multiply_temp_variable = { buy_amount = shipping_cost }
					# 			multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
					# 			divide_temp_variable = { buy_amount = 100 }

					# 			set_temp_variable = { good_max_temp = country_temp:raw_goods_supply }
					# 			subtract_from_temp_variable = { good_max_temp = country_temp:raw_goods_supply_min }
								
					# 			clamp_temp_variable = {
					# 				var = buy_amount
					# 				max = good_max_temp
					# 			}
					# 			clamp_temp_variable = {
					# 				var = buy_amount
					# 				min = 0
					# 			}
					# 			set_temp_variable = { cost_temp = buy_amount }
					# 			multiply_temp_variable = { cost_temp = country_temp:raw_goods_price }

					# 			if = {
					# 				limit = {
					# 					check_variable = { cost_temp > spending_left }
					# 				}
					# 				set_temp_variable = { cost_temp = spending_left }
					# 				set_temp_variable = { buy_amount = cost_temp }
					# 				divide_temp_variable = { buy_amount = state_temp:raw_goods_price }
					# 			}
					# 			if = {
					# 				limit = {
					# 					check_variable = { buy_amount > 0 }
					# 				}
											
					# 				subtract_from_variable = { country_temp:raw_goods_supply = buy_amount }
					# 				subtract_from_variable = { country_temp:raw_goods_global_trade_amount = buy_amount }
					# 				add_to_variable = { country_temp:raw_goods_global_trade_actual_value = cost_temp }
					# 				subtract_from_variable = { raw_goods_global_trade_actual_value = cost_temp }
					# 				add_to_variable = { global.raw_goods_global_trade_actual_value = cost_temp }
					# 				add_to_variable = { country_temp:raw_goods_global_trade_value = cost_temp }

					# 				multiply_temp_variable = { buy_amount = 100 }
					# 				divide_temp_variable = { buy_amount = shipping_cost }
					# 				divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

					# 				#Tariffs/Subsidies
					# 				set_temp_variable = { export_cost_temp = 100 }
					# 				add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
					# 				subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
					# 				multiply_temp_variable = { export_cost_temp = cost_temp }
					# 				divide_temp_variable = { export_cost_temp = 100 }
					# 				set_temp_variable = { export_value_temp = export_cost_temp }
					# 				subtract_from_temp_variable = { export_value_temp = cost_temp }

					# 				set_temp_variable = { import_cost_temp = 100 }
					# 				add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
					# 				subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
					# 				multiply_temp_variable = { import_cost_temp = cost_temp }
					# 				divide_temp_variable = { import_cost_temp = 100 }
					# 				set_temp_variable = { import_value_temp = import_cost_temp }
					# 				subtract_from_temp_variable = { import_value_temp = cost_temp }

					# 				add_to_temp_variable = { cost_temp = export_value_temp }
					# 				add_to_temp_variable = { cost_temp = import_value_temp }
					# 				add_to_variable = { country_temp:treasury = export_value_temp }
					# 				add_to_variable = { treasury = import_value_temp }
					# 				if = {
					# 					limit = {
					# 						check_variable = { export_value_temp > 0 }
					# 					}
					# 					add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
					# 				}
					# 				else = {
					# 					subtract_from_variable = { country_temp:actual_trade_subsidy_spending = export_value_temp }
					# 				}
					# 				if = {
					# 					limit = {
					# 						check_variable = { import_value_temp > 0 }
					# 					}
					# 					add_to_variable = { actual_tariff_revenue = import_value_temp }
					# 				}
					# 				else = {
					# 					subtract_from_variable = { actual_trade_subsidy_spending = import_value_temp }
					# 				}

					# 				add_to_variable = { raw_goods_supply = buy_amount }
					# 				add_to_variable = { raw_goods_global_trade_amount = buy_amount }
					# 				add_to_variable = { global.raw_goods_global_trade_amount = buy_amount }
					# 				subtract_from_temp_variable = { buy_amount_left = buy_amount }
					# 				subtract_from_temp_variable = { spending_left = cost_temp }
					# 				subtract_from_variable = { raw_goods_global_trade_value = cost_temp }
					# 				add_to_variable = { global.raw_goods_global_trade_value = cost_temp }
									
					# 			}
					# 		}
					# 	}
					# 	else_if = {
					# 		limit = {
					# 			OR = {
					# 				NOT = { check_variable = { buy_amount_left > 0 } }
					# 				NOT = { check_variable = { spending_left > 0 } }
					# 				NOT = {  check_variable = { country_temp:raw_goods_price < raw_goods_price } }
					# 			}
					# 		}
					# 		set_temp_variable = { cheapest_brk = 1 }
					# 	}
					# }
                # #industrial_goods
					# set_temp_variable = { buy_amount_left = industrial_goods_demand }
					# set_temp_variable = { spending_left = industrial_goods_demand }
					# multiply_temp_variable = { spending_left = industrial_goods_price }
					# #Loops thru cheapest countries to buy from
					# for_each_loop = {
					# 	array = global.industrial_goods_global_trade_country_array
					# 	value = country_temp
					# 	index = iii
					# 	break = cheapest_brk

					# 	#Checks if the country's goods are cheaper & shipping is affordabole 
					# 	#TODO - Shipping cost
					# 	if = {
					# 		limit = {
					# 			check_variable = { country_temp:industrial_goods_price < industrial_goods_price }
					# 			check_variable = { spending_left > 0 }
					# 			check_variable = { buy_amount_left > 0 }
					# 			check_variable = { country_temp:industrial_goods_supply_min < country_temp:industrial_goods_supply }
								
					# 		}

					# 		#Shipping Cost
					# 		set_temp_variable = { exporter_capital = country_temp:capital }
					# 		var:exporter_capital = {
					# 			set_variable = { PREV.shipping_cost = distance_to@PREV.capital } #This needs to be a normal variable
					# 		}
					# 		divide_variable = { shipping_cost = global.base_shipping_cost_divisor }
					# 		set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
					# 		add_to_temp_variable = { modifier_temp = 1 }
					# 		multiply_variable = { shipping_cost = modifier_temp }
					# 		add_to_variable = { shipping_cost = 1 }

					# 		#Tariffs/Subsidies
					# 		set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					# 		add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
					# 		subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					# 		subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
					# 		add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					# 		if = {
					# 			limit = {
					# 				check_variable = { net_tariff_percentage_temp < 10 }
					# 			}
					# 			set_temp_variable = { net_tariff_percentage_temp = 10 }
					# 		}

					# 		set_temp_variable = { true_price = country_temp:industrial_goods_price }
					# 		multiply_temp_variable = { true_price = shipping_cost }
					# 		multiply_temp_variable = { true_price = net_tariff_percentage_temp }
					# 		divide_temp_variable = { true_price = 100 }
					# 		if = {
					# 			limit = {
					# 				check_variable = { true_price < industrial_goods_price }
					# 			}
					# 			#Do Trade
					# 			set_temp_variable = { u = true_price }
					# 			multiply_temp_variable = { u = country_temp:industrial_goods_demand }
					# 			divide_temp_variable = { u = industrial_goods_price }
					# 			divide_temp_variable = { u = industrial_goods_demand }
								
					# 			set_temp_variable = { buy_amount = industrial_goods_supply }
					# 			multiply_temp_variable = { buy_amount = u }
					# 			multiply_temp_variable = { buy_amount = -1 }
					# 			add_to_temp_variable = { buy_amount = country_temp:industrial_goods_supply }
					# 			add_to_temp_variable = { u = 1 }
					# 			divide_temp_variable = { buy_amount = u }
								
					# 			multiply_temp_variable = { buy_amount = 0.7 }

					# 			multiply_temp_variable = { buy_amount = shipping_cost }
					# 			multiply_temp_variable = { buy_amount = net_tariff_percentage_temp }
					# 			divide_temp_variable = { buy_amount = 100 }

					# 			set_temp_variable = { good_max_temp = country_temp:industrial_goods_supply }
					# 			subtract_from_temp_variable = { good_max_temp = country_temp:industrial_goods_supply_min }
								
					# 			clamp_temp_variable = {
					# 				var = buy_amount
					# 				max = good_max_temp
					# 			}
					# 			clamp_temp_variable = {
					# 				var = buy_amount
					# 				min = 0
					# 			}
					# 			set_temp_variable = { cost_temp = buy_amount }
					# 			multiply_temp_variable = { cost_temp = country_temp:industrial_goods_price }

					# 			if = {
					# 				limit = {
					# 					check_variable = { cost_temp > spending_left }
					# 				}
					# 				set_temp_variable = { cost_temp = spending_left }
					# 				set_temp_variable = { buy_amount = cost_temp }
					# 				divide_temp_variable = { buy_amount = state_temp:industrial_goods_price }
					# 			}
					# 			if = {
					# 				limit = {
					# 					check_variable = { buy_amount > 0 }
					# 				}
											
					# 				subtract_from_variable = { country_temp:industrial_goods_supply = buy_amount }
					# 				subtract_from_variable = { country_temp:industrial_goods_global_trade_amount = buy_amount }
					# 				add_to_variable = { country_temp:industrial_goods_global_trade_actual_value = cost_temp }
					# 				subtract_from_variable = { industrial_goods_global_trade_actual_value = cost_temp }
					# 				add_to_variable = { global.industrial_goods_global_trade_actual_value = cost_temp }
					# 				add_to_variable = { country_temp:industrial_goods_global_trade_value = cost_temp }

					# 				multiply_temp_variable = { buy_amount = 100 }
					# 				divide_temp_variable = { buy_amount = shipping_cost }
					# 				divide_temp_variable = { buy_amount = net_tariff_percentage_temp }

					# 				#Tariffs/Subsidies
					# 				set_temp_variable = { export_cost_temp = 100 }
					# 				add_to_temp_variable = { export_cost_temp = country_temp:export_tariff_percentage }
					# 				subtract_from_temp_variable = { export_cost_temp = country_temp:export_subsidy_percentage }
					# 				multiply_temp_variable = { export_cost_temp = cost_temp }
					# 				divide_temp_variable = { export_cost_temp = 100 }
					# 				set_temp_variable = { export_value_temp = export_cost_temp }
					# 				subtract_from_temp_variable = { export_value_temp = cost_temp }

					# 				set_temp_variable = { import_cost_temp = 100 }
					# 				add_to_temp_variable = { import_cost_temp = import_tariff_percentage }
					# 				subtract_from_temp_variable = { import_cost_temp = import_subsidy_percentage }
					# 				multiply_temp_variable = { import_cost_temp = cost_temp }
					# 				divide_temp_variable = { import_cost_temp = 100 }
					# 				set_temp_variable = { import_value_temp = import_cost_temp }
					# 				subtract_from_temp_variable = { import_value_temp = cost_temp }

					# 				add_to_temp_variable = { cost_temp = export_value_temp }
					# 				add_to_temp_variable = { cost_temp = import_value_temp }
					# 				add_to_variable = { country_temp:treasury = export_value_temp }
					# 				add_to_variable = { treasury = import_value_temp }
					# 				if = {
					# 					limit = {
					# 						check_variable = { export_value_temp > 0 }
					# 					}
					# 					add_to_variable = { country_temp:actual_tariff_revenue = export_value_temp }
					# 				}
					# 				else = {
					# 					subtract_from_variable = { country_temp:actual_trade_subsidy_spending = export_value_temp }
					# 				}
					# 				if = {
					# 					limit = {
					# 						check_variable = { import_value_temp > 0 }
					# 					}
					# 					add_to_variable = { actual_tariff_revenue = import_value_temp }
					# 				}
					# 				else = {
					# 					subtract_from_variable = { actual_trade_subsidy_spending = import_value_temp }
					# 				}

					# 				add_to_variable = { industrial_goods_supply = buy_amount }
					# 				add_to_variable = { industrial_goods_global_trade_amount = buy_amount }
					# 				add_to_variable = { global.industrial_goods_global_trade_amount = buy_amount }
					# 				subtract_from_temp_variable = { buy_amount_left = buy_amount }
					# 				subtract_from_temp_variable = { spending_left = cost_temp }
					# 				subtract_from_variable = { industrial_goods_global_trade_value = cost_temp }
					# 				add_to_variable = { global.industrial_goods_global_trade_value = cost_temp }
									
					# 			}
					# 		}
					# 	}
					# 	else_if = {
					# 		limit = {
					# 			OR = {
					# 				NOT = { check_variable = { buy_amount_left > 0 } }
					# 				NOT = { check_variable = { spending_left > 0 } }
					# 				NOT = {  check_variable = { country_temp:industrial_goods_price < industrial_goods_price } }
					# 			}
					# 		}
					# 		set_temp_variable = { cheapest_brk = 1 }
					# 	}
					# }
			#
		}
		for_each_scope_loop = {
			array = global.econ_order_array

			#Resolve International Trade
				#life_goods
					#Importing
					if = {
						limit = {
							check_variable = { life_goods_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = life_goods_global_trade_amount }
						set_variable = { cost_amount_left = life_goods_global_trade_value }
						set_variable = { trade_amount_wog = life_goods_global_trade_amount }
						set_variable = { cost_amount_wog = life_goods_global_trade_value }

						set_variable = { life_goods_demand_wog = life_goods_demand }
						subtract_from_variable = { life_goods_demand_wog = life_goods_government_demand }

						#Government gets goods first
							if = {
								limit = {
									check_variable = { life_goods_government_stockpile < life_goods_government_demand }
								}
								set_temp_variable = { amount_temp = life_goods_government_demand }
								subtract_from_temp_variable = { amount_temp = life_goods_government_stockpile }

								if = {
									limit = {
										check_variable = { amount_temp < trade_amount_left }
									}
									set_variable = { tal = 2 }
									set_temp_variable = { goods_percent_temp = amount_temp }
									multiply_temp_variable = { goods_percent_temp = 100 }
									divide_temp_variable = { goods_percent_temp = trade_amount_left }

									subtract_from_variable = { trade_amount_left = amount_temp }
									set_temp_variable = { cost_temp = goods_percent_temp }
									multiply_temp_variable = { cost_temp = cost_amount_left }
									divide_temp_variable = { cost_temp = 100 }
									subtract_from_variable = { cost_amount_left = cost_temp }
									
									add_to_variable = { life_goods_government_stockpile = amount_temp }
									add_to_variable = { treasury = cost_temp }
									subtract_from_variable = { actual_life_goods_spending = cost_temp }
									subtract_from_variable = { trade_amount_wog = amount_temp }
									subtract_from_variable = { cost_amount_wog = cost_temp }
									subtract_from_variable = { trade_amount_left = amount_temp }
									subtract_from_variable = { cost_amount_left = cost_temp }
								}
								else = {
									add_to_variable = { life_goods_government_stockpile = trade_amount_left }
									add_to_variable = { treasury = cost_amount_left }
									subtract_from_variable = { actual_life_goods_spending = cost_amount_left }
									set_variable = { trade_amount_left = 0 }
									set_variable = { cost_amount_left = 0 }
									set_variable = { trade_amount_wog = 0 }
									set_variable = { cost_amount_wog = 0 }
								}
							}
						#

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = life_goods_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:life_goods_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = life_goods_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.life_goods_demand_wog }

									set_temp_variable = { trade_amount_temp = PREV.trade_amount_wog }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.cost_amount_wog }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { life_goods_trade_amount = trade_amount_temp }
									add_to_variable = { life_goods_trade_value = trade_value_temp }
									add_to_variable = { life_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { life_goods_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = life_goods_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = life_goods_global_trade_value }
						set_variable = { original_life_goods_supply = life_goods_supply }
						subtract_from_variable = { original_life_goods_supply = life_goods_global_trade_amount }
						subtract_from_variable = { original_life_goods_supply = life_goods_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = life_goods_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = life_goods_supply }
									subtract_from_temp_variable = { trade_percentage_temp = life_goods_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_life_goods_supply }

									set_temp_variable = { trade_amount_temp = PREV.life_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { life_goods_trade_amount = trade_amount_temp }
									add_to_variable = { life_goods_trade_value = trade_value_temp }
									add_to_variable = { life_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				#everyday_goods
					#Importing
					if = {
						limit = {
							check_variable = { everyday_goods_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = everyday_goods_global_trade_amount }
						set_variable = { cost_amount_left = everyday_goods_global_trade_value }
						set_variable = { trade_amount_wog = everyday_goods_global_trade_amount }
						set_variable = { cost_amount_wog = everyday_goods_global_trade_value }

						set_variable = { everyday_goods_demand_wog = everyday_goods_demand }
						subtract_from_variable = { everyday_goods_demand_wog = everyday_goods_government_demand }

						#Government gets goods first
							if = {
								limit = {
									check_variable = { everyday_goods_government_stockpile < everyday_goods_government_demand }
								}
								set_temp_variable = { amount_temp = everyday_goods_government_demand }
								subtract_from_temp_variable = { amount_temp = everyday_goods_government_stockpile }

								if = {
									limit = {
										check_variable = { amount_temp < trade_amount_left }
									}
									set_temp_variable = { goods_percent_temp = amount_temp }
									multiply_temp_variable = { goods_percent_temp = 100 }
									divide_temp_variable = { goods_percent_temp = trade_amount_left }

									subtract_from_variable = { trade_amount_left = amount_temp }
									set_temp_variable = { cost_temp = goods_percent_temp }
									multiply_temp_variable = { cost_temp = cost_amount_left }
									divide_temp_variable = { cost_temp = 100 }
									subtract_from_variable = { cost_amount_left = cost_temp }
									
									add_to_variable = { everyday_goods_government_stockpile = amount_temp }
									add_to_variable = { treasury = cost_temp }
									subtract_from_variable = { actual_everyday_goods_spending = cost_temp }
									subtract_from_variable = { trade_amount_wog = amount_temp }
									subtract_from_variable = { cost_amount_wog = cost_temp }
									subtract_from_variable = { trade_amount_left = amount_temp }
									subtract_from_variable = { cost_amount_left = cost_temp }
								}
								else = {
									add_to_variable = { everyday_goods_government_stockpile = trade_amount_left }
									add_to_variable = { treasury = cost_amount_left }
									subtract_from_variable = { actual_everyday_goods_spending = cost_amount_left }
									set_variable = { trade_amount_left = 0 }
									set_variable = { cost_amount_left = 0 }
									set_variable = { trade_amount_wog = 0 }
									set_variable = { cost_amount_wog = 0 }
								}
							}
						#

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = everyday_goods_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:everyday_goods_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = everyday_goods_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.everyday_goods_demand_wog }

									set_temp_variable = { trade_amount_temp = PREV.trade_amount_wog }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.cost_amount_wog }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { everyday_goods_trade_amount = trade_amount_temp }
									add_to_variable = { everyday_goods_trade_value = trade_value_temp }
									add_to_variable = { everyday_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { everyday_goods_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = everyday_goods_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = everyday_goods_global_trade_value }
						set_variable = { original_everyday_goods_supply = everyday_goods_supply }
						subtract_from_variable = { original_everyday_goods_supply = everyday_goods_global_trade_amount }
						subtract_from_variable = { original_everyday_goods_supply = everyday_goods_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = everyday_goods_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = everyday_goods_supply }
									subtract_from_temp_variable = { trade_percentage_temp = everyday_goods_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_everyday_goods_supply }

									set_temp_variable = { trade_amount_temp = PREV.everyday_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { everyday_goods_trade_amount = trade_amount_temp }
									add_to_variable = { everyday_goods_trade_value = trade_value_temp }
									add_to_variable = { everyday_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				#luxury_goods
					#Importing
					if = {
						limit = {
							check_variable = { luxury_goods_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = luxury_goods_global_trade_amount }
						set_variable = { cost_amount_left = luxury_goods_global_trade_value }
						set_variable = { trade_amount_wog = luxury_goods_global_trade_amount }
						set_variable = { cost_amount_wog = luxury_goods_global_trade_value }

						set_variable = { luxury_goods_demand_wog = luxury_goods_demand }
						subtract_from_variable = { luxury_goods_demand_wog = luxury_goods_government_demand }

						#Government gets goods first
							if = {
								limit = {
									check_variable = { luxury_goods_government_stockpile < luxury_goods_government_demand }
								}
								set_temp_variable = { amount_temp = luxury_goods_government_demand }
								subtract_from_temp_variable = { amount_temp = luxury_goods_government_stockpile }

								if = {
									limit = {
										check_variable = { amount_temp < trade_amount_left }
									}
									set_temp_variable = { goods_percent_temp = amount_temp }
									multiply_temp_variable = { goods_percent_temp = 100 }
									divide_temp_variable = { goods_percent_temp = trade_amount_left }

									subtract_from_variable = { trade_amount_left = amount_temp }
									set_temp_variable = { cost_temp = goods_percent_temp }
									multiply_temp_variable = { cost_temp = cost_amount_left }
									divide_temp_variable = { cost_temp = 100 }
									subtract_from_variable = { cost_amount_left = cost_temp }
									
									add_to_variable = { luxury_goods_government_stockpile = amount_temp }
									add_to_variable = { treasury = cost_temp }
									subtract_from_variable = { actual_luxury_goods_spending = cost_temp }
									subtract_from_variable = { trade_amount_wog = amount_temp }
									subtract_from_variable = { cost_amount_wog = cost_temp }
									subtract_from_variable = { trade_amount_left = amount_temp }
									subtract_from_variable = { cost_amount_left = cost_temp }
								}
								else = {
									add_to_variable = { luxury_goods_government_stockpile = trade_amount_left }
									add_to_variable = { treasury = cost_amount_left }
									subtract_from_variable = { actual_luxury_goods_spending = cost_amount_left }
									set_variable = { trade_amount_left = 0 }
									set_variable = { cost_amount_left = 0 }
									set_variable = { trade_amount_wog = 0 }
									set_variable = { cost_amount_wog = 0 }
								}
							}
						#

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = luxury_goods_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:luxury_goods_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = luxury_goods_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.luxury_goods_demand_wog }

									set_temp_variable = { trade_amount_temp = PREV.trade_amount_wog }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.cost_amount_wog }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { luxury_goods_trade_amount = trade_amount_temp }
									add_to_variable = { luxury_goods_trade_value = trade_value_temp }
									add_to_variable = { luxury_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { luxury_goods_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = luxury_goods_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = luxury_goods_global_trade_value }
						set_variable = { original_luxury_goods_supply = luxury_goods_supply }
						subtract_from_variable = { original_luxury_goods_supply = luxury_goods_global_trade_amount }
						subtract_from_variable = { original_luxury_goods_supply = luxury_goods_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = luxury_goods_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = luxury_goods_supply }
									subtract_from_temp_variable = { trade_percentage_temp = luxury_goods_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_luxury_goods_supply }

									set_temp_variable = { trade_amount_temp = PREV.luxury_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { luxury_goods_trade_amount = trade_amount_temp }
									add_to_variable = { luxury_goods_trade_value = trade_value_temp }
									add_to_variable = { luxury_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				#services
					#Importing
					if = {
						limit = {
							check_variable = { services_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = services_global_trade_amount }
						set_variable = { cost_amount_left = services_global_trade_value }
						set_variable = { trade_amount_wog = services_global_trade_amount }
						set_variable = { cost_amount_wog = services_global_trade_value }

						set_variable = { services_demand_wog = services_demand }
						subtract_from_variable = { services_demand_wog = services_government_demand }

						#Government gets goods first
							if = {
								limit = {
									check_variable = { services_government_stockpile < services_government_demand }
								}
								set_temp_variable = { amount_temp = services_government_demand }
								subtract_from_temp_variable = { amount_temp = services_government_stockpile }

								if = {
									limit = {
										check_variable = { amount_temp < trade_amount_left }
									}
									set_temp_variable = { goods_percent_temp = amount_temp }
									multiply_temp_variable = { goods_percent_temp = 100 }
									divide_temp_variable = { goods_percent_temp = trade_amount_left }

									subtract_from_variable = { trade_amount_left = amount_temp }
									set_temp_variable = { cost_temp = goods_percent_temp }
									multiply_temp_variable = { cost_temp = cost_amount_left }
									divide_temp_variable = { cost_temp = 100 }
									subtract_from_variable = { cost_amount_left = cost_temp }
									
									add_to_variable = { services_government_stockpile = amount_temp }
									add_to_variable = { treasury = cost_temp }
									subtract_from_variable = { actual_services_spending = cost_temp }
									subtract_from_variable = { trade_amount_wog = amount_temp }
									subtract_from_variable = { cost_amount_wog = cost_temp }
									subtract_from_variable = { trade_amount_left = amount_temp }
									subtract_from_variable = { cost_amount_left = cost_temp }
								}
								else = {
									add_to_variable = { services_government_stockpile = trade_amount_left }
									add_to_variable = { treasury = cost_amount_left }
									subtract_from_variable = { actual_services_spending = cost_amount_left }
									set_variable = { trade_amount_left = 0 }
									set_variable = { cost_amount_left = 0 }
									set_variable = { trade_amount_wog = 0 }
									set_variable = { cost_amount_wog = 0 }
								}
							}
						#

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = services_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:services_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = services_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.services_demand_wog }

									set_temp_variable = { trade_amount_temp = PREV.trade_amount_wog }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.cost_amount_wog }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { services_trade_amount = trade_amount_temp }
									add_to_variable = { services_trade_value = trade_value_temp }
									add_to_variable = { services_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { services_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = services_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = services_global_trade_value }
						set_variable = { original_services_supply = services_supply }
						subtract_from_variable = { original_services_supply = services_global_trade_amount }
						subtract_from_variable = { original_services_supply = services_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = services_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = services_supply }
									subtract_from_temp_variable = { trade_percentage_temp = services_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_services_supply }

									set_temp_variable = { trade_amount_temp = PREV.services_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { services_trade_amount = trade_amount_temp }
									add_to_variable = { services_trade_value = trade_value_temp }
									add_to_variable = { services_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				#raw_goods
					#Importing
					if = {
						limit = {
							check_variable = { raw_goods_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = raw_goods_global_trade_amount }
						set_variable = { cost_amount_left = raw_goods_global_trade_value }
						set_variable = { trade_amount_wog = raw_goods_global_trade_amount }
						set_variable = { cost_amount_wog = raw_goods_global_trade_value }

						set_variable = { raw_goods_demand_wog = raw_goods_demand }
						subtract_from_variable = { raw_goods_demand_wog = raw_goods_government_demand }

						#Government gets goods first
							if = {
								limit = {
									check_variable = { raw_goods_government_stockpile < raw_goods_government_demand }
								}
								set_temp_variable = { amount_temp = raw_goods_government_demand }
								subtract_from_temp_variable = { amount_temp = raw_goods_government_stockpile }

								if = {
									limit = {
										check_variable = { amount_temp < trade_amount_left }
									}
									set_temp_variable = { goods_percent_temp = amount_temp }
									multiply_temp_variable = { goods_percent_temp = 100 }
									divide_temp_variable = { goods_percent_temp = trade_amount_left }

									subtract_from_variable = { trade_amount_left = amount_temp }
									set_temp_variable = { cost_temp = goods_percent_temp }
									multiply_temp_variable = { cost_temp = cost_amount_left }
									divide_temp_variable = { cost_temp = 100 }
									subtract_from_variable = { cost_amount_left = cost_temp }
									
									add_to_variable = { raw_goods_government_stockpile = amount_temp }
									add_to_variable = { treasury = cost_temp }
									subtract_from_variable = { actual_raw_goods_spending = cost_temp }
									subtract_from_variable = { trade_amount_wog = amount_temp }
									subtract_from_variable = { cost_amount_wog = cost_temp }
									subtract_from_variable = { trade_amount_left = amount_temp }
									subtract_from_variable = { cost_amount_left = cost_temp }
								}
								else = {
									add_to_variable = { raw_goods_government_stockpile = trade_amount_left }
									add_to_variable = { treasury = cost_amount_left }
									subtract_from_variable = { actual_raw_goods_spending = cost_amount_left }
									set_variable = { trade_amount_left = 0 }
									set_variable = { cost_amount_left = 0 }
									set_variable = { trade_amount_wog = 0 }
									set_variable = { cost_amount_wog = 0 }
								}
							}
						#

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = raw_goods_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:raw_goods_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = raw_goods_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.raw_goods_demand_wog }

									set_temp_variable = { trade_amount_temp = PREV.trade_amount_wog }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.cost_amount_wog }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { raw_goods_trade_amount = trade_amount_temp }
									add_to_variable = { raw_goods_trade_value = trade_value_temp }
									add_to_variable = { raw_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { raw_goods_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = raw_goods_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = raw_goods_global_trade_value }
						set_variable = { original_raw_goods_supply = raw_goods_supply }
						subtract_from_variable = { original_raw_goods_supply = raw_goods_global_trade_amount }
						subtract_from_variable = { original_raw_goods_supply = raw_goods_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = raw_goods_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = raw_goods_supply }
									subtract_from_temp_variable = { trade_percentage_temp = raw_goods_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_raw_goods_supply }

									set_temp_variable = { trade_amount_temp = PREV.raw_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { raw_goods_trade_amount = trade_amount_temp }
									add_to_variable = { raw_goods_trade_value = trade_value_temp }
									add_to_variable = { raw_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				#industrial_goods
					#Importing
					if = {
						limit = {
							check_variable = { industrial_goods_global_trade_amount > 0 }            
						}
						set_variable = { trade_amount_left = industrial_goods_global_trade_amount }
						set_variable = { cost_amount_left = industrial_goods_global_trade_value }
						set_variable = { trade_amount_wog = industrial_goods_global_trade_amount }
						set_variable = { cost_amount_wog = industrial_goods_global_trade_value }

						set_variable = { industrial_goods_demand_wog = industrial_goods_demand }
						subtract_from_variable = { industrial_goods_demand_wog = industrial_goods_government_demand }

						#Government gets goods first
							if = {
								limit = {
									check_variable = { industrial_goods_government_stockpile < industrial_goods_government_demand }
								}
								set_temp_variable = { amount_temp = industrial_goods_government_demand }
								subtract_from_temp_variable = { amount_temp = industrial_goods_government_stockpile }

								if = {
									limit = {
										check_variable = { amount_temp < trade_amount_left }
									}
									set_temp_variable = { goods_percent_temp = amount_temp }
									multiply_temp_variable = { goods_percent_temp = 100 }
									divide_temp_variable = { goods_percent_temp = trade_amount_left }

									subtract_from_variable = { trade_amount_left = amount_temp }
									set_temp_variable = { cost_temp = goods_percent_temp }
									multiply_temp_variable = { cost_temp = cost_amount_left }
									divide_temp_variable = { cost_temp = 100 }
									subtract_from_variable = { cost_amount_left = cost_temp }
									
									add_to_variable = { industrial_goods_government_stockpile = amount_temp }
									add_to_variable = { treasury = cost_temp }
									subtract_from_variable = { actual_industrial_goods_spending = cost_temp }
									subtract_from_variable = { trade_amount_wog = amount_temp }
									subtract_from_variable = { cost_amount_wog = cost_temp }
									subtract_from_variable = { trade_amount_left = amount_temp }
									subtract_from_variable = { cost_amount_left = cost_temp }
								}
								else = {
									add_to_variable = { industrial_goods_government_stockpile = trade_amount_left }
									add_to_variable = { treasury = cost_amount_left }
									subtract_from_variable = { actual_industrial_goods_spending = cost_amount_left }
									set_variable = { trade_amount_left = 0 }
									set_variable = { cost_amount_left = 0 }
									set_variable = { trade_amount_wog = 0 }
									set_variable = { cost_amount_wog = 0 }
								}
							}
						#

						#Loop thru most expensive states to resolve
						set_temp_variable = { start_temp = industrial_goods_trade_state_array^num }
						subtract_from_temp_variable = { start_temp = 1 }
						for_loop_effect = {
							start = start_temp
							end = 0
							compare = greater_than_or_equals
							add = -1
							value = ii


							if = {
								limit = {
									check_variable = { trade_amount_left > 0 }
								}
								#Scopes to state
								var:industrial_goods_trade_state_array^ii = {
									set_temp_variable = { trade_percentage_temp = industrial_goods_demand }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.industrial_goods_demand_wog }

									set_temp_variable = { trade_amount_temp = PREV.trade_amount_wog }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											check_variable = { trade_amount_temp > PREV.trade_amount_left }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
									}

									set_temp_variable = { after_goods_temp = PREV.trade_amount_left }
									subtract_from_temp_variable = { after_goods_temp = trade_amount_temp }
									if = {
										limit = {
											check_variable = { after_goods_temp < 0.003 }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { trade_value_temp = PREV.cost_amount_wog }
										multiply_temp_variable = { trade_value_temp = trade_percentage_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp < PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { industrial_goods_trade_amount = trade_amount_temp }
									add_to_variable = { industrial_goods_trade_value = trade_value_temp }
									add_to_variable = { industrial_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}

						}
					}
					#Exporting
					else_if = {
						limit = {
							check_variable = { industrial_goods_global_trade_amount < 0 }            
						}
						set_variable = { trade_amount_left = industrial_goods_global_trade_amount } #Note, this is negative
						set_variable = { cost_amount_left = industrial_goods_global_trade_value }
						set_variable = { original_industrial_goods_supply = industrial_goods_supply }
						subtract_from_variable = { original_industrial_goods_supply = industrial_goods_global_trade_amount }
						subtract_from_variable = { original_industrial_goods_supply = industrial_goods_supply_min }

						#Loops thru cheapest states to resolve
						for_each_loop = {
							array = industrial_goods_trade_state_array
							value = state_temp
							index = iii
							break = cheapest_brk


							if = {
								limit = {
									check_variable = { trade_amount_left < 0 }
								}
								var:state_temp = {
									set_temp_variable = { trade_percentage_temp = industrial_goods_supply }
									subtract_from_temp_variable = { trade_percentage_temp = industrial_goods_supply_min }
									multiply_temp_variable = { trade_percentage_temp = 100 }
									divide_temp_variable = { trade_percentage_temp = PREV.original_industrial_goods_supply }

									set_temp_variable = { trade_amount_temp = PREV.industrial_goods_global_trade_amount }
									multiply_temp_variable = { trade_amount_temp = trade_percentage_temp }
									divide_temp_variable = { trade_amount_temp = 100 }
									if = {
										limit = {
											NOT = { check_variable = { trade_amount_temp > PREV.trade_amount_left } }
										}
										set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
									}
									else = {
										set_temp_variable = { price_temp = PREV.cost_amount_left }
										multiply_temp_variable = { price_temp = 100 }
										divide_temp_variable = { price_temp = PREV.trade_amount_left }

										set_temp_variable = { trade_value_temp = trade_amount_temp }
										multiply_temp_variable = { trade_value_temp = price_temp }
										divide_temp_variable = { trade_value_temp = 100 }
										if = {
											limit = {
												check_variable = { trade_value_temp > PREV.cost_amount_left }
											}
											set_temp_variable = { trade_value_temp = PREV.cost_amount_left }
											set_temp_variable = { trade_amount_temp = PREV.trade_amount_left }
										}
									}
									
									#RESOLVE
									subtract_from_variable = { PREV.trade_amount_left = trade_amount_temp }
									subtract_from_variable = { PREV.cost_amount_left = trade_value_temp }
									add_to_variable = { industrial_goods_trade_amount = trade_amount_temp }
									add_to_variable = { industrial_goods_trade_value = trade_value_temp }
									add_to_variable = { industrial_goods_supply = trade_amount_temp }
								}
							}
							else = {
								set_temp_variable = { cheapest_brk = 1 }
							}
						}
					}
				#
				clear_variable = trade_amount_left
				clear_variable = cost_amount_left
			#

			#Resolve All Trade
				every_controlled_state = {
					#life_goods
						#Importing
						if = {
							limit = {
								check_variable = { life_goods_trade_amount > 0 }
							}
							subtract_from_variable = { life_goods_bought_value = life_goods_trade_value }
							add_to_variable = { life_goods_bought_amount = life_goods_trade_amount }
						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { life_goods_trade_amount < 0 }
							}
							add_to_variable = { life_goods_sold_value = life_goods_trade_value }
							subtract_from_variable = { life_goods_sold_amount = life_goods_trade_amount }
							add_to_variable = { life_goods_left = life_goods_trade_amount }
						}

					#everyday_goods
						#Importing
						if = {
							limit = {
								check_variable = { everyday_goods_trade_amount > 0 }
							}
							subtract_from_variable = { everyday_goods_bought_value = everyday_goods_trade_value }
							add_to_variable = { everyday_goods_bought_amount = everyday_goods_trade_amount }
						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { everyday_goods_trade_amount < 0 }
							}
							add_to_variable = { everyday_goods_sold_value = everyday_goods_trade_value }
							subtract_from_variable = { everyday_goods_sold_amount = everyday_goods_trade_amount }
							add_to_variable = { everyday_goods_left = everyday_goods_trade_amount }

						}
					#luxury_goods
						#Importing
						if = {
							limit = {
								check_variable = { luxury_goods_trade_amount > 0 }
							}
							subtract_from_variable = { luxury_goods_bought_value = luxury_goods_trade_value }
							add_to_variable = { luxury_goods_bought_amount = luxury_goods_trade_amount }
						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { luxury_goods_trade_amount < 0 }
							}
							add_to_variable = { luxury_goods_sold_value = luxury_goods_trade_value }
							subtract_from_variable = { luxury_goods_sold_amount = luxury_goods_trade_amount }
							add_to_variable = { luxury_goods_left = luxury_goods_trade_amount }

						}
					#services
						#Importing
						if = {
							limit = {
								check_variable = { services_trade_amount > 0 }
							}
							subtract_from_variable = { services_bought_value = services_trade_value }
							add_to_variable = { services_bought_amount = services_trade_amount }
						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { services_trade_amount < 0 }
							}
							add_to_variable = { services_sold_value = services_trade_value }
							subtract_from_variable = { services_sold_amount = services_trade_amount }
							add_to_variable = { services_left = services_trade_amount }

						}
					#raw_goods
						#Importing
						if = {
							limit = {
								check_variable = { raw_goods_trade_amount > 0 }
							}
							subtract_from_variable = { raw_goods_bought_value = raw_goods_trade_value }
							add_to_variable = { raw_goods_bought_amount = raw_goods_trade_amount }
						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { raw_goods_trade_amount < 0 }
							}
							add_to_variable = { raw_goods_sold_value = raw_goods_trade_value }
							subtract_from_variable = { raw_goods_sold_amount = raw_goods_trade_amount }
							add_to_variable = { raw_goods_left = raw_goods_trade_amount }

						}
					#industrial_goods
						#Importing
						if = {
							limit = {
								check_variable = { industrial_goods_trade_amount > 0 }
							}
							subtract_from_variable = { industrial_goods_bought_value = industrial_goods_trade_value }
							add_to_variable = { industrial_goods_bought_amount = industrial_goods_trade_amount }
						}
						#Exporting
						else_if = {
							limit = {
								check_variable = { industrial_goods_trade_amount < 0 }
							}
							add_to_variable = { industrial_goods_sold_value = industrial_goods_trade_value }
							subtract_from_variable = { industrial_goods_sold_amount = industrial_goods_trade_amount }
							add_to_variable = { industrial_goods_left = industrial_goods_trade_amount }

						}
				}
			#

			#Govt Buying Needed Goods
				
				#Vars Needed
				set_variable = { life_goods_government_demand_left = life_goods_government_demand }
				subtract_from_variable = { life_goods_government_demand_left = life_goods_government_stockpile }
				set_variable = { life_goods_supply_left = life_goods_supply }
				
				set_variable = { everyday_goods_government_demand_left = everyday_goods_government_demand }
				subtract_from_variable = { everyday_goods_government_demand_left = everyday_goods_government_stockpile }
				set_variable = { everyday_goods_supply_left = everyday_goods_supply }
				
				set_variable = { luxury_goods_government_demand_left = luxury_goods_government_demand }
				subtract_from_variable = { luxury_goods_government_demand_left = luxury_goods_government_stockpile }
				set_variable = { luxury_goods_supply_left = luxury_goods_supply }
				
				set_variable = { services_government_demand_left = services_government_demand }
				subtract_from_variable = { services_government_demand_left = services_government_stockpile }
				set_variable = { services_supply_left = services_supply }
				
				set_variable = { raw_goods_government_demand_left = raw_goods_government_demand }
				subtract_from_variable = { raw_goods_government_demand_left = raw_goods_government_stockpile }
				set_variable = { raw_goods_supply_left = raw_goods_supply }
				
				set_variable = { industrial_goods_government_demand_left = industrial_goods_government_demand }
				subtract_from_variable = { industrial_goods_government_demand_left = industrial_goods_government_stockpile }
				set_variable = { industrial_goods_supply_left = industrial_goods_supply }

				for_each_scope_loop = { #life_goods
					array = life_goods_trade_state_array
					break = cheapest_brk

					set_temp_variable = { buy_amount = life_goods_supply }
					multiply_temp_variable = { buy_amount = 100 }
					divide_temp_variable = { buy_amount = PREV.life_goods_supply_left }
					multiply_temp_variable = { buy_amount = PREV.life_goods_government_demand_left }
					divide_temp_variable = { buy_amount = 25 }
					#subtract_from_temp_variable = { buy_amount = life_goods_bought_amount }
					add_to_variable = { life_goods_demand = buy_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = life_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						max = PREV.life_goods_government_demand_left
					}
					if = {
						limit = {
							check_variable = { buy_amount > 0 }
						}
						
						set_temp_variable = { cost_temp = buy_amount }
						multiply_temp_variable = { cost_temp = PREV.life_goods_price }

						#Resolve
						add_to_variable = { PREV.actual_life_goods_spending = cost_temp }
						subtract_from_variable = { PREV.treasury = cost_temp }
						add_to_variable = { PREV.life_goods_government_stockpile = buy_amount }
						subtract_from_variable = { PREV.life_goods_government_demand_left = buy_amount }
						subtract_from_variable = { PREV.life_goods_supply_left = life_goods_supply }
						add_to_variable = { life_goods_sold_value = cost_temp }
						add_to_variable = { life_goods_sold_amount = buy_amount }
						subtract_from_variable = { life_goods_left = buy_amount }
					}
					if = {
						limit = {
							NOT = { check_variable = { PREV.life_goods_government_demand_left > 0 } }
						}
						set_temp_variable = { cheapest_brk = 1 }
					}
				}
				for_each_scope_loop = { #everyday_goods
					array = everyday_goods_trade_state_array
					break = cheapest_brk

					set_temp_variable = { buy_amount = everyday_goods_supply }
					multiply_temp_variable = { buy_amount = 100 }
					divide_temp_variable = { buy_amount = PREV.everyday_goods_supply_left }
					multiply_temp_variable = { buy_amount = PREV.everyday_goods_government_demand_left }
					divide_temp_variable = { buy_amount = 25 }
					#subtract_from_temp_variable = { buy_amount = everyday_goods_bought_amount }
					add_to_variable = { everyday_goods_demand = buy_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = everyday_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						max = PREV.everyday_goods_government_demand_left
					}
					if = {
						limit = {
							check_variable = { buy_amount > 0 }
						}

						set_temp_variable = { cost_temp = buy_amount }
						multiply_temp_variable = { cost_temp = PREV.everyday_goods_price }

						#Resolve
						add_to_variable = { PREV.actual_everyday_goods_spending = cost_temp }
						subtract_from_variable = { PREV.treasury = cost_temp }
						add_to_variable = { PREV.everyday_goods_government_stockpile = buy_amount }
						subtract_from_variable = { PREV.everyday_goods_government_demand_left = buy_amount }
						subtract_from_variable = { PREV.everyday_goods_supply_left = everyday_goods_supply }
						add_to_variable = { everyday_goods_sold_value = cost_temp }
						add_to_variable = { everyday_goods_sold_amount = buy_amount }
						subtract_from_variable = { everyday_goods_left = buy_amount }
					}
					if = {
						limit = {
							NOT = { check_variable = { PREV.everyday_goods_government_demand_left > 0 } }
						}
						set_temp_variable = { cheapest_brk = 1 }
					}
				}
				for_each_scope_loop = { #luxury_goods
					array = luxury_goods_trade_state_array
					break = cheapest_brk

					set_temp_variable = { buy_amount = luxury_goods_supply }
					multiply_temp_variable = { buy_amount = 100 }
					divide_temp_variable = { buy_amount = PREV.luxury_goods_supply_left }
					multiply_temp_variable = { buy_amount = PREV.luxury_goods_government_demand_left }
					divide_temp_variable = { buy_amount = 25 }
					#subtract_from_temp_variable = { buy_amount = luxury_goods_bought_amount }
					add_to_variable = { luxury_goods_demand = buy_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = luxury_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						max = PREV.luxury_goods_government_demand_left
					}
					if = {
						limit = {
							check_variable = { buy_amount > 0 }
						}

						set_temp_variable = { cost_temp = buy_amount }
						multiply_temp_variable = { cost_temp = PREV.luxury_goods_price }

						#Resolve
						add_to_variable = { PREV.actual_luxury_goods_spending = cost_temp }
						subtract_from_variable = { PREV.treasury = cost_temp }
						add_to_variable = { PREV.luxury_goods_government_stockpile = buy_amount }
						subtract_from_variable = { PREV.luxury_goods_government_demand_left = buy_amount }
						subtract_from_variable = { PREV.luxury_goods_supply_left = luxury_goods_supply }
						add_to_variable = { luxury_goods_sold_value = cost_temp }
						add_to_variable = { luxury_goods_sold_amount = buy_amount }
						subtract_from_variable = { luxury_goods_left = buy_amount }
					}
					if = {
						limit = {
							NOT = { check_variable = { PREV.luxury_goods_government_demand_left > 0 } }
						}
						set_temp_variable = { cheapest_brk = 1 }
					}
				}
				for_each_scope_loop = { #services
					array = services_trade_state_array
					break = cheapest_brk

					set_temp_variable = { buy_amount = services_supply }
					multiply_temp_variable = { buy_amount = 100 }
					divide_temp_variable = { buy_amount = PREV.services_supply_left }
					multiply_temp_variable = { buy_amount = PREV.services_government_demand_left }
					divide_temp_variable = { buy_amount = 25 }
					#subtract_from_temp_variable = { buy_amount = services_bought_amount }
					add_to_variable = { services_demand = buy_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = services_left
					}
					clamp_temp_variable = {
						var = buy_amount
						max = PREV.services_government_demand_left
					}
					if = {
						limit = {
							check_variable = { buy_amount > 0 }
						}

						set_temp_variable = { cost_temp = buy_amount }
						multiply_temp_variable = { cost_temp = PREV.services_price }

						#Resolve
						add_to_variable = { PREV.actual_services_spending = cost_temp }
						subtract_from_variable = { PREV.treasury = cost_temp }
						add_to_variable = { PREV.services_government_stockpile = buy_amount }
						subtract_from_variable = { PREV.services_government_demand_left = buy_amount }
						subtract_from_variable = { PREV.services_supply_left = services_supply }
						add_to_variable = { services_sold_value = cost_temp }
						add_to_variable = { services_sold_amount = buy_amount }
						subtract_from_variable = { services_left = buy_amount }
					}
					if = {
						limit = {
							NOT = { check_variable = { PREV.services_government_demand_left > 0 } }
						}
						set_temp_variable = { cheapest_brk = 1 }
					}
				}
				for_each_scope_loop = { #raw_goods
					array = raw_goods_trade_state_array
					break = cheapest_brk

					set_temp_variable = { buy_amount = raw_goods_supply }
					multiply_temp_variable = { buy_amount = 100 }
					divide_temp_variable = { buy_amount = PREV.raw_goods_supply_left }
					multiply_temp_variable = { buy_amount = PREV.raw_goods_government_demand_left }
					divide_temp_variable = { buy_amount = 25 }
					#subtract_from_temp_variable = { buy_amount = raw_goods_bought_amount }
					add_to_variable = { raw_goods_demand = buy_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = raw_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						max = PREV.raw_goods_government_demand_left
					}
					if = {
						limit = {
							check_variable = { buy_amount > 0 }
						}

						set_temp_variable = { cost_temp = buy_amount }
						multiply_temp_variable = { cost_temp = PREV.raw_goods_price }

						#Resolve
						add_to_variable = { PREV.actual_raw_goods_spending = cost_temp }
						subtract_from_variable = { PREV.treasury = cost_temp }
						add_to_variable = { PREV.raw_goods_government_stockpile = buy_amount }
						subtract_from_variable = { PREV.raw_goods_government_demand_left = buy_amount }
						subtract_from_variable = { PREV.raw_goods_supply_left = raw_goods_supply }
						add_to_variable = { raw_goods_sold_value = cost_temp }
						add_to_variable = { raw_goods_sold_amount = buy_amount }
						subtract_from_variable = { raw_goods_left = buy_amount }
					}
					if = {
						limit = {
							NOT = { check_variable = { PREV.raw_goods_government_demand_left > 0 } }
						}
						set_temp_variable = { cheapest_brk = 1 }
					}
				}
				for_each_scope_loop = { #industrial_goods
					array = industrial_goods_trade_state_array
					break = cheapest_brk

					set_temp_variable = { buy_amount = industrial_goods_supply }
					multiply_temp_variable = { buy_amount = 100 }
					divide_temp_variable = { buy_amount = PREV.industrial_goods_supply_left }
					multiply_temp_variable = { buy_amount = PREV.industrial_goods_government_demand_left }
					divide_temp_variable = { buy_amount = 25 }
					#subtract_from_temp_variable = { buy_amount = industrial_goods_bought_amount }
					add_to_variable = { industrial_goods_demand = buy_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = industrial_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						max = PREV.industrial_goods_government_demand_left
					}
					if = {
						limit = {
							check_variable = { buy_amount > 0 }
						}
						
						set_temp_variable = { cost_temp = buy_amount }
						multiply_temp_variable = { cost_temp = PREV.industrial_goods_price }

						#Resolve
						add_to_variable = { PREV.actual_industrial_goods_spending = cost_temp }
						subtract_from_variable = { PREV.treasury = cost_temp }
						add_to_variable = { PREV.industrial_goods_government_stockpile = buy_amount }
						subtract_from_variable = { PREV.industrial_goods_government_demand_left = buy_amount }
						subtract_from_variable = { PREV.industrial_goods_supply_left = industrial_goods_supply }
						add_to_variable = { industrial_goods_sold_value = cost_temp }
						add_to_variable = { industrial_goods_sold_amount = buy_amount }
						subtract_from_variable = { industrial_goods_left = buy_amount }
					}
					if = {
						limit = {
							NOT = { check_variable = { PREV.industrial_goods_government_demand_left > 0 } }
						}
						set_temp_variable = { cheapest_brk = 1 }
					}
				}
			#

			#Price Adjustments
				state_price_adjustment = yes
			#

			every_controlled_state = {
				set_temp_variable = { sales_tax_temp = controller:sales_tax_percentage }
				add_to_temp_variable = { sales_tax_temp = 100 }
				#Life Goods Purchases
					set_temp_variable = { buy_amount = life_goods_demand }
					subtract_from_temp_variable = { buy_amount = life_goods_bought_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = life_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						min = 0
					}
					set_temp_variable = { cost_temp = buy_amount }
					multiply_temp_variable = { cost_temp = life_goods_price }

					#Resolve
					add_to_variable = { life_goods_bought_value = cost_temp }
					add_to_variable = { life_goods_bought_amount = buy_amount }
					add_to_variable = { life_goods_sold_value = cost_temp }
					add_to_variable = { life_goods_sold_amount = buy_amount }
					subtract_from_variable = { life_goods_left = buy_amount }
				#
				#Everyday Goods Purchases
					set_temp_variable = { buy_amount = everyday_goods_demand }
					subtract_from_temp_variable = { buy_amount = everyday_goods_bought_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = everyday_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						min = 0
					}
					set_temp_variable = { cost_temp = buy_amount }
					multiply_temp_variable = { cost_temp = everyday_goods_price }

					#Resolve
					add_to_variable = { everyday_goods_bought_value = cost_temp }
					add_to_variable = { everyday_goods_bought_amount = buy_amount }
					add_to_variable = { everyday_goods_sold_value = cost_temp }
					add_to_variable = { everyday_goods_sold_amount = buy_amount }
					subtract_from_variable = { everyday_goods_left = buy_amount }

				#
				#Luxury Goods Purchases
					set_temp_variable = { buy_amount = luxury_goods_demand }
					subtract_from_temp_variable = { buy_amount = luxury_goods_bought_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = luxury_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						min = 0
					}
					set_temp_variable = { cost_temp = buy_amount }
					multiply_temp_variable = { cost_temp = luxury_goods_price }

					#Resolve
					add_to_variable = { luxury_goods_bought_value = cost_temp }
					add_to_variable = { luxury_goods_bought_amount = buy_amount }
					add_to_variable = { luxury_goods_sold_value = cost_temp }
					add_to_variable = { luxury_goods_sold_amount = buy_amount }
					subtract_from_variable = { luxury_goods_left = buy_amount }

				#
				#Services Purchases
					set_temp_variable = { buy_amount = services_demand }
					subtract_from_temp_variable = { buy_amount = services_bought_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = services_left
					}
					clamp_temp_variable = {
						var = buy_amount
						min = 0
					}
					set_temp_variable = { cost_temp = buy_amount }
					multiply_temp_variable = { cost_temp = services_price }

					#Resolve
					add_to_variable = { services_bought_value = cost_temp }
					add_to_variable = { services_bought_amount = buy_amount }
					add_to_variable = { services_sold_value = cost_temp }
					add_to_variable = { services_sold_amount = buy_amount }
					subtract_from_variable = { services_left = buy_amount }

				#
				#Raw Goods Purchases
					set_temp_variable = { buy_amount = raw_goods_demand }
					subtract_from_temp_variable = { buy_amount = raw_goods_bought_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = raw_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						min = 0
					}
					set_temp_variable = { cost_temp = buy_amount }
					multiply_temp_variable = { cost_temp = raw_goods_price }

					#Resolve
					add_to_variable = { raw_goods_bought_value = cost_temp }
					add_to_variable = { raw_goods_bought_amount = buy_amount }
					add_to_variable = { raw_goods_sold_value = cost_temp }
					add_to_variable = { raw_goods_sold_amount = buy_amount }
					subtract_from_variable = { raw_goods_left = buy_amount }
					
				#
				#Industrial Goods Purchases
					set_temp_variable = { buy_amount = industrial_goods_demand }
					subtract_from_temp_variable = { buy_amount = industrial_goods_bought_amount }

					clamp_temp_variable = {
						var = buy_amount
						max = industrial_goods_left
					}
					clamp_temp_variable = {
						var = buy_amount
						min = 0
					}
					set_temp_variable = { cost_temp = buy_amount }
					multiply_temp_variable = { cost_temp = industrial_goods_price }

					#Resolve
					add_to_variable = { industrial_goods_bought_value = cost_temp }
					add_to_variable = { industrial_goods_bought_amount = buy_amount }
					add_to_variable = { industrial_goods_sold_value = cost_temp }
					add_to_variable = { industrial_goods_sold_amount = buy_amount }
					subtract_from_variable = { industrial_goods_left = buy_amount }
					
				#

				#Resolve Purchases
					#Life Goods Bought
						if = {
							limit = {
								OR = {
									check_variable = { life_goods_bought_value > 0 }
									check_variable = { life_goods_bought_amount > 0 }
								}
							}
							#Only pops can demand Life Goods
							set_temp_variable = { cost_temp = life_goods_bought_value }
							set_temp_variable = { prev_cost_temp = cost_temp }

							if = {
								limit = {
									check_variable = { sales_tax_temp > 100 }
								}

								multiply_temp_variable = { cost_temp = sales_tax_temp }
								divide_temp_variable = { cost_temp = 100 }

								set_temp_variable = { sales_tax_amount_temp = cost_temp }
								subtract_from_temp_variable = { sales_tax_amount_temp = prev_cost_temp }
								add_to_variable = { PREV.treasury = sales_tax_amount_temp }
								add_to_variable = { PREV.actual_sales_tax_revenue = sales_tax_amount_temp }
							}

							subtract_from_variable = { pops_money = cost_temp }
							add_to_variable = { pops_goods_spending = cost_temp }
							set_temp_variable = { needs_fulfilled_temp = life_goods_bought_amount }
							divide_temp_variable = { needs_fulfilled_temp = pops_life_goods_need }
							add_to_variable = { pops_life_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = pops_life_goods_fulfilled_percentage
								min = 0
								max = 1
							}
						}
					#
					#Life Goods Sold
						if = {
							limit = {
								OR = {
									check_variable = { life_goods_sold_value > 0 }
									check_variable = { life_goods_sold_amount > 0 }
								}
							}
							add_to_variable = { pops_earnings = life_goods_sold_value }
							add_to_variable = { rgos_earnings = life_goods_sold_value }
							add_to_variable = { pops_rgos_life_goods_sold = life_goods_sold_amount }
						}
					#
					#Everyday Goods Bought
						if = {
							limit = {
								OR = {
									check_variable = { everyday_goods_bought_value > 0 }
									check_variable = { everyday_goods_bought_amount > 0 }
								}
							}
							#Only pops can demand Everyday Goods
							set_temp_variable = { cost_temp = everyday_goods_bought_value }
							set_temp_variable = { prev_cost_temp = cost_temp }

							if = {
								limit = {
									check_variable = { sales_tax_temp > 100 }
								}

								multiply_temp_variable = { cost_temp = sales_tax_temp }
								divide_temp_variable = { cost_temp = 100 }

								set_temp_variable = { sales_tax_amount_temp = cost_temp }
								subtract_from_temp_variable = { sales_tax_amount_temp = prev_cost_temp }
								add_to_variable = { PREV.treasury = sales_tax_amount_temp }
								add_to_variable = { PREV.actual_sales_tax_revenue = sales_tax_amount_temp }
							}

							subtract_from_variable = { pops_money = cost_temp }
							add_to_variable = { pops_goods_spending = cost_temp }
							set_temp_variable = { needs_fulfilled_temp = everyday_goods_bought_amount }
							divide_temp_variable = { needs_fulfilled_temp = pops_everyday_goods_need }
							add_to_variable = { pops_everyday_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = pops_everyday_goods_fulfilled_percentage
								min = 0
								max = 1
							}
						}
					#
					#Everyday Goods Sold
						if = {
							limit = {
								OR = {
									check_variable = { everyday_goods_sold_value > 0 }
									check_variable = { everyday_goods_sold_amount > 0 }
								}
							}
							#Splitting between Factories and Artisans
							set_temp_variable = { artisan_share = pops_artisans_everyday_goods_production }
							multiply_temp_variable = { artisan_share = 100 }
							divide_temp_variable = { artisan_share = everyday_goods_produced_amount }

							set_temp_variable = { factory_share = factory_everyday_goods_production }
							multiply_temp_variable = { factory_share = 100 }
							divide_temp_variable = { factory_share = everyday_goods_produced_amount }

							set_temp_variable = { artisan_cost_temp = everyday_goods_sold_value }
							set_temp_variable = { artisan_buy_amount = everyday_goods_sold_amount }
							multiply_temp_variable = { artisan_cost_temp = artisan_share }
							divide_temp_variable = { artisan_cost_temp = 100 }
							multiply_temp_variable = { artisan_buy_amount = artisan_share }
							divide_temp_variable = { artisan_buy_amount = 100 }

							set_temp_variable = { factory_cost_temp = everyday_goods_sold_value }
							set_temp_variable = { factory_buy_amount = everyday_goods_sold_amount }
							multiply_temp_variable = { factory_cost_temp = factory_share }
							divide_temp_variable = { factory_cost_temp = 100 }
							multiply_temp_variable = { factory_buy_amount = factory_share }
							divide_temp_variable = { factory_buy_amount = 100 }

							set_temp_variable = { total_cost_temp = artisan_cost_temp }
							add_to_temp_variable = { total_cost_temp = factory_cost_temp }
							set_temp_variable = { total_buy_amount_temp = artisan_buy_amount }
							add_to_temp_variable = { total_buy_amount_temp = factory_buy_amount }

							if = {
								limit = {
									NOT = { check_variable = { total_cost_temp = everyday_goods_sold_value } }
								}
								subtract_from_temp_variable = { total_cost_temp = everyday_goods_sold_value }
								subtract_from_temp_variable = { factory_cost_temp = total_cost_temp }
							}
							if = {
								limit = {
									NOT = { check_variable = { total_buy_amount_temp = everyday_goods_sold_amount } }
								}
								subtract_from_temp_variable = { total_buy_amount_temp = everyday_goods_sold_amount }
								subtract_from_temp_variable = { factory_buy_amount = total_buy_amount_temp }
								subtract_from_temp_variable = { factory_buy_amount = 0.001 }
								add_to_temp_variable = { artisan_buy_amount = 0.001 }
							}
							
							add_to_variable = { factory_everyday_goods_money = factory_cost_temp }
							add_to_variable = { factory_everyday_goods_earnings = factory_cost_temp }
							add_to_variable = { factory_everyday_goods_sold = factory_buy_amount }

							if = { 
								limit = {
									check_variable = { factory_everyday_goods_sold > factory_everyday_goods_production }
								}
								add_to_temp_variable = { artisan_buy_amount = factory_everyday_goods_sold }
								subtract_from_temp_variable = { artisan_buy_amount = factory_everyday_goods_production }
								set_variable = { factory_everyday_goods_sold = factory_everyday_goods_production }
							}

							add_to_variable = { artisans_earnings = artisan_cost_temp }
							add_to_variable = { pops_earnings = artisan_cost_temp }
							add_to_variable = { pops_artisans_everyday_goods_sold = artisan_buy_amount }
						}
					#
					#Luxury Goods Bought
						if = {
							limit = {
								OR = {
									check_variable = { luxury_goods_bought_value > 0 }
									check_variable = { luxury_goods_bought_amount > 0 }
								}
							}
							#Only pops can demand Luxury Goods
							set_temp_variable = { cost_temp = luxury_goods_bought_value }
							set_temp_variable = { prev_cost_temp = cost_temp }

							if = {
								limit = {
									check_variable = { sales_tax_temp > 100 }
								}

								multiply_temp_variable = { cost_temp = sales_tax_temp }
								divide_temp_variable = { cost_temp = 100 }

								set_temp_variable = { sales_tax_amount_temp = cost_temp }
								subtract_from_temp_variable = { sales_tax_amount_temp = prev_cost_temp }
								add_to_variable = { PREV.treasury = sales_tax_amount_temp }
								add_to_variable = { PREV.actual_sales_tax_revenue = sales_tax_amount_temp }
							}

							subtract_from_variable = { pops_money = cost_temp }
							add_to_variable = { pops_goods_spending = cost_temp }
							set_temp_variable = { needs_fulfilled_temp = luxury_goods_bought_amount }
							divide_temp_variable = { needs_fulfilled_temp = pops_luxury_goods_need }
							add_to_variable = { pops_luxury_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = pops_luxury_goods_fulfilled_percentage
								min = 0
								max = 1
							}
						}
					#
					#Luxury Goods Sold
						if = {
							limit = {
								OR = {
									check_variable = { luxury_goods_sold_value > 0 }
									check_variable = { luxury_goods_sold_amount > 0 }
								}
							}
							#Splitting between Factories and Artisans
							set_temp_variable = { artisan_share = pops_artisans_luxury_goods_production }
							multiply_temp_variable = { artisan_share = 100 }
							divide_temp_variable = { artisan_share = luxury_goods_produced_amount }

							set_temp_variable = { factory_share = factory_luxury_goods_production }
							multiply_temp_variable = { factory_share = 100 }
							divide_temp_variable = { factory_share = luxury_goods_produced_amount }

							set_temp_variable = { artisan_cost_temp = luxury_goods_sold_value }
							set_temp_variable = { artisan_buy_amount = luxury_goods_sold_amount }
							multiply_temp_variable = { artisan_cost_temp = artisan_share }
							divide_temp_variable = { artisan_cost_temp = 100 }
							multiply_temp_variable = { artisan_buy_amount = artisan_share }
							divide_temp_variable = { artisan_buy_amount = 100 }

							set_temp_variable = { factory_cost_temp = luxury_goods_sold_value }
							set_temp_variable = { factory_buy_amount = luxury_goods_sold_amount }
							multiply_temp_variable = { factory_cost_temp = factory_share }
							divide_temp_variable = { factory_cost_temp = 100 }
							multiply_temp_variable = { factory_buy_amount = factory_share }
							divide_temp_variable = { factory_buy_amount = 100 }

							set_temp_variable = { total_cost_temp = artisan_cost_temp }
							add_to_temp_variable = { total_cost_temp = factory_cost_temp }
							set_temp_variable = { total_buy_amount_temp = artisan_buy_amount }
							add_to_temp_variable = { total_buy_amount_temp = factory_buy_amount }

							if = {
								limit = {
									NOT = { check_variable = { total_cost_temp = luxury_goods_sold_value } }
								}
								subtract_from_temp_variable = { total_cost_temp = luxury_goods_sold_value }
								subtract_from_temp_variable = { factory_cost_temp = total_cost_temp }
							}
							if = {
								limit = {
									NOT = { check_variable = { total_buy_amount_temp = luxury_goods_sold_amount } }
								}
								subtract_from_temp_variable = { total_buy_amount_temp = luxury_goods_sold_amount }
								subtract_from_temp_variable = { factory_buy_amount = total_buy_amount_temp }
								subtract_from_temp_variable = { factory_buy_amount = 0.001 }
								add_to_temp_variable = { artisan_buy_amount = 0.001 }
							}
							
							add_to_variable = { factory_luxury_goods_money = factory_cost_temp }
							add_to_variable = { factory_luxury_goods_earnings = factory_cost_temp }
							add_to_variable = { factory_luxury_goods_sold = factory_buy_amount }

							if = { 
								limit = {
									check_variable = { factory_luxury_goods_sold > factory_luxury_goods_production }
								}
								add_to_temp_variable = { artisan_buy_amount = factory_luxury_goods_sold }
								subtract_from_temp_variable = { artisan_buy_amount = factory_luxury_goods_production }
								set_variable = { factory_luxury_goods_sold = factory_luxury_goods_production }
							}

							add_to_variable = { artisans_earnings = artisan_cost_temp }
							add_to_variable = { pops_earnings = artisan_cost_temp }
							add_to_variable = { pops_artisans_luxury_goods_sold = artisan_buy_amount }
						}
					#
					#Services Bought
						if = {
							limit = {
								OR = {
									check_variable = { services_bought_value > 0 }
									check_variable = { services_bought_amount > 0 }
								}
							}
							#Only pops can demand Services
							set_temp_variable = { cost_temp = services_bought_value }
							set_temp_variable = { prev_cost_temp = cost_temp }

							if = {
								limit = {
									check_variable = { sales_tax_temp > 100 }
								}

								multiply_temp_variable = { cost_temp = sales_tax_temp }
								divide_temp_variable = { cost_temp = 100 }

								set_temp_variable = { sales_tax_amount_temp = cost_temp }
								subtract_from_temp_variable = { sales_tax_amount_temp = prev_cost_temp }
								add_to_variable = { PREV.treasury = sales_tax_amount_temp }
								add_to_variable = { PREV.actual_sales_tax_revenue = sales_tax_amount_temp }
							}

							subtract_from_variable = { pops_money = cost_temp }
							add_to_variable = { pops_goods_spending = cost_temp }
							set_temp_variable = { needs_fulfilled_temp = services_bought_amount }
							divide_temp_variable = { needs_fulfilled_temp = pops_services_need }
							add_to_variable = { pops_services_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = pops_services_fulfilled_percentage
								min = 0
								max = 1
							}
						}
					#
					#Services Sold
						if = {
							limit = {
								OR = {
									check_variable = { services_sold_value > 0 }
									check_variable = { services_sold_amount > 0 }
								}
							}
							#Revenue & goods sold absorbed by pops
							add_to_variable = { pops_earnings = services_sold_value }

							set_temp_variable = { capitalists_share = pops_services_production }
							multiply_temp_variable = { capitalists_share = 50 }
							set_temp_variable = { clerks_share = pops_clerks_services_production }
							multiply_temp_variable = { clerks_share = 100 }
							set_temp_variable = { professionals_share = pops_professionals_services_production }
							multiply_temp_variable = { professionals_share = 100 }

							set_temp_variable = { share_total = capitalists_share }
							add_to_temp_variable = { share_total = clerks_share }
							add_to_temp_variable = { share_total = professionals_share }
							divide_temp_variable = { share_total = 100 }

							divide_temp_variable = { capitalists_share = share_total }
							divide_temp_variable = { clerks_share = share_total }
							divide_temp_variable = { professionals_share = share_total }

							set_temp_variable = { capitalists_value = services_sold_value }
							multiply_temp_variable = { capitalists_value = capitalists_share }
							divide_temp_variable = { capitalists_value = 100 }
							set_temp_variable = { clerks_value = services_sold_value }
							multiply_temp_variable = { clerks_value = clerks_share }
							divide_temp_variable = { clerks_value = 100 }
							set_temp_variable = { professionals_value = services_sold_value }
							multiply_temp_variable = { professionals_value = professionals_share }
							divide_temp_variable = { professionals_value = 100 }

							add_to_variable = { capitalists_earnings = capitalists_value }
							add_to_variable = { clerks_earnings = clerks_value }
							add_to_variable = { professionals_earnings = professionals_value }

							add_to_variable = { pops_services_sold = services_sold_amount }
						}
					#
					#Raw Goods Bought
						if = {
							limit = {
								OR = {
									check_variable = { raw_goods_bought_value > 0 }
									check_variable = { raw_goods_bought_amount > 0 }
								}
							}
							#Costs & goods absorbed by factories/artisans
							#Splitting between Factories and Artisans
							set_temp_variable = { cost_temp = raw_goods_bought_value }
							set_temp_variable = { prev_cost_temp = cost_temp }

							if = {
								limit = {
									check_variable = { sales_tax_temp > 100 }
								}

								multiply_temp_variable = { cost_temp = sales_tax_temp }
								divide_temp_variable = { cost_temp = 100 }

								set_temp_variable = { sales_tax_amount_temp = cost_temp }
								subtract_from_temp_variable = { sales_tax_amount_temp = prev_cost_temp }
								add_to_variable = { PREV.treasury = sales_tax_amount_temp }
								add_to_variable = { PREV.actual_sales_tax_revenue = sales_tax_amount_temp }
							}

							set_temp_variable = { artisan_share = pops_artisans_raw_goods_demand }
							multiply_temp_variable = { artisan_share = 100 }
							divide_temp_variable = { artisan_share = raw_goods_demand }

							set_temp_variable = { factory_share = factory_raw_goods_demand }
							multiply_temp_variable = { factory_share = 100 }
							divide_temp_variable = { factory_share = raw_goods_demand }

							set_temp_variable = { artisan_goods_value = cost_temp }
							set_temp_variable = { artisan_goods_amount = raw_goods_bought_amount }
							multiply_temp_variable = { artisan_goods_value = artisan_share }
							divide_temp_variable = { artisan_goods_value = 100 }
							multiply_temp_variable = { artisan_goods_amount = artisan_share }
							divide_temp_variable = { artisan_goods_amount = 100 }

							set_temp_variable = { factory_goods_value = cost_temp }
							set_temp_variable = { factory_goods_amount = raw_goods_bought_amount }
							multiply_temp_variable = { factory_goods_value = factory_share }
							divide_temp_variable = { factory_goods_value = 100 }
							multiply_temp_variable = { factory_goods_amount = factory_share }
							divide_temp_variable = { factory_goods_amount = 100 }

							set_temp_variable = { total_goods_value = artisan_goods_value }
							add_to_temp_variable = { total_goods_value = factory_goods_value }
							set_temp_variable = { total_goods_amount_temp = artisan_goods_amount }
							add_to_temp_variable = { total_goods_amount_temp = factory_goods_amount }

							if = {
								limit = {
									NOT = { check_variable = { total_goods_value = cost_temp } }
								}
								subtract_from_temp_variable = { total_goods_value = cost_temp }
								subtract_from_temp_variable = { factory_goods_value = total_goods_value }
							}
							if = {
								limit = {
									NOT = { check_variable = { total_goods_amount_temp = raw_goods_bought_amount } }
								}
								subtract_from_temp_variable = { total_goods_amount_temp = raw_goods_bought_amount }
								subtract_from_temp_variable = { factory_goods_amount = total_goods_amount_temp }
							}
							
							#Splitting between industry categories
							set_temp_variable = { m_temp = factory_everyday_goods_raw_goods_demand }
							multiply_temp_variable = { m_temp = 100 }
							divide_temp_variable = { m_temp = factory_raw_goods_demand }
							set_temp_variable = { needs_fulfilled_temp = m_temp }
							multiply_temp_variable = { m_temp = factory_goods_value }
							divide_temp_variable = { m_temp = 100 }
							subtract_from_variable = { factory_everyday_goods_money = m_temp }
							add_to_variable = { factory_everyday_goods_spending = m_temp }
							
							multiply_temp_variable = { needs_fulfilled_temp = factory_goods_amount }
							divide_temp_variable = { needs_fulfilled_temp = factory_everyday_goods_raw_goods_need }
							divide_temp_variable = { needs_fulfilled_temp = 100 }
							add_to_variable = { factory_everyday_goods_raw_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = factory_everyday_goods_raw_goods_fulfilled_percentage
								min = 0
								max = 1
							}

							set_temp_variable = { m_temp = factory_luxury_goods_raw_goods_demand }
							multiply_temp_variable = { m_temp = 100 }
							divide_temp_variable = { m_temp = factory_raw_goods_demand }
							set_temp_variable = { needs_fulfilled_temp = m_temp }
							multiply_temp_variable = { m_temp = factory_goods_value }
							divide_temp_variable = { m_temp = 100 }
							subtract_from_variable = { factory_luxury_goods_money = m_temp }
							add_to_variable = { factory_luxury_goods_spending = m_temp }
							
							multiply_temp_variable = { needs_fulfilled_temp = factory_goods_amount }
							divide_temp_variable = { needs_fulfilled_temp = factory_luxury_goods_raw_goods_need }
							divide_temp_variable = { needs_fulfilled_temp = 100 }
							add_to_variable = { factory_luxury_goods_raw_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = factory_luxury_goods_raw_goods_fulfilled_percentage
								min = 0
								max = 1
							}

							set_temp_variable = { m_temp = factory_industrial_goods_raw_goods_demand }
							multiply_temp_variable = { m_temp = 100 }
							divide_temp_variable = { m_temp = factory_raw_goods_demand }
							set_temp_variable = { needs_fulfilled_temp = m_temp }
							multiply_temp_variable = { m_temp = factory_goods_value }
							divide_temp_variable = { m_temp = 100 }
							subtract_from_variable = { factory_industrial_goods_money = m_temp }
							add_to_variable = { factory_industrial_goods_spending = m_temp }
							
							multiply_temp_variable = { needs_fulfilled_temp = factory_goods_amount }
							divide_temp_variable = { needs_fulfilled_temp = factory_industrial_goods_raw_goods_need }
							divide_temp_variable = { needs_fulfilled_temp = 100 }
							add_to_variable = { factory_industrial_goods_raw_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = factory_industrial_goods_raw_goods_fulfilled_percentage
								min = 0
								max = 1
							}

							subtract_from_variable = { pops_money = artisan_goods_value }
							add_to_variable = { pops_spending = artisan_goods_value }
							set_temp_variable = { needs_fulfilled_temp = artisan_goods_amount }
							divide_temp_variable = { needs_fulfilled_temp = pops_artisans_raw_goods_need }
							add_to_variable = { pops_artisans_raw_goods_fulfilled_percentage = needs_fulfilled_temp }
							clamp_variable = {
								var = pops_artisans_raw_goods_fulfilled_percentage
								min = 0
								max = 1
							}

						}
					#
					#Raw Goods Sold
						if = {
							limit = {
								OR = {
									check_variable = { raw_goods_sold_value > 0 }
									check_variable = { raw_goods_sold_amount > 0 }
								}
							}
							#Revenue & goods sold absorbed by rgos
							add_to_variable = { pops_earnings = raw_goods_sold_value }
							add_to_variable = { rgos_earnings = raw_goods_sold_value }

							add_to_variable = { pops_rgos_raw_goods_sold = raw_goods_sold_amount }
						}
					#
					#Industrial Goods Bought
						if = {
							limit = {
								OR = {
									check_variable = { industrial_goods_bought_value > 0 }
									check_variable = { industrial_goods_bought_amount > 0 }
								}
							}
							set_temp_variable = { cost_temp = industrial_goods_bought_value }
							set_temp_variable = { prev_cost_temp = cost_temp }

							if = {
								limit = {
									check_variable = { sales_tax_temp > 100 }
								}

								multiply_temp_variable = { cost_temp = sales_tax_temp }
								divide_temp_variable = { cost_temp = 100 }

								set_temp_variable = { sales_tax_amount_temp = cost_temp }
								subtract_from_temp_variable = { sales_tax_amount_temp = prev_cost_temp }
								add_to_variable = { PREV.treasury = sales_tax_amount_temp }
								add_to_variable = { PREV.actual_sales_tax_revenue = sales_tax_amount_temp }
							}

							#So many things here...
							#Costs & goods split between factories, infra, & construction 
							#Splitting between Factories and Construction

							#Turned it into an array b/c fuck the amount of code that I had
							clear_temp_array = share_array_temp
							clear_temp_array = value_array_temp
							clear_temp_array = amount_array_temp

							# Index corresponds to where the industrial goods demand goes
							# New ones will be added onto the end
							# INDEX NUMBERS:
							#   0 - Factory Maintenance
							#   1 - Everyday Goods Factory Construction
							#   2 - Luxury Goods Factory Construction
							#   3 - Industrial Goods Factory Construction
							#   4 - Infrastructure Maintenance
							#   5 - Infrastructure Construction
							#   6 - Mechanized Agri Maintenance
							#   7 - Mechanized Agri Expansion

							# NOTE FOR SELF: 
							#	When adding new things here, make sure to increase the size of ALL arrays

							####################
							### DEMAND SHARE ###
							####################
								resize_temp_array = {
									array = share_array_temp
									value = 0
									size = 8
								}
								set_temp_variable = { share_array_temp^0 = factory_industrial_goods_demand }
								set_temp_variable = { share_array_temp^1 = factory_everyday_goods_construction_industrial_goods_demand }
								set_temp_variable = { share_array_temp^2 = factory_luxury_goods_construction_industrial_goods_demand }
								set_temp_variable = { share_array_temp^3 = factory_industrial_goods_construction_industrial_goods_demand }
								set_temp_variable = { share_array_temp^4 = infrastructure_industrial_goods_demand }
								set_temp_variable = { share_array_temp^5 = infrastructure_construction_industrial_goods_demand }
								set_temp_variable = { share_array_temp^6 = pops_rgos_mechanization_industrial_goods_demand }
								set_temp_variable = { share_array_temp^7 = pops_rgos_mechanization_expansion_industrial_goods_demand }

								for_each_loop = {
									array = share_array_temp
									value = vv_temp
									index = ii_temp
									
									multiply_temp_variable = { share_array_temp^ii_temp = 100 }
									divide_temp_variable = { share_array_temp^ii_temp = industrial_goods_demand }
								}

							####################

							#######################
							### VALUE & AMOUNTS ###
							#######################
								resize_temp_array = {
									array = value_array_temp
									value = 0
									size = 8
								}
								resize_temp_array = {
									array = amount_array_temp
									value = 0
									size = 8
								}
								set_temp_variable = { total_value_temp = 0 }
								set_temp_variable = { total_amount_temp = 0 }

								for_each_loop = {
									array = value_array_temp
									value = vv_temp
									index = ii_temp
									
									set_temp_variable = { value_array_temp^ii_temp = cost_temp }
									set_temp_variable = { amount_array_temp^ii_temp = industrial_goods_bought_amount }

									multiply_temp_variable = { value_array_temp^ii_temp = share_array_temp^ii_temp }
									multiply_temp_variable = { amount_array_temp^ii_temp = share_array_temp^ii_temp }

									divide_temp_variable = { value_array_temp^ii_temp = 100 }
									divide_temp_variable = { amount_array_temp^ii_temp = 100 }

									add_to_temp_variable = { total_value_temp = value_array_temp^ii_temp }
									add_to_temp_variable = { total_amount_temp = amount_array_temp^ii_temp }
								}

								if = {
									limit = {
										NOT = { check_variable = { total_value_temp = cost_temp } }
									}
									set_temp_variable = { missing_value_temp = cost_temp }
									subtract_from_temp_variable = { missing_value_temp = total_value_temp }

									subtract_from_variable = { pops_money = missing_value_temp } #Pops deal with the missing value. Should be negligible though.
								}
								if = {
									limit = {
										NOT = { check_variable = { total_amount_temp = industrial_goods_bought_amount } }
									}
									for_each_loop = {
										array = value_array_temp
										value = vv_temp
										index = ii_temp
										if = {
											limit = {
												check_variable = { amount_array_temp^ii_temp > 0 }
											}
											add_to_temp_variable = { amount_array_temp^ii_temp = 0.001 }
											multiply_temp_variable = { amount_array_temp^ii_temp = 1.001 }
										}
									}
								}

							#######################

							###############
							### RESOLVE ###
							###############

								if = {
									limit = {
										OR = {
											check_variable = { value_array_temp^0 > 0 }
											check_variable = { amount_array_temp^0 > 0 }
										}
									}
									#Splitting between industry categories
									set_temp_variable = { m_temp = factory_everyday_goods_industrial_goods_demand }
									multiply_temp_variable = { m_temp = 100 }
									divide_temp_variable = { m_temp = factory_industrial_goods_demand }
									set_temp_variable = { needs_fulfilled_temp = m_temp }
									multiply_temp_variable = { m_temp = value_array_temp^0 }
									divide_temp_variable = { m_temp = 100 }
									subtract_from_variable = { factory_everyday_goods_money = m_temp }
									add_to_variable = { factory_everyday_goods_spending = m_temp }
									
									multiply_temp_variable = { needs_fulfilled_temp = amount_array_temp^0 }
									divide_temp_variable = { needs_fulfilled_temp = factory_everyday_goods_industrial_goods_need }
									divide_temp_variable = { needs_fulfilled_temp = 100 }
									add_to_variable = { factory_everyday_goods_industrial_goods_fulfilled_percentage = needs_fulfilled_temp }
									clamp_variable = {
										var = factory_everyday_goods_industrial_goods_fulfilled_percentage
										min = 0
										max = 1
									}

									set_temp_variable = { m_temp = factory_luxury_goods_industrial_goods_demand }
									multiply_temp_variable = { m_temp = 100 }
									divide_temp_variable = { m_temp = factory_industrial_goods_demand }
									set_temp_variable = { needs_fulfilled_temp = m_temp }
									multiply_temp_variable = { m_temp = value_array_temp^0 }
									divide_temp_variable = { m_temp = 100 }
									subtract_from_variable = { factory_luxury_goods_money = m_temp }
									add_to_variable = { factory_luxury_goods_spending = m_temp }
									
									multiply_temp_variable = { needs_fulfilled_temp = amount_array_temp^0 }
									divide_temp_variable = { needs_fulfilled_temp = factory_luxury_goods_industrial_goods_need }
									divide_temp_variable = { needs_fulfilled_temp = 100 }
									add_to_variable = { factory_luxury_goods_industrial_goods_fulfilled_percentage = needs_fulfilled_temp }
									clamp_variable = {
										var = factory_luxury_goods_industrial_goods_fulfilled_percentage
										min = 0
										max = 1
									}

									set_temp_variable = { m_temp = factory_industrial_goods_industrial_goods_demand }
									multiply_temp_variable = { m_temp = 100 }
									divide_temp_variable = { m_temp = factory_industrial_goods_demand }
									set_temp_variable = { needs_fulfilled_temp = m_temp }
									multiply_temp_variable = { m_temp = value_array_temp^0 }
									divide_temp_variable = { m_temp = 100 }
									subtract_from_variable = { factory_industrial_goods_money = m_temp }
									add_to_variable = { factory_industrial_goods_spending = m_temp }
									
									multiply_temp_variable = { needs_fulfilled_temp = amount_array_temp^0 }
									divide_temp_variable = { needs_fulfilled_temp = factory_industrial_goods_industrial_goods_need }
									divide_temp_variable = { needs_fulfilled_temp = 100 }
									add_to_variable = { factory_industrial_goods_industrial_goods_fulfilled_percentage = needs_fulfilled_temp }
									clamp_variable = {
										var = factory_industrial_goods_industrial_goods_fulfilled_percentage
										min = 0
										max = 1
									}
								}

								if = {
									limit = {
										OR = {
											check_variable = { value_array_temp^1 > 0 }
											check_variable = { amount_array_temp^1 > 0 }
										}
									}
									subtract_from_variable = { factory_everyday_goods_construction_investment_money = value_array_temp^1 }
									subtract_from_variable = { factory_everyday_goods_construction_industrial_goods_need = amount_array_temp^1 }
									if = {
										limit = {
											check_variable = { factory_everyday_goods_construction_industrial_goods_need < 0 }
										}
										set_variable = { factory_everyday_goods_construction_industrial_goods_need = 0 }
									}
								}
								if = {
									limit = {
										OR = {
											check_variable = { value_array_temp^2 > 0 }
											check_variable = { amount_array_temp^2 > 0 }
										}
									}
									subtract_from_variable = { factory_luxury_goods_construction_investment_money = value_array_temp^2 }
									subtract_from_variable = { factory_luxury_goods_construction_industrial_goods_need = amount_array_temp^2 }
									if = {
										limit = {
											check_variable = { factory_luxury_goods_construction_industrial_goods_need < 0 }
										}
										set_variable = { factory_luxury_goods_construction_industrial_goods_need = 0 }
									}
								}
								if = {
									limit = {
										OR = {
											check_variable = { value_array_temp^3 > 0 }
											check_variable = { amount_array_temp^3 > 0 }
										}
									}
									subtract_from_variable = { factory_industrial_goods_construction_investment_money = value_array_temp^3 }
									subtract_from_variable = { factory_industrial_goods_construction_industrial_goods_need = amount_array_temp^3 }
									if = {
										limit = {
											check_variable = { factory_industrial_goods_construction_industrial_goods_need < 0 }
										}
										set_variable = { factory_industrial_goods_construction_industrial_goods_need = 0 }
									}
								}

								if = {
									limit = {
										OR = {
											check_variable = { value_array_temp^4 > 0 }
											check_variable = { amount_array_temp^4 > 0 }
										}
									}
									subtract_from_variable = { infrastructure_money = value_array_temp^4 }
									set_temp_variable = { needs_fulfilled_temp = amount_array_temp^4 }
									divide_temp_variable = { needs_fulfilled_temp = infrastructure_industrial_goods_need }
									add_to_variable = { infrastructure_industrial_goods_fulfilled_percentage = needs_fulfilled_temp }
									clamp_variable = {
										var = infrastructure_industrial_goods_fulfilled_percentage
										min = 0
										max = 1
									}
								}

								if = {
									limit = {
										OR = {
											check_variable = { value_array_temp^5 > 0 }
											check_variable = { amount_array_temp^5 > 0 }
										}
									}
									subtract_from_variable = { infrastructure_construction_investment_money = value_array_temp^5 }
									subtract_from_variable = { infrastructure_construction_industrial_goods_need = amount_array_temp^5 }
									if = {
										limit = {
											check_variable = { infrastructure_construction_industrial_goods_need < 0 }
										}
										set_variable = { infrastructure_construction_industrial_goods_need = 0 }
									}
								}

								if = {
									limit = {
										OR = {
											check_variable = { value_array_temp^6 > 0 }
											check_variable = { amount_array_temp^6 > 0 }
										}
									}
									subtract_from_variable = { pops_money = value_array_temp^6 }
									set_temp_variable = { needs_fulfilled_temp = amount_array_temp^6 }
									divide_temp_variable = { needs_fulfilled_temp = pops_rgos_mechanization_industrial_goods_need }
									add_to_variable = { pops_rgos_mechanization_industrial_goods_fulfilled_percentage = needs_fulfilled_temp }
									clamp_variable = {
										var = pops_rgos_mechanization_industrial_goods_fulfilled_percentage
										min = 0
										max = 1
									}
								}

								if = {
									limit = {
										OR = {
											check_variable = { value_array_temp^7 > 0 }
											check_variable = { amount_array_temp^7 > 0 }
										}
									}
									subtract_from_variable = { pops_money = value_array_temp^7 }
									set_variable = { pops_rgos_mechanization_expansion_industrial_goods_fulfillment = amount_array_temp^7 }
								}
							###############

						}
					#
					#Industrial Goods Sold
						if = {
							limit = {
								OR = {
									check_variable = { industrial_goods_sold_value > 0 }
									check_variable = { industrial_goods_sold_amount > 0 }
								}
							}
							#Splitting between Factories and Artisans
							set_temp_variable = { artisan_share = pops_artisans_industrial_goods_production }
							multiply_temp_variable = { artisan_share = 100 }
							divide_temp_variable = { artisan_share = industrial_goods_produced_amount }

							set_temp_variable = { factory_share = factory_industrial_goods_production }
							multiply_temp_variable = { factory_share = 100 }
							divide_temp_variable = { factory_share = industrial_goods_produced_amount }

							set_temp_variable = { artisan_cost_temp = industrial_goods_sold_value }
							set_temp_variable = { artisan_buy_amount = industrial_goods_sold_amount }
							multiply_temp_variable = { artisan_cost_temp = artisan_share }
							divide_temp_variable = { artisan_cost_temp = 100 }
							multiply_temp_variable = { artisan_buy_amount = artisan_share }
							divide_temp_variable = { artisan_buy_amount = 100 }

							set_temp_variable = { factory_cost_temp = industrial_goods_sold_value }
							set_temp_variable = { factory_buy_amount = industrial_goods_sold_amount }
							multiply_temp_variable = { factory_cost_temp = factory_share }
							divide_temp_variable = { factory_cost_temp = 100 }
							multiply_temp_variable = { factory_buy_amount = factory_share }
							divide_temp_variable = { factory_buy_amount = 100 }

							set_temp_variable = { total_cost_temp = artisan_cost_temp }
							add_to_temp_variable = { total_cost_temp = factory_cost_temp }
							set_temp_variable = { total_buy_amount_temp = artisan_buy_amount }
							add_to_temp_variable = { total_buy_amount_temp = factory_buy_amount }

							if = {
								limit = {
									NOT = { check_variable = { total_cost_temp = industrial_goods_sold_value } }
								}
								subtract_from_temp_variable = { total_cost_temp = industrial_goods_sold_value }
								subtract_from_temp_variable = { factory_cost_temp = total_cost_temp }
							}
							if = {
								limit = {
									NOT = { check_variable = { total_buy_amount_temp = industrial_goods_sold_amount } }
								}
								subtract_from_temp_variable = { total_buy_amount_temp = industrial_goods_sold_amount }
								subtract_from_temp_variable = { factory_buy_amount = total_buy_amount_temp }
								subtract_from_temp_variable = { factory_buy_amount = 0.001 }
								add_to_temp_variable = { artisan_buy_amount = 0.001 }
							}
							
							add_to_variable = { factory_industrial_goods_money = factory_cost_temp }
							add_to_variable = { factory_industrial_goods_earnings = factory_cost_temp }
							add_to_variable = { factory_industrial_goods_sold = factory_buy_amount }

							if = { 
								limit = {
									check_variable = { factory_industrial_goods_sold > factory_industrial_goods_production }
								}
								add_to_temp_variable = { artisan_buy_amount = factory_industrial_goods_sold }
								subtract_from_temp_variable = { artisan_buy_amount = factory_industrial_goods_production }
								set_variable = { factory_industrial_goods_sold = factory_industrial_goods_production }
							}

							add_to_variable = { artisans_earnings = artisan_cost_temp }
							add_to_variable = { pops_earnings = artisan_cost_temp }
							add_to_variable = { pops_artisans_industrial_goods_sold = artisan_buy_amount }
						}
					#
				#

				#Factory Wages & Profit
					#Everyday Goods
						set_variable = { factory_everyday_goods_wages = factory_everyday_goods_earnings }
						multiply_variable = { factory_everyday_goods_wages = global.factory_wages_revenue_percentage }

						set_temp_variable = { factory_wage_max_money_temp = global.factory_wages_max_money_percentage }
						multiply_temp_variable = { factory_wage_max_money_temp = factory_everyday_goods_money_limit }
						multiply_temp_variable = { factory_wage_max_money_temp = factory_employment_amount }
						divide_temp_variable = { factory_wage_max_money_temp = factory_employment_amount_max }
						add_to_variable = { factory_everyday_goods_wages = factory_wage_max_money_temp }

						add_to_variable = { factory_everyday_goods_spending = factory_everyday_goods_wages }

						set_variable = { factory_everyday_goods_profit = factory_everyday_goods_earnings }
						subtract_from_variable = { factory_everyday_goods_profit = factory_everyday_goods_spending }

						set_temp_variable = { bonuses_temp = factory_everyday_goods_profit }
						multiply_temp_variable = { bonuses_temp = global.factory_wages_profit_percentage }
						add_to_variable = { factory_everyday_goods_wages = bonuses_temp }

						add_to_variable = { factory_everyday_goods_spending = bonuses_temp }
						subtract_from_variable = { factory_everyday_goods_profit = bonuses_temp }

						subtract_from_variable = { factory_everyday_goods_money = factory_everyday_goods_wages }
						if = {
							limit = {
								check_variable = { factory_everyday_goods_money < 0 }
							}
							add_to_variable = { factory_everyday_goods_wages = factory_everyday_goods_money }
							set_variable = { factory_everyday_goods_money = 0 }
						}
						add_to_variable = { pops_earnings = factory_everyday_goods_wages }

						set_temp_variable = { capitalists_share = capitalists_percentage }
						multiply_temp_variable = { capitalists_share = 900 }
						set_temp_variable = { craftsmen_share = craftsmen_percentage }
						multiply_temp_variable = { craftsmen_share = 100 }
						set_temp_variable = { specialists_share = specialists_percentage }
						multiply_temp_variable = { specialists_share = 100 }
						set_temp_variable = { modifier_temp = global.pops_specialists_production_bonus }
						add_to_temp_variable = { modifier_temp = 1 }
						multiply_temp_variable = { specialists_share = modifier_temp }

						set_temp_variable = { share_total = capitalists_share }
						add_to_temp_variable = { share_total = craftsmen_share }
						add_to_temp_variable = { share_total = specialists_share }
						divide_temp_variable = { share_total = 100 }

						divide_temp_variable = { capitalists_share = share_total }
						divide_temp_variable = { craftsmen_share = share_total }
						divide_temp_variable = { specialists_share = share_total }

						set_temp_variable = { capitalists_value = factory_everyday_goods_wages }
						multiply_temp_variable = { capitalists_value = capitalists_share }
						divide_temp_variable = { capitalists_value = 100 }
						set_temp_variable = { craftsmen_value = factory_everyday_goods_wages }
						multiply_temp_variable = { craftsmen_value = craftsmen_share }
						divide_temp_variable = { craftsmen_value = 100 }
						set_temp_variable = { specialists_value = factory_everyday_goods_wages }
						multiply_temp_variable = { specialists_value = specialists_share }
						divide_temp_variable = { specialists_value = 100 }

						add_to_variable = { capitalists_earnings = capitalists_value }
						add_to_variable = { craftsmen_earnings = craftsmen_value }
						add_to_variable = { specialists_earnings = specialists_value }
						
						if = {
							limit = {
								check_variable = { factory_everyday_goods_money > factory_everyday_goods_money_limit }
							}
							set_temp_variable = { excess_temp = factory_everyday_goods_money }
							subtract_from_temp_variable = { excess_temp = factory_everyday_goods_money_limit }
							divide_temp_variable = { excess_temp = 2 }
							add_to_variable = { pops_earnings = excess_temp }
							set_temp_variable = { capitalists_value = excess_temp }
							multiply_temp_variable = { capitalists_value = capitalists_share }
							divide_temp_variable = { capitalists_value = 100 }
							set_temp_variable = { craftsmen_value = excess_temp }
							multiply_temp_variable = { craftsmen_value = craftsmen_share }
							divide_temp_variable = { craftsmen_value = 100 }
							set_temp_variable = { specialists_value = excess_temp }
							multiply_temp_variable = { specialists_value = specialists_share }
							divide_temp_variable = { specialists_value = 100 }

							add_to_variable = { capitalists_earnings = capitalists_value }
							add_to_variable = { craftsmen_earnings = craftsmen_value }
							add_to_variable = { specialists_earnings = specialists_value }

							subtract_from_variable = { factory_everyday_goods_money = excess_temp }
						}
					#
					#Luxury Goods
						set_variable = { factory_luxury_goods_wages = factory_luxury_goods_earnings }
						multiply_variable = { factory_luxury_goods_wages = global.factory_wages_revenue_percentage }

						set_temp_variable = { factory_wage_max_money_temp = global.factory_wages_max_money_percentage }
						multiply_temp_variable = { factory_wage_max_money_temp = factory_luxury_goods_money_limit }
						multiply_temp_variable = { factory_wage_max_money_temp = factory_employment_amount }
						divide_temp_variable = { factory_wage_max_money_temp = factory_employment_amount_max }
						add_to_variable = { factory_luxury_goods_wages = factory_wage_max_money_temp }

						add_to_variable = { factory_luxury_goods_spending = factory_luxury_goods_wages }

						set_variable = { factory_luxury_goods_profit = factory_luxury_goods_earnings }
						subtract_from_variable = { factory_luxury_goods_profit = factory_luxury_goods_spending }

						set_temp_variable = { bonuses_temp = factory_luxury_goods_profit }
						multiply_temp_variable = { bonuses_temp = global.factory_wages_profit_percentage }
						add_to_variable = { factory_luxury_goods_wages = bonuses_temp }

						add_to_variable = { factory_luxury_goods_spending = bonuses_temp }
						subtract_from_variable = { factory_luxury_goods_profit = bonuses_temp }

						subtract_from_variable = { factory_luxury_goods_money = factory_luxury_goods_wages }
						if = {
							limit = {
								check_variable = { factory_luxury_goods_money < 0 }
							}
							add_to_variable = { factory_luxury_goods_wages = factory_luxury_goods_money }
							set_variable = { factory_luxury_goods_money = 0 }
						}
						add_to_variable = { pops_earnings = factory_luxury_goods_wages }

						set_temp_variable = { capitalists_share = capitalists_percentage }
						multiply_temp_variable = { capitalists_share = 900 }
						set_temp_variable = { craftsmen_share = craftsmen_percentage }
						multiply_temp_variable = { craftsmen_share = 100 }
						set_temp_variable = { specialists_share = specialists_percentage }
						multiply_temp_variable = { specialists_share = 100 }
						set_temp_variable = { modifier_temp = global.pops_specialists_production_bonus }
						add_to_temp_variable = { modifier_temp = 1 }
						multiply_temp_variable = { specialists_share = modifier_temp }

						set_temp_variable = { share_total = capitalists_share }
						add_to_temp_variable = { share_total = craftsmen_share }
						add_to_temp_variable = { share_total = specialists_share }
						divide_temp_variable = { share_total = 100 }

						divide_temp_variable = { capitalists_share = share_total }
						divide_temp_variable = { craftsmen_share = share_total }
						divide_temp_variable = { specialists_share = share_total }

						set_temp_variable = { capitalists_value = factory_luxury_goods_wages }
						multiply_temp_variable = { capitalists_value = capitalists_share }
						divide_temp_variable = { capitalists_value = 100 }
						set_temp_variable = { craftsmen_value = factory_luxury_goods_wages }
						multiply_temp_variable = { craftsmen_value = craftsmen_share }
						divide_temp_variable = { craftsmen_value = 100 }
						set_temp_variable = { specialists_value = factory_luxury_goods_wages }
						multiply_temp_variable = { specialists_value = specialists_share }
						divide_temp_variable = { specialists_value = 100 }

						add_to_variable = { capitalists_earnings = capitalists_value }
						add_to_variable = { craftsmen_earnings = craftsmen_value }
						add_to_variable = { specialists_earnings = specialists_value }
						
						if = {
							limit = {
								check_variable = { factory_luxury_goods_money > factory_luxury_goods_money_limit }
							}
							set_temp_variable = { excess_temp = factory_luxury_goods_money }
							subtract_from_temp_variable = { excess_temp = factory_luxury_goods_money_limit }
							divide_temp_variable = { excess_temp = 2 }
							add_to_variable = { pops_earnings = excess_temp }
							set_temp_variable = { capitalists_value = excess_temp }
							multiply_temp_variable = { capitalists_value = capitalists_share }
							divide_temp_variable = { capitalists_value = 100 }
							set_temp_variable = { craftsmen_value = excess_temp }
							multiply_temp_variable = { craftsmen_value = craftsmen_share }
							divide_temp_variable = { craftsmen_value = 100 }
							set_temp_variable = { specialists_value = excess_temp }
							multiply_temp_variable = { specialists_value = specialists_share }
							divide_temp_variable = { specialists_value = 100 }

							add_to_variable = { capitalists_earnings = capitalists_value }
							add_to_variable = { craftsmen_earnings = craftsmen_value }
							add_to_variable = { specialists_earnings = specialists_value }

							subtract_from_variable = { factory_luxury_goods_money = excess_temp }
						}
					#
					#Industrial Goods
						set_variable = { factory_industrial_goods_wages = factory_industrial_goods_earnings }
						multiply_variable = { factory_industrial_goods_wages = global.factory_wages_revenue_percentage }

						set_temp_variable = { factory_wage_max_money_temp = global.factory_wages_max_money_percentage }
						multiply_temp_variable = { factory_wage_max_money_temp = factory_industrial_goods_money_limit }
						multiply_temp_variable = { factory_wage_max_money_temp = factory_employment_amount }
						divide_temp_variable = { factory_wage_max_money_temp = factory_employment_amount_max }
						add_to_variable = { factory_industrial_goods_wages = factory_wage_max_money_temp }

						add_to_variable = { factory_industrial_goods_spending = factory_industrial_goods_wages }

						set_variable = { factory_industrial_goods_profit = factory_industrial_goods_earnings }
						subtract_from_variable = { factory_industrial_goods_profit = factory_industrial_goods_spending }

						set_temp_variable = { bonuses_temp = factory_industrial_goods_profit }
						multiply_temp_variable = { bonuses_temp = global.factory_wages_profit_percentage }
						add_to_variable = { factory_industrial_goods_wages = bonuses_temp }

						add_to_variable = { factory_industrial_goods_spending = bonuses_temp }
						subtract_from_variable = { factory_industrial_goods_profit = bonuses_temp }

						subtract_from_variable = { factory_industrial_goods_money = factory_industrial_goods_wages }
						if = {
							limit = {
								check_variable = { factory_industrial_goods_money < 0 }
							}
							add_to_variable = { factory_industrial_goods_wages = factory_industrial_goods_money }
							set_variable = { factory_industrial_goods_money = 0 }
						}
						add_to_variable = { pops_earnings = factory_industrial_goods_wages }

						set_temp_variable = { capitalists_share = capitalists_percentage }
						multiply_temp_variable = { capitalists_share = 900 }
						set_temp_variable = { craftsmen_share = craftsmen_percentage }
						multiply_temp_variable = { craftsmen_share = 100 }
						set_temp_variable = { specialists_share = specialists_percentage }
						multiply_temp_variable = { specialists_share = 100 }
						set_temp_variable = { modifier_temp = global.pops_specialists_production_bonus }
						add_to_temp_variable = { modifier_temp = 1 }
						multiply_temp_variable = { specialists_share = modifier_temp }

						set_temp_variable = { share_total = capitalists_share }
						add_to_temp_variable = { share_total = craftsmen_share }
						add_to_temp_variable = { share_total = specialists_share }
						divide_temp_variable = { share_total = 100 }

						divide_temp_variable = { capitalists_share = share_total }
						divide_temp_variable = { craftsmen_share = share_total }
						divide_temp_variable = { specialists_share = share_total }

						set_temp_variable = { capitalists_value = factory_industrial_goods_wages }
						multiply_temp_variable = { capitalists_value = capitalists_share }
						divide_temp_variable = { capitalists_value = 100 }
						set_temp_variable = { craftsmen_value = factory_industrial_goods_wages }
						multiply_temp_variable = { craftsmen_value = craftsmen_share }
						divide_temp_variable = { craftsmen_value = 100 }
						set_temp_variable = { specialists_value = factory_industrial_goods_wages }
						multiply_temp_variable = { specialists_value = specialists_share }
						divide_temp_variable = { specialists_value = 100 }

						add_to_variable = { capitalists_earnings = capitalists_value }
						add_to_variable = { craftsmen_earnings = craftsmen_value }
						add_to_variable = { specialists_earnings = specialists_value }
						
						if = {
							limit = {
								check_variable = { factory_industrial_goods_money > factory_industrial_goods_money_limit }
							}
							set_temp_variable = { excess_temp = factory_industrial_goods_money }
							subtract_from_temp_variable = { excess_temp = factory_industrial_goods_money_limit }
							divide_temp_variable = { excess_temp = 2 }
							add_to_variable = { pops_earnings = excess_temp }
							set_temp_variable = { capitalists_value = excess_temp }
							multiply_temp_variable = { capitalists_value = capitalists_share }
							divide_temp_variable = { capitalists_value = 100 }
							set_temp_variable = { craftsmen_value = excess_temp }
							multiply_temp_variable = { craftsmen_value = craftsmen_share }
							divide_temp_variable = { craftsmen_value = 100 }
							set_temp_variable = { specialists_value = excess_temp }
							multiply_temp_variable = { specialists_value = specialists_share }
							divide_temp_variable = { specialists_value = 100 }

							add_to_variable = { capitalists_earnings = capitalists_value }
							add_to_variable = { craftsmen_earnings = craftsmen_value }
							add_to_variable = { specialists_earnings = specialists_value }

							subtract_from_variable = { factory_industrial_goods_money = excess_temp }
						}
					#
				#

				add_to_variable = { pops_earnings = pops_rgos_valuable_goods_production } #Gold in dem hills
				add_to_variable = { rgos_earnings = pops_rgos_valuable_goods_production }

				#Pops & National Bank put money into Savings
					#National Bank Interest
						set_temp_variable = { interest_temp = pops_savings }
						divide_temp_variable = { interest_temp = PREV.national_bank_amount_k }
						multiply_temp_variable = { interest_temp = PREV.national_bank_money }
						divide_temp_variable = { interest_temp = 100 }
						if = {
							limit = {
								check_variable = { interest_temp > PREV.national_bank_money }
							}
							set_temp_variable = { interest_temp = PREV.national_bank_money}
						}
						subtract_from_variable = { PREV.national_bank_money = interest_temp }
						add_to_variable = { pops_savings = interest_temp }
						add_to_variable = { pops_savings_interest = interest_temp }
					#

					set_temp_variable = { pops_savings_temp = pops_money }
					multiply_temp_variable = { pops_savings_temp = global.pops_savings_spending }
					
					set_variable = { pops_savings_goal = pops_earnings }
					multiply_variable = { pops_savings_goal = global.pops_savings_base_goal }
					if = {
						limit = {
							check_variable = { pops_savings < pops_savings_goal }
							check_variable = { pops_savings_temp > 0 }
						}
						add_to_variable = { pops_savings = pops_savings_temp }
						add_to_variable = { pops_savings_deposits = pops_savings_temp }
						subtract_from_variable = { pops_money = pops_savings_temp }
					}
					
					if = {
						limit = {
							check_variable = { pops_money < 0 }
							check_variable = { pops_savings > 0 }
						}
						set_temp_variable = { pops_savings_temp = pops_money }
						multiply_temp_variable = { pops_savings_temp = -1 }
						if = {
							limit = {
								check_variable = { pops_savings_temp > pops_savings }
							}
							set_temp_variable = { pops_savings_temp = pops_savings }
						}
						subtract_from_variable = { pops_savings = pops_savings_temp }
						add_to_variable = { pops_money = pops_savings_temp }
						add_to_variable = { pops_savings_withdrawals = pops_savings_temp }
					}
				#

				#RGO Revenue into Aristocrats

					set_temp_variable = { aristocrats_share = aristocrats_percentage }
					multiply_temp_variable = { aristocrats_share = 900 }
					set_temp_variable = { rgos_share = rgos_percentage }
					multiply_temp_variable = { rgos_share = 100 }

					set_temp_variable = { share_total = aristocrats_share }
					add_to_temp_variable = { share_total = rgos_share }
					divide_temp_variable = { share_total = 100 }

					divide_temp_variable = { aristocrats_share = share_total }
					divide_temp_variable = { rgos_share = share_total }

					set_temp_variable = { aristocrats_value = rgos_earnings }
					multiply_temp_variable = { aristocrats_value = aristocrats_share }
					divide_temp_variable = { aristocrats_value = 100 }
					set_temp_variable = { rgos_value = rgos_earnings }
					multiply_temp_variable = { rgos_value = rgos_share }
					divide_temp_variable = { rgos_value = 100 }

					set_variable = { aristocrats_earnings = aristocrats_value }
					set_variable = { rgos_earnings = rgos_value }
				#

				#Pop Demographics
					#Growth/Death
						set_variable = { pops_natural_birth_amount = pops_amount }
						divide_variable = { pops_natural_birth_amount = 100 }
						multiply_variable = { pops_natural_birth_amount = global.pops_natural_birth_base_rate }
						divide_variable = { pops_natural_birth_amount = 12 }

						set_variable = { pops_natural_death_amount = pops_amount }
						divide_variable = { pops_natural_death_amount = 100 }
						multiply_variable = { pops_natural_death_amount = global.pops_natural_death_base_rate }
						divide_variable = { pops_natural_death_amount = 12 }

						set_temp_variable = { disease_temp = pops_disease_death_amount }
						divide_temp_variable = { disease_temp = 1000 }
						add_to_variable = { pops_natural_death_amount = disease_temp }
						set_variable = { pops_disease_death_amount = 0 }

						set_variable = { pops_accidents_death_amount = pops_amount }
						divide_variable = { pops_accidents_death_amount = 100 }
						multiply_variable = { pops_accidents_death_amount = global.pops_accidents_death_base_rate }
						divide_variable = { pops_accidents_death_amount = 12 }

						set_variable = { pops_crime_death_amount = pops_amount }
						divide_variable = { pops_crime_death_amount = 100 }
						multiply_variable = { pops_crime_death_amount = global.pops_crime_death_base_rate }
						divide_variable = { pops_crime_death_amount = 12 }

						set_variable = { pops_other_death_amount = pops_amount }
						divide_variable = { pops_other_death_amount = 100 }
						multiply_variable = { pops_other_death_amount = global.pops_other_death_base_rate }
						divide_variable = { pops_other_death_amount = 12 }

						set_variable = { pops_starvation_percentage = 0 } #Percentage needed for starvation
						if = {
							limit = {
								check_variable = { pops_amount < 100 }
							}
							set_temp_variable = { pops_amount_temp = pops_amount }
							divide_temp_variable = { pops_amount_temp = 2000 }
							add_to_variable = { pops_starvation_percentage = pops_amount_temp }
						}
						else = {
							add_to_variable = { pops_starvation_percentage = 0.05 }

							if = {
								limit = {
									check_variable = { pops_amount < 1000 }
								}
								set_temp_variable = { pops_amount_temp = pops_amount }
								divide_temp_variable = { pops_amount_temp = 10000 }
								add_to_variable = { pops_starvation_percentage = pops_amount_temp }
							}
							else = {
								add_to_variable = { pops_starvation_percentage = 0.1 }
								if = {
									limit = {
										check_variable = { pops_amount < 30000 }
									}
									set_temp_variable = { pops_amount_temp = pops_amount }
									divide_temp_variable = { pops_amount_temp = 200000 }
									add_to_variable = { pops_starvation_percentage = pops_amount_temp }
								}
								else = {
									add_to_variable = { pops_starvation_percentage = 0.15 }
									set_temp_variable = { pops_amount_temp = pops_amount }
									divide_temp_variable = { pops_amount_temp = 2000000 }
									add_to_variable = { pops_starvation_percentage = pops_amount_temp }
								}
							}
						}
						if = {
							limit = {
								check_variable = { pops_annual_life_goods_fulfilled_percentage < pops_starvation_percentage } #Starvation
							}
							if = {
								limit = {
									check_variable = { pops_amount > 20 } #Low pop amounts may lead to them not getting goods by default
								}
								set_temp_variable = { pops_starvation_death_amount_temp = pops_amount }
								divide_temp_variable = { pops_starvation_death_amount_temp = 100 }
								multiply_temp_variable = { pops_starvation_death_amount_temp = global.pops_maximum_starvation_death_rate }
								divide_temp_variable = { pops_starvation_death_amount_temp = 12 }

								set_temp_variable = { percentage_applied_temp = pops_starvation_percentage }
								subtract_from_temp_variable = { percentage_applied_temp = pops_annual_life_goods_fulfilled_percentage }
								divide_temp_variable = { percentage_applied_temp = pops_starvation_percentage }
								multiply_temp_variable = { pops_starvation_death_amount_temp = percentage_applied_temp }
								add_to_variable = { pops_other_death_amount = pops_starvation_death_amount_temp }
							}
						}

						set_variable = { pops_net_change_amount = pops_natural_birth_amount }
						subtract_from_variable = { pops_net_change_amount = pops_natural_death_amount }
						subtract_from_variable = { pops_net_change_amount = pops_accidents_death_amount }
						subtract_from_variable = { pops_net_change_amount = pops_crime_death_amount }
						subtract_from_variable = { pops_net_change_amount = pops_other_death_amount }

						add_to_variable = { pops_amount = pops_net_change_amount }
					#

					#Pop Promotions/Demotions
						set_variable = { rgo_promotion_demotion_change = 0 }
						set_variable = { artisans_promotion_demotion_change = 0 }
						set_variable = { craftsmen_promotion_demotion_change = 0 }
						set_variable = { specialists_promotion_demotion_change = 0 }
						set_variable = { clerks_promotion_demotion_change = 0 }
						set_variable = { professionals_promotion_demotion_change = 0 }
						set_variable = { soldiers_promotion_demotion_change = 0 }
						set_variable = { officers_promotion_demotion_change = 0 }
						set_variable = { capitalists_promotion_demotion_change = 0 }
						set_variable = { aristocrats_promotion_demotion_change = 0 }

						if = {
							limit = {
								check_variable = { factory_employment_amount < factory_employment_amount_max }
								check_variable = { craftsmen_percentage < 100 }
								check_variable = { rgos_percentage > 0 }
							}
							#RGOs Promote into Craftsmen
							add_to_variable = { rgo_promotion_demotion_change = -0.01 }
							add_to_variable = { rgos_percentage = -0.01 }
							add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
							add_to_variable = { craftsmen_percentage = 0.01 }

							set_temp_variable = { factory_employment_temp = factory_employment_amount_max }
							multiply_temp_variable = { factory_employment_temp = 0.9 }
							if = {
								limit = {
									check_variable = { factory_employment_amount < factory_employment_temp }
									check_variable = { craftsmen_percentage < 100 }
									check_variable = { rgos_percentage > 0 }
								}
								#RGOs Promote into Craftsmen
								add_to_variable = { rgo_promotion_demotion_change = -0.01 }
								add_to_variable = { rgos_percentage = -0.01 }
								add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
								add_to_variable = { craftsmen_percentage = 0.01 }

								set_temp_variable = { factory_employment_temp = factory_employment_amount_max }
								multiply_temp_variable = { factory_employment_temp = 0.9 }
								if = {
									limit = {
										check_variable = { factory_employment_amount < factory_employment_temp }
										check_variable = { craftsmen_percentage < 100 }
										check_variable = { rgos_percentage > 0 }
									}
									#RGOs Promote into Craftsmen
									add_to_variable = { rgo_promotion_demotion_change = -0.01 }
									add_to_variable = { rgos_percentage = -0.01 }
									add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
									add_to_variable = { craftsmen_percentage = 0.01 }

									set_temp_variable = { factory_employment_temp = factory_employment_amount_max }
									multiply_temp_variable = { factory_employment_temp = 0.9 }
									if = {
										limit = {
											check_variable = { factory_employment_amount < factory_employment_temp }
											check_variable = { craftsmen_percentage < 100 }
											check_variable = { rgos_percentage > 0 }
										}
										#RGOs Promote into Craftsmen
										add_to_variable = { rgo_promotion_demotion_change = -0.01 }
										add_to_variable = { rgos_percentage = -0.01 }
										add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
										add_to_variable = { craftsmen_percentage = 0.01 }
									}
								}
							}
						}
						if = {
							limit = {
								check_variable = { craftsmen_unemployment_percentage > 0  }
								check_variable = { rgos_percentage < 100 }
								check_variable = { craftsmen_percentage > 0 }
							}
							#Craftsmen Demote into RGOs
							add_to_variable = { craftsmen_promotion_demotion_change = -0.01 }
							add_to_variable = { craftsmen_percentage = -0.01 }
							add_to_variable = { rgo_promotion_demotion_change = 0.01 }
							add_to_variable = { rgos_percentage = 0.01 }
							if = {
								limit = {
									check_variable = { craftsmen_unemployment_percentage > 5  }
									check_variable = { rgos_percentage < 100 }
									check_variable = { craftsmen_percentage > 0 }
								}
								#Craftsmen Demote into RGOs
								add_to_variable = { craftsmen_promotion_demotion_change = -0.01 }
								add_to_variable = { craftsmen_percentage = -0.01 }
								add_to_variable = { rgo_promotion_demotion_change = 0.01 }
								add_to_variable = { rgos_percentage = 0.01 }
								if = {
									limit = {
										check_variable = { craftsmen_unemployment_percentage > 10  }
										check_variable = { rgos_percentage < 100 }
										check_variable = { craftsmen_percentage > 0 }
									}
									#Craftsmen Demote into RGOs
									add_to_variable = { craftsmen_promotion_demotion_change = -0.01 }
									add_to_variable = { craftsmen_percentage = -0.01 }
									add_to_variable = { rgo_promotion_demotion_change = 0.01 }
									add_to_variable = { rgos_percentage = 0.01 }
								}
							}
						}

						set_variable = { rgos_earnings_per_capita = rgos_earnings }
						divide_variable = { rgos_earnings_per_capita = rgos_workforce_amount }

						set_variable = { craftsmen_earnings_per_capita = craftsmen_earnings }
						divide_variable = { craftsmen_earnings_per_capita = craftsmen_workforce_amount }

						set_temp_variable = { craftsmen_earnings_per_capita_temp = craftsmen_earnings_per_capita }
						multiply_temp_variable = { craftsmen_earnings_per_capita_temp = 1.5 }
						if = {
							limit = {
								check_variable = { craftsmen_earnings_per_capita_temp > rgos_earnings_per_capita }
								check_variable = { craftsmen_percentage < 100 }
								check_variable = { rgos_percentage > 0 }
							}
							#RGOs Promote into Craftsmen
							add_to_variable = { rgo_promotion_demotion_change = -0.01 }
							add_to_variable = { rgos_percentage = -0.01 }
							add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
							add_to_variable = { craftsmen_percentage = 0.01 }

							multiply_temp_variable = { craftsmen_earnings_per_capita_temp = 1.25 }
							if = {
								limit = {
									check_variable = { craftsmen_earnings_per_capita_temp > rgos_earnings_per_capita }
									check_variable = { craftsmen_percentage < 100 }
									check_variable = { rgos_percentage > 0 }
								}
								#RGOs Promote into Craftsmen
								add_to_variable = { rgo_promotion_demotion_change = -0.01 }
								add_to_variable = { rgos_percentage = -0.01 }
								add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
								add_to_variable = { craftsmen_percentage = 0.01 }

								multiply_temp_variable = { craftsmen_earnings_per_capita_temp = 1.25 }
								if = {
									limit = {
										check_variable = { craftsmen_earnings_per_capita_temp > rgos_earnings_per_capita }
										check_variable = { craftsmen_percentage < 100 }
										check_variable = { rgos_percentage > 0 }
									}
									#RGOs Promote into Craftsmen
									add_to_variable = { rgo_promotion_demotion_change = -0.01 }
									add_to_variable = { rgos_percentage = -0.01 }
									add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
									add_to_variable = { craftsmen_percentage = 0.01 }

									multiply_temp_variable = { craftsmen_earnings_per_capita_temp = 1.25 }
									if = {
										limit = {
											check_variable = { craftsmen_earnings_per_capita_temp > rgos_earnings_per_capita }
											check_variable = { craftsmen_percentage < 100 }
											check_variable = { rgos_percentage > 0 }
										}
										#RGOs Promote into Craftsmen
										add_to_variable = { rgo_promotion_demotion_change = -0.01 }
										add_to_variable = { rgos_percentage = -0.01 }
										add_to_variable = { craftsmen_promotion_demotion_change = 0.01 }
										add_to_variable = { craftsmen_percentage = 0.01 }
									}
								}
							}
						}
						if = {
							limit = {
								check_variable = { rgos_earnings_per_capita > craftsmen_earnings_per_capita }
								check_variable = { rgos_percentage < 100 }
								check_variable = { craftsmen_percentage > 0 }
							}
							#Craftsmen Demote into RGOs
							add_to_variable = { rgo_promotion_demotion_change = 0.01 }
							add_to_variable = { rgos_percentage = 0.01 }
							add_to_variable = { craftsmen_promotion_demotion_change = -0.01 }
							add_to_variable = { craftsmen_percentage = -0.01 }

							set_temp_variable = { rgos_earnings_per_capita_temp = rgos_earnings_per_capita }
							multiply_temp_variable = { rgos_earnings_per_capita_temp = 1.25 }
							if = {
								limit = {
									check_variable = { rgos_earnings_per_capita_temp > craftsmen_earnings_per_capita }
									check_variable = { rgos_percentage < 100 }
									check_variable = { craftsmen_percentage > 0 }
								}
								#Craftsmen Demote into RGOs
								add_to_variable = { rgo_promotion_demotion_change = 0.01 }
								add_to_variable = { rgos_percentage = 0.01 }
								add_to_variable = { craftsmen_promotion_demotion_change = -0.01 }
								add_to_variable = { craftsmen_percentage = -0.01 }
							}
						}
					#
				#
			}

			#National Bank
				national_bank_update = yes
			#

			set_variable = { private_factory_amount = 0 }
			set_variable = { pops_goods_spending = 0 }
			every_controlled_state = {
				calculate_base_price = yes
				#calculate_price = yes
				pops_update = yes
				factories_update = yes
				pops_update = yes
				factories_update = yes

				#Construction

					#Continue Construction
					#Everyday
						if = {
							limit = {
								has_state_flag = factory_everyday_goods_in_construction
								check_variable = { pops_savings > 100 }
							}
							set_temp_variable = { investment_money_temp = pops_savings }
							subtract_from_temp_variable = { investment_money_temp = 100 }
							
							set_temp_variable = { investment_money_max_temp = factory_everyday_goods_construction_industrial_goods_need }
							multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
							multiply_temp_variable = { investment_money_max_temp = 1.5 }
							subtract_from_temp_variable = { investment_money_max_temp = factory_everyday_goods_construction_investment_money }
							add_to_temp_variable = { investment_money_max_temp = 1 }

							if = {
								limit = {
									check_variable = { investment_money_temp > investment_money_max_temp }
								}
								set_temp_variable = { investment_money_temp = investment_money_max_temp }
							}
							subtract_from_variable = { pops_savings = investment_money_temp }
							add_to_variable = { factory_everyday_goods_construction_investment_money = investment_money_temp }
						}
					#
					#Luxury
						if = {
							limit = {
								has_state_flag = factory_luxury_goods_in_construction
								check_variable = { pops_savings > 100 }
							}
							set_temp_variable = { investment_money_temp = pops_savings }
							subtract_from_temp_variable = { investment_money_temp = 100 }
							
							set_temp_variable = { investment_money_max_temp = factory_luxury_goods_construction_industrial_goods_need }
							multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
							multiply_temp_variable = { investment_money_max_temp = 1.5 }
							subtract_from_temp_variable = { investment_money_max_temp = factory_luxury_goods_construction_investment_money }
							add_to_temp_variable = { investment_money_max_temp = 1 }

							if = {
								limit = {
									check_variable = { investment_money_temp > investment_money_max_temp }
								}
								set_temp_variable = { investment_money_temp = investment_money_max_temp }
							}
							subtract_from_variable = { pops_savings = investment_money_temp }
							add_to_variable = { factory_luxury_goods_construction_investment_money = investment_money_temp }
						}
					#
					#Industrial
						if = {
							limit = {
								has_state_flag = factory_industrial_goods_in_construction
								check_variable = { pops_savings > 100 }
							}
							set_temp_variable = { investment_money_temp = pops_savings }
							subtract_from_temp_variable = { investment_money_temp = 100 }
							
							set_temp_variable = { investment_money_max_temp = factory_industrial_goods_construction_industrial_goods_need }
							multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
							multiply_temp_variable = { investment_money_max_temp = 1.5 }
							subtract_from_temp_variable = { investment_money_max_temp = factory_industrial_goods_construction_investment_money }
							add_to_temp_variable = { investment_money_max_temp = 1 }

							if = {
								limit = {
									check_variable = { investment_money_temp > investment_money_max_temp }
								}
								set_temp_variable = { investment_money_temp = investment_money_max_temp }
							}
							subtract_from_variable = { pops_savings = investment_money_temp }
							add_to_variable = { factory_industrial_goods_construction_investment_money = investment_money_temp }
						}
					#

					end_everyday_goods_factory_construction = yes
					end_luxury_goods_factory_construction = yes
					end_industrial_goods_factory_construction = yes

					end_infrastructure_construction = yes
				#

				#Resolve Infra Crumbling
					if = {
						limit = {
							check_variable = { infrastructure_level > 0 }
							check_variable = { infrastructure_industrial_goods_fulfilled_percentage < global.infrastructure_crumbling_threshold }
						}
						add_to_variable = { infrastructure_crumbling_ticks = 1 }
						if = {
							limit = {
								NOT = { check_variable = { infrastructure_crumbling_ticks < global.infrastructure_crumbling_ticks_bar } } 
							}
							remove_building  = {
								type = infrastructure
								level = 1
							}
							set_variable = { infrastructure_crumbling_ticks = 0 }
						}
					}
					else = {
						subtract_from_variable = { infrastructure_crumbling_ticks = 1 }
						if = {
							limit = {
								check_variable = { infrastructure_crumbling_ticks < 0 }
							}
							set_variable = { infrastructure_crumbling_ticks = 0 }
						}
					}
				#

				#Infra Modifiers
					set_temp_variable = { efficiency_effect_temp = infrastructure_efficiency_effect }
					add_to_temp_variable = { efficiency_effect_temp = 1 }

					set_temp_variable = { infra_maintenance_fulfilled_temp = infrastructure_industrial_goods_fulfilled_percentage }
					add_to_temp_variable = { infra_maintenance_fulfilled_temp = 1 }
					divide_temp_variable = { infra_maintenance_fulfilled_temp = 2 }

					set_variable = { infrastructure_rgo_output_modifier = infrastructure_level }
					multiply_variable = { infrastructure_rgo_output_modifier = global.infrastructure_rgo_output_modifier }
					multiply_variable = { infrastructure_rgo_output_modifier = infra_maintenance_fulfilled_temp }
					multiply_variable = { infrastructure_rgo_output_modifier = infrastructure_efficiency_effect }

					set_variable = { infrastructure_factory_throughput_modifier = infrastructure_level }
					multiply_variable = { infrastructure_factory_throughput_modifier = global.infrastructure_factory_throughput_modifier }
					multiply_variable = { infrastructure_factory_throughput_modifier = infra_maintenance_fulfilled_temp }
					multiply_variable = { infrastructure_factory_throughput_modifier = infrastructure_efficiency_effect }

					set_variable = { infrastructure_build_cost_modifier = infrastructure_level }
					multiply_variable = { infrastructure_build_cost_modifier = global.infrastructure_build_cost_modifier }
					multiply_variable = { infrastructure_build_cost_modifier = infra_maintenance_fulfilled_temp }
					multiply_variable = { infrastructure_build_cost_modifier = infrastructure_efficiency_effect }

					set_variable = { infrastructure_transport_cost_modifier = 1 }
					add_to_variable = { infrastructure_transport_cost_modifier = PREV.modifier@transport_cost_modifier }
					set_variable = { infrastructure_transport_cost_multiplier_per_level = global.infrastructure_transport_cost_multiplier }
					subtract_from_variable = { infrastructure_transport_cost_multiplier_per_level = 1 }
					multiply_variable = { infrastructure_transport_cost_multiplier_per_level = infrastructure_efficiency_effect }
					add_to_variable = { infrastructure_transport_cost_multiplier_per_level = global.infrastructure_transport_cost_multiplier }
					for_loop_effect = {
						start = 0
						end = infrastructure_level
						multiply_variable = { infrastructure_transport_cost_modifier = infrastructure_transport_cost_multiplier_per_level }
					}
					subtract_from_variable = { infrastructure_transport_cost_modifier = 1 }
					multiply_variable = { infrastructure_transport_cost_modifier = infra_maintenance_fulfilled_temp }

				#

				#Mechanization & Mech Modifiers
					set_temp_variable = { needs_fulfilled_temp = pops_rgos_mechanization_expansion_industrial_goods_fulfillment }
					divide_temp_variable = { needs_fulfilled_temp = pops_rgos_mechanization_expansion_industrial_goods_need }
					set_temp_variable = { rgo_mech_temp = rgos_mechanization_percentage }
					add_to_temp_variable = { rgo_mech_temp = needs_fulfilled_temp }

					if = {
						limit = {
							has_state_flag = pops_rgos_valuable_goods_flag
						}
						set_variable = { rgos_max_mechanization_percentage = valuable_goods_rgos_max_mechanization }
					}
					else_if = {
						limit = {
							has_state_flag = pops_rgos_raw_goods_flag
						}
						set_variable = { rgos_max_mechanization_percentage = raw_goods_rgos_max_mechanization }
					}
					else = {
						set_variable = { rgos_max_mechanization_percentage = life_goods_rgos_max_mechanization }
					}
					multiply_variable = { rgos_max_mechanization_percentage = 100 }
					clamp_temp_variable = {
						var = rgo_mech_temp
						min = 0
						max = rgos_max_mechanization_percentage
					}
					if = {
						limit = {
							check_variable = { rgo_mech_temp > rgos_mechanization_percentage }
						}
						set_variable = { rgos_mechanization_percentage = rgo_mech_temp }
					}

					set_temp_variable = { rgos_mechanization_maintenance_fulfilled_temp = pops_rgos_mechanization_industrial_goods_fulfilled_percentage }
					add_to_temp_variable = { rgos_mechanization_maintenance_fulfilled_temp = 1 }
					divide_temp_variable = { rgos_mechanization_maintenance_fulfilled_temp = 2 }

					set_temp_variable = { effective_mech_temp = rgos_mechanization_percentage }
					multiply_temp_variable = { effective_mech_temp = pops_rgos_mechanization_industrial_goods_fulfilled_percentage }

					set_temp_variable = { rgo_mechanization_inverse_temp = 100 }
					subtract_from_temp_variable = { rgo_mechanization_inverse_temp = effective_mech_temp }
					
					#RGO Max Size
					set_variable = { rgos_mechanization_rgo_max_size_multiplier = global.pops_rgos_mechanization_rgo_size_multiplier }
					multiply_variable = { rgos_mechanization_rgo_max_size_multiplier = effective_mech_temp }
					add_to_variable = { rgos_mechanization_rgo_max_size_multiplier = rgo_mechanization_inverse_temp }
					divide_variable = { rgos_mechanization_rgo_max_size_multiplier = 100 }

					#RGO Output
					set_variable = { rgos_mechanization_rgo_output_multiplier = global.pops_rgos_mechanization_rgo_output_multiplier }
					multiply_variable = { rgos_mechanization_rgo_output_multiplier = effective_mech_temp }
					add_to_variable = { rgos_mechanization_rgo_output_multiplier = rgo_mechanization_inverse_temp }
					divide_variable = { rgos_mechanization_rgo_output_multiplier = 100 }
				#

				#Valuable Goods Decay
					if = {
						limit = {
							has_state_flag = pops_rgos_valuable_goods_flag
						}
						subtract_from_variable = { pops_rgos_valuable_goods_decay = 1 }
						if = {
							limit = {
								check_variable = { pops_rgos_valuable_goods_decay < 0 }
							}
							if = {
								limit = {
									has_state_flag = pops_rgos_valuable_goods_untapped_flag
								}
								set_variable = { pops_rgos_valuable_goods_decay = global.pops_rgos_valuable_goods_plentiful_decay_max }
								clr_state_flag = pops_rgos_valuable_goods_untapped_flag
								set_state_flag = pops_rgos_valuable_goods_plentiful_flag
							}
							else_if = {
								limit = {
									has_state_flag = pops_rgos_valuable_goods_plentiful_flag
								}
								set_variable = { pops_rgos_valuable_goods_decay = global.pops_rgos_valuable_goods_exploited_decay_max }
								clr_state_flag = pops_rgos_valuable_goods_plentiful_flag
							}
							else_if = {
								limit = {
									has_state_flag = pops_rgos_valuable_goods_depleted_flag
								}
								clear_variable = pops_rgos_valuable_goods_decay
								clr_state_flag = pops_rgos_valuable_goods_depleted_flag
								clr_state_flag = pops_rgos_valuable_goods_flag
							}
							else = {
								set_variable = { pops_rgos_valuable_goods_decay = global.pops_rgos_valuable_goods_depleted_decay_max }
								set_state_flag = pops_rgos_valuable_goods_depleted_flag
							}
						}
					}
				#

				#Adding Per Month Stats
					#Pop Needs Fulfilled
						add_to_array = { pops_life_goods_fulfilled_array = pops_life_goods_fulfilled_percentage }
						if = {
							limit = {
								check_variable = { pops_life_goods_fulfilled_array^num > 12 }
							}
							remove_from_array = { array = pops_life_goods_fulfilled_array index = 0 }
						}
						add_to_array = { pops_everyday_goods_fulfilled_array = pops_everyday_goods_fulfilled_percentage }
						if = {
							limit = {
								check_variable = { pops_everyday_goods_fulfilled_array^num > 12 }
							}
							remove_from_array = { array = pops_everyday_goods_fulfilled_array index = 0 }
						}
						add_to_array = { pops_luxury_goods_fulfilled_array = pops_luxury_goods_fulfilled_percentage }
						if = {
							limit = {
								check_variable = { pops_luxury_goods_fulfilled_array^num > 12 }
							}
							remove_from_array = { array = pops_luxury_goods_fulfilled_array index = 0 }
						}
					#

					#Factory Earnings/Spending
						add_to_array = { factory_everyday_goods_earnings_array = factory_everyday_goods_earnings }
						if = {
							limit = {
								check_variable = { factory_everyday_goods_earnings_array^num > 12 }
							}
							remove_from_array = { array = factory_everyday_goods_earnings_array index = 0 }
						}
						add_to_array = { factory_everyday_goods_spending_array = factory_everyday_goods_spending }
						if = {
							limit = {
								check_variable = { factory_everyday_goods_spending_array^num > 12 }
							}
							remove_from_array = { array = factory_everyday_goods_spending_array index = 0 }
						}
						
						add_to_array = { factory_luxury_goods_earnings_array = factory_luxury_goods_earnings }
						if = {
							limit = {
								check_variable = { factory_luxury_goods_earnings_array^num > 12 }
							}
							remove_from_array = { array = factory_luxury_goods_earnings_array index = 0 }
						}
						add_to_array = { factory_luxury_goods_spending_array = factory_luxury_goods_spending }
						if = {
							limit = {
								check_variable = { factory_luxury_goods_spending_array^num > 12 }
							}
							remove_from_array = { array = factory_luxury_goods_spending_array index = 0 }
						}
						
						add_to_array = { factory_industrial_goods_earnings_array = factory_industrial_goods_earnings }
						if = {
							limit = {
								check_variable = { factory_industrial_goods_earnings_array^num > 12 }
							}
							remove_from_array = { array = factory_industrial_goods_earnings_array index = 0 }
						}
						add_to_array = { factory_industrial_goods_spending_array = factory_industrial_goods_spending }
						if = {
							limit = {
								check_variable = { factory_industrial_goods_spending_array^num > 12 }
							}
							remove_from_array = { array = factory_industrial_goods_spending_array index = 0 }
						}
					#

					#Price of Goods Index
						set_temp_variable = { total_needs_temp = life_goods_need }
						add_to_temp_variable = { total_needs_temp = everyday_goods_need }
						add_to_temp_variable = { total_needs_temp = luxury_goods_need }
						add_to_temp_variable = { total_needs_temp = services_need }
						add_to_temp_variable = { total_needs_temp = raw_goods_need }
						add_to_temp_variable = { total_needs_temp = industrial_goods_need }

						set_temp_variable = { life_goods_inflation_temp = life_goods_price }
						multiply_temp_variable = { life_goods_inflation_temp = life_goods_need }

						set_temp_variable = { everyday_goods_inflation_temp = everyday_goods_price }
						multiply_temp_variable = { everyday_goods_inflation_temp = everyday_goods_need }

						set_temp_variable = { luxury_goods_inflation_temp = luxury_goods_price }
						multiply_temp_variable = { luxury_goods_inflation_temp = luxury_goods_need }

						set_temp_variable = { services_inflation_temp = services_price }
						multiply_temp_variable = { services_inflation_temp = services_need }

						set_temp_variable = { raw_goods_inflation_temp = raw_goods_price }
						multiply_temp_variable = { raw_goods_inflation_temp = raw_goods_need }

						set_temp_variable = { industrial_goods_inflation_temp = industrial_goods_price }
						multiply_temp_variable = { industrial_goods_inflation_temp = industrial_goods_need }

						set_variable = { price_of_goods_index = life_goods_inflation_temp }
						add_to_variable = { price_of_goods_index = everyday_goods_inflation_temp }
						add_to_variable = { price_of_goods_index = luxury_goods_inflation_temp }
						add_to_variable = { price_of_goods_index = services_inflation_temp }
						add_to_variable = { price_of_goods_index = raw_goods_inflation_temp }
						add_to_variable = { price_of_goods_index = industrial_goods_inflation_temp }
						divide_variable = { price_of_goods_index = total_needs_temp }

						if = {
							limit = {
								check_variable = { price_of_goods_index < 0 }
							}
							set_variable = { price_of_goods_index = 0 }
						}

						add_to_array = { price_of_goods_index_array = price_of_goods_index }
						if = {
							limit = {
								check_variable = { price_of_goods_index_array^num > 24 }
							}
							remove_from_array = { array = price_of_goods_index_array index = 0 }
						}
						set_temp_variable = { price_of_goods_index_temp = 0 }
						set_temp_variable = { previous_price_of_goods_index_temp = 0 }
						for_each_loop = {
							array = price_of_goods_index_array
							value = vv
							index = ii
							if = {
								limit = {
									check_variable = { ii < 12 }
								}
								add_to_temp_variable = { previous_price_of_goods_index_temp = vv }
							}
							else = {
								add_to_temp_variable = { price_of_goods_index_temp = vv }
							}
						}
					#
					set_variable = { annual_inflation = price_of_goods_index_temp }
					multiply_variable = { annual_inflation = 100 }
					divide_variable = { annual_inflation = previous_price_of_goods_index_temp }
					subtract_from_variable = { annual_inflation = 100 }
					

					add_to_variable = { PREV.private_factory_amount = private_factory_amount }
					
					#GDP
						#This month's GDP
						set_variable = { gdp_amount = 0 }
						
						set_temp_variable = { gdp_value_temp = life_goods_produced_amount }
						multiply_temp_variable = { gdp_value_temp = life_goods_price }
						add_to_variable = { gdp_amount = gdp_value_temp }
						
						set_temp_variable = { gdp_value_temp = everyday_goods_produced_amount }
						multiply_temp_variable = { gdp_value_temp = everyday_goods_price }
						add_to_variable = { gdp_amount = gdp_value_temp }
						
						set_temp_variable = { gdp_value_temp = luxury_goods_produced_amount }
						multiply_temp_variable = { gdp_value_temp = luxury_goods_price }
						add_to_variable = { gdp_amount = gdp_value_temp }
						
						set_temp_variable = { gdp_value_temp = services_produced_amount }
						multiply_temp_variable = { gdp_value_temp = services_price }
						add_to_variable = { gdp_amount = gdp_value_temp }
						
						set_temp_variable = { gdp_value_temp = raw_goods_produced_amount }
						multiply_temp_variable = { gdp_value_temp = raw_goods_price }
						add_to_variable = { gdp_amount = gdp_value_temp }
						
						set_temp_variable = { gdp_value_temp = industrial_goods_produced_amount }
						multiply_temp_variable = { gdp_value_temp = industrial_goods_price }
						add_to_variable = { gdp_amount = gdp_value_temp }

						add_to_variable = { gdp_amount = pops_rgos_valuable_goods_production }

						divide_variable = { gdp_amount = price_of_goods_index }
						add_to_variable = { PREV.gdp_amount = gdp_amount }

						
						add_to_array = { 
							array = gdp_amount_array
							value = gdp_amount
							index = 0
						}
						if = {
							limit = {
								check_variable = { gdp_amount_array^num > 37 }
							}
							remove_from_array = { array = gdp_amount_array }
						}
					
						set_variable = { gdp_amount_this_year = 0 }
						set_temp_variable = { this_year_months_temp = 0 }
						set_variable = { gdp_amount_last_year = 0 }
						set_temp_variable = { last_year_months_temp = 0 }
						for_each_loop = {
							array = gdp_amount_array
							value = vv
							index = ii
							if = {
								limit = {
									check_variable = { ii < 12 }
								}
								add_to_variable = { gdp_amount_this_year = vv }
								add_to_temp_variable = { this_year_months_temp = 1 }
							}
							else_if = {
								limit = {
									check_variable = { ii < 24 }
								}
								add_to_variable = { gdp_amount_last_year = vv }
								add_to_temp_variable = { last_year_months_temp = 1 }
							}
						}
						divide_variable = { gdp_amount_this_year = this_year_months_temp }
						divide_variable = { gdp_amount_last_year = last_year_months_temp }
						add_to_variable = { PREV.gdp_amount_this_year = gdp_amount_this_year }
						add_to_variable = { PREV.gdp_amount_last_year = gdp_amount_last_year }

						set_variable = { annual_gdp_amount = gdp_amount_this_year }
						multiply_variable = { annual_gdp_amount = 12 }

						set_variable = { annual_gdp_growth = gdp_amount_this_year }
						multiply_variable = { annual_gdp_growth = 100 }
						divide_variable = { annual_gdp_growth = gdp_amount_last_year }
						subtract_from_variable = { annual_gdp_growth = 100 }

						add_to_array = { annual_gdp_amount_array = annual_gdp_amount }
						if = {
							limit = {
								check_variable = { annual_gdp_amount_array^num > 37 }
							}
							remove_from_array = { array = annual_gdp_amount_array index = 0 }
						}
						add_to_variable = { PREV.annual_gdp_amount = annual_gdp_amount }

						set_variable = { gdp_per_capita = annual_gdp_amount }
						set_temp_variable = { pops_amount_temp = pops_amount }
						add_to_temp_variable = { pops_amount_temp = 4 }
						divide_variable = { gdp_per_capita = pops_amount_temp }
					#

					#Industrial Power
						set_variable = { industrial_power = 0 }

						set_temp_variable = { everyday_goods_industrial_power = factory_everyday_goods_production }
						divide_temp_variable = { everyday_goods_industrial_power = global.factory_everyday_goods_base_production }
						set_temp_variable = { luxury_goods_industrial_power = factory_luxury_goods_production }
						divide_temp_variable = { luxury_goods_industrial_power = global.factory_luxury_goods_base_production }
						set_temp_variable = { industrial_goods_industrial_power = factory_industrial_goods_production }
						divide_temp_variable = { industrial_goods_industrial_power = global.factory_industrial_goods_base_production }

						add_to_variable = { industrial_power = everyday_goods_industrial_power }
						add_to_variable = { industrial_power = luxury_goods_industrial_power }
						add_to_variable = { industrial_power = industrial_goods_industrial_power }

						add_to_variable = { PREV.industrial_power = industrial_power }
					#

					#Goods Spending
						#Bought
						add_to_variable = { PREV.life_goods_bought_amount = life_goods_bought_amount }
						add_to_variable = { PREV.life_goods_bought_value = life_goods_bought_value }

						add_to_variable = { PREV.everyday_goods_bought_amount = everyday_goods_bought_amount }
						add_to_variable = { PREV.everyday_goods_bought_value = everyday_goods_bought_value }
						
						add_to_variable = { PREV.luxury_goods_bought_amount = luxury_goods_bought_amount }
						add_to_variable = { PREV.luxury_goods_bought_value = luxury_goods_bought_value }
						
						add_to_variable = { PREV.services_bought_amount = services_bought_amount }
						add_to_variable = { PREV.services_bought_value = services_bought_value }
						
						add_to_variable = { PREV.raw_goods_bought_amount = raw_goods_bought_amount }
						add_to_variable = { PREV.raw_goods_bought_value = raw_goods_bought_value }
						
						add_to_variable = { PREV.industrial_goods_bought_amount = industrial_goods_bought_amount }
						add_to_variable = { PREV.industrial_goods_bought_value = industrial_goods_bought_value }

						#Sold
						add_to_variable = { PREV.life_goods_sold_amount = life_goods_sold_amount }
						add_to_variable = { PREV.life_goods_sold_value = life_goods_sold_value }

						add_to_variable = { PREV.everyday_goods_sold_amount = everyday_goods_sold_amount }
						add_to_variable = { PREV.everyday_goods_sold_value = everyday_goods_sold_value }
						
						add_to_variable = { PREV.luxury_goods_sold_amount = luxury_goods_sold_amount }
						add_to_variable = { PREV.luxury_goods_sold_value = luxury_goods_sold_value }
						
						add_to_variable = { PREV.services_sold_amount = services_sold_amount }
						add_to_variable = { PREV.services_sold_value = services_sold_value }
						
						add_to_variable = { PREV.raw_goods_sold_amount = raw_goods_sold_amount }
						add_to_variable = { PREV.raw_goods_sold_value = raw_goods_sold_value }
						
						add_to_variable = { PREV.industrial_goods_sold_amount = industrial_goods_sold_amount }
						add_to_variable = { PREV.industrial_goods_sold_value = industrial_goods_sold_value }
					#

					#Pop Spending
					add_to_variable = { pops_spending = pops_goods_spending }
					add_to_variable = { PREV.pops_goods_spending = pops_goods_spending }
				#
			}
			set_variable = { national_bank_interest_gain = 0 }
		}


		for_each_scope_loop = {
			array = global.econ_order_array
			#Government Debt
				#How much money can you borrow?
				set_temp_variable = { borrow_limit_temp = national_bank_amount_left_k }
				
				#DOMESTIC INTEREST
				set_variable = { national_debt_domestic_interest = debt_to_national_bank }
				divide_variable = { national_debt_domestic_interest = 100 } #100x as upcoming rate is a % which goes from 0.0 to 100.0
				#Ability to pay AKA Credit Rating
				set_variable = { credit_rating_interest = global.credit_rating_AAA_base_interest_rate } #TODO

				set_temp_variable = { interest_temp = credit_rating_interest }

				#Expensiveness of debt due to scarcity
				add_to_temp_variable = { interest_temp = national_bank_interest_from_scarcity }

				multiply_variable = { national_debt_domestic_interest = interest_temp }
				divide_variable = { national_debt_domestic_interest = 12 } #12x for monthly rate instead of yearly.

				set_variable = { national_debt_foreign_interest = 0 }
				#FOREIGN INTEREST
				for_each_loop = {
					array = debt_to_bank_country
					value = cc
					index = ii
					

					if = {
						limit = {
							NOT = { tag = cc }
						}
						set_temp_variable = { interest_temp = debt_to_bank_interest_rate^ii }
						divide_temp_variable = { interest_temp = 100 }
						multiply_temp_variable = { interest_temp = debt_to_bank_amount^ii }
						divide_temp_variable = { interest_temp = 12 }
						add_to_variable = { cc:national_bank_interest_gain = interest_temp }
						add_to_variable = { national_debt_foreign_interest = interest_temp }
					}
				}


				set_variable = { national_debt_interest = national_debt_domestic_interest }
				add_to_variable = { national_debt_interest = national_debt_foreign_interest }
				subtract_from_variable = { treasury = national_debt_interest }

				#BORROWING
				if = {
					limit = {
						check_variable = { treasury < 0 }
					}

					set_temp_variable = { borrow_money_temp = treasury }
					multiply_temp_variable = { borrow_money_temp = -1 }
					add_to_temp_variable = { borrow_money_temp = 1 }

					set_temp_variable = { country_temp = 0 }

					borrow_money = yes

					if = {
						limit = {
							check_variable = { treasury < 0 }
						}
						#Bankruptcy
					}
				}
			#
			national_debt_update = yes
		}

		#Global Bank
			clear_array = global.global_bank_countries #Sorted by international interest rate
			clear_array = global.global_bank_interest_rate #Sorted by international interest rate

			for_each_scope_loop = {
				array = global.econ_order_array
				#Loops through the global econ array and adds countries to the global bank array, sorting by international interest rate

				if = {
					limit = {
						check_variable = { national_bank_amount_left_k > 10 }
					}
					set_temp_variable = { bb = 0 }
					for_each_loop = {
						array = global.global_bank_countries
						index = ii
						value = country_temp
						break = bb

						if = {
							limit = {
								check_variable = { global.global_bank_interest_rate^ii > national_bank_international_interest_rate }
							}
							add_to_array = { 
								array = global.global_bank_countries 
								value = THIS
								index = ii
							}
							add_to_array = {  
								array = global.global_bank_interest_rate 
								value = national_bank_international_interest_rate
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}

					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { global.global_bank_countries = THIS }
						add_to_array = { global.global_bank_interest_rate = national_bank_international_interest_rate }
					}
				}
			}

		#

		for_each_scope_loop = {
			array = global.econ_order_array

			#National Bank Total Interest
				add_to_variable = { national_bank_interest_gain = national_debt_domestic_interest }
				add_to_variable = { national_bank_money = national_bank_interest_gain }
			#

			#Country Level Stats
				set_variable = { total_factory_amount = num_of_civilian_factories }
				add_to_variable = { total_factory_amount = num_of_military_factories }
				add_to_variable = { total_factory_amount = num_of_naval_factories }
				add_to_variable = { total_factory_amount = private_factory_amount }

				## Goods ##

				#Military Goods Fulfillment
					set_variable = { government_military_goods_percent = 0 }

					set_temp_variable = { gmg = life_goods_government_stockpile }
					multiply_temp_variable = { gmg = 100 }
					divide_temp_variable = { gmg = life_goods_government_demand }
					multiply_temp_variable = { gmg = military_life_goods_demand }
					add_to_variable = { government_military_goods_percent = gmg }

					set_temp_variable = { gmg = everyday_goods_government_stockpile }
					multiply_temp_variable = { gmg = 100 }
					divide_temp_variable = { gmg = everyday_goods_government_demand }
					multiply_temp_variable = { gmg = military_everyday_goods_demand }
					add_to_variable = { government_military_goods_percent = gmg }

					set_temp_variable = { gmg = luxury_goods_government_stockpile }
					multiply_temp_variable = { gmg = 100 }
					divide_temp_variable = { gmg = luxury_goods_government_demand }
					multiply_temp_variable = { gmg = military_luxury_goods_demand }
					add_to_variable = { government_military_goods_percent = gmg }

					set_temp_variable = { gmg = services_government_stockpile }
					multiply_temp_variable = { gmg = 100 }
					divide_temp_variable = { gmg = services_government_demand }
					multiply_temp_variable = { gmg = military_services_demand }
					add_to_variable = { government_military_goods_percent = gmg }

					set_temp_variable = { gmg = raw_goods_government_stockpile }
					multiply_temp_variable = { gmg = 100 }
					divide_temp_variable = { gmg = raw_goods_government_demand }
					multiply_temp_variable = { gmg = military_raw_goods_demand }
					add_to_variable = { government_military_goods_percent = gmg }

					set_temp_variable = { gmg = industrial_goods_government_stockpile }
					multiply_temp_variable = { gmg = 100 }
					divide_temp_variable = { gmg = industrial_goods_government_demand }
					multiply_temp_variable = { gmg = military_industrial_goods_demand }
					add_to_variable = { government_military_goods_percent = gmg }

					set_temp_variable = { tgmgn = military_life_goods_need }
					add_to_temp_variable = { tgmgn = military_everyday_goods_need }
					add_to_temp_variable = { tgmgn = military_luxury_goods_need }
					add_to_temp_variable = { tgmgn = military_services_need }
					add_to_temp_variable = { tgmgn = military_raw_goods_need }
					add_to_temp_variable = { tgmgn = military_industrial_goods_need }

					divide_variable = { government_military_goods_percent = tgmgn }
					round_variable = government_military_goods_percent

				#

				#Projects
					proj_update = yes
					for_each_loop = {
						array = proj_id
						index = pi
						value = pv
						break = pb

						set_temp_variable = { gmg = life_goods_government_stockpile }
						multiply_temp_variable = { gmg = 100 }
						divide_temp_variable = { gmg = life_goods_government_demand }
						multiply_temp_variable = { gmg = proj_life_goods_demand^pi }
						divide_temp_variable = { gmg = 100 }
						add_to_variable = { proj_life_goods_fulfilled^pi = gmg }
						if = {
							limit = {
								check_variable = { proj_life_goods_fulfilled^pi > proj_life_goods_need^pi }
							}
							set_variable = { proj_life_goods_fulfilled^pi = proj_life_goods_need^pi }
						}
						
						set_temp_variable = { gmg = everyday_goods_government_stockpile }
						multiply_temp_variable = { gmg = 100 }
						divide_temp_variable = { gmg = everyday_goods_government_demand }
						multiply_temp_variable = { gmg = proj_everyday_goods_demand^pi }
						divide_temp_variable = { gmg = 100 }
						add_to_variable = { proj_everyday_goods_fulfilled^pi = gmg }
						if = {
							limit = {
								check_variable = { proj_everyday_goods_fulfilled^pi > proj_everyday_goods_need^pi }
							}
							set_variable = { proj_everyday_goods_fulfilled^pi = proj_everyday_goods_need^pi }
						}
						
						set_temp_variable = { gmg = luxury_goods_government_stockpile }
						multiply_temp_variable = { gmg = 100 }
						divide_temp_variable = { gmg = luxury_goods_government_demand }
						multiply_temp_variable = { gmg = proj_luxury_goods_demand^pi }
						divide_temp_variable = { gmg = 100 }
						add_to_variable = { proj_luxury_goods_fulfilled^pi = gmg }
						if = {
							limit = {
								check_variable = { proj_luxury_goods_fulfilled^pi > proj_luxury_goods_need^pi }
							}
							set_variable = { proj_luxury_goods_fulfilled^pi = proj_luxury_goods_need^pi }
						}
						
						set_temp_variable = { gmg = services_government_stockpile }
						multiply_temp_variable = { gmg = 100 }
						divide_temp_variable = { gmg = services_government_demand }
						multiply_temp_variable = { gmg = proj_services_demand^pi }
						divide_temp_variable = { gmg = 100 }
						add_to_variable = { proj_services_fulfilled^pi = gmg }
						if = {
							limit = {
								check_variable = { proj_services_fulfilled^pi > proj_services_need^pi }
							}
							set_variable = { proj_services_fulfilled^pi = proj_services_need^pi }
						}
						
						set_temp_variable = { gmg = raw_goods_government_stockpile }
						multiply_temp_variable = { gmg = 100 }
						divide_temp_variable = { gmg = raw_goods_government_demand }
						multiply_temp_variable = { gmg = proj_raw_goods_demand^pi }
						divide_temp_variable = { gmg = 100 }
						add_to_variable = { proj_raw_goods_fulfilled^pi = gmg }
						if = {
							limit = {
								check_variable = { proj_raw_goods_fulfilled^pi > proj_raw_goods_need^pi }
							}
							set_variable = { proj_raw_goods_fulfilled^pi = proj_raw_goods_need^pi }
						}
						
						set_temp_variable = { gmg = industrial_goods_government_stockpile }
						multiply_temp_variable = { gmg = 100 }
						divide_temp_variable = { gmg = industrial_goods_government_demand }
						multiply_temp_variable = { gmg = proj_industrial_goods_demand^pi }
						divide_temp_variable = { gmg = 100 }
						add_to_variable = { proj_industrial_goods_fulfilled^pi = gmg }
						if = {
							limit = {
								check_variable = { proj_industrial_goods_fulfilled^pi > proj_industrial_goods_need^pi }
							}
							set_variable = { proj_industrial_goods_fulfilled^pi = proj_industrial_goods_need^pi }
						}

						add_to_variable = { proj_time_elapsed^pi = 1 }
					}
					for_loop_effect = {
						start = 0
						end = proj_id^num
						value = proj_index_temp

						# Check if done
						if = {
							limit = {
								check_variable = { proj_life_goods_fulfilled^pi = proj_life_goods_need^pi }
								check_variable = { proj_everyday_goods_fulfilled^pi = proj_everyday_goods_need^pi }
								check_variable = { proj_luxury_goods_fulfilled^pi = proj_luxury_goods_need^pi }
								check_variable = { proj_services_fulfilled^pi = proj_services_need^pi }
								check_variable = { proj_raw_goods_fulfilled^pi = proj_raw_goods_need^pi }
								check_variable = { proj_industrial_goods_fulfilled^pi = proj_industrial_goods_need^pi }
							}
							set_temp_variable = { id_temp = pv }
							proj_done = yes
						}
					}
				#

				calculate_govt_demand = yes
				taxes_update = yes
				spending_update = yes
				## ##

				#Industrial Power
					set_temp_variable = { industrial_power_temp = num_of_civilian_factories }
					multiply_temp_variable = { industrial_power_temp = global.factory_jobs_base_amount }
					divide_temp_variable = { industrial_power_temp = 50 }
					set_temp_variable = { modifier_temp = modifier@production_speed_buildings_factor }
					add_to_temp_variable = { modifier_temp = 1 }
					if = {
						limit = { 
							check_variable = { modifier_temp < 0 }
						}
						set_temp_variable = { modifier_temp = 0 }
					}
					multiply_temp_variable = { industrial_power_temp = modifier_temp }
					add_to_variable = { industrial_power = industrial_power_temp }

					set_temp_variable = { industrial_power_temp = num_of_military_factories }
					multiply_temp_variable = { industrial_power_temp = global.factory_jobs_base_amount }
					divide_temp_variable = { industrial_power_temp = 50 }
					set_temp_variable = { modifier_temp = modifier@industrial_capacity_factory  }
					add_to_temp_variable = { modifier_temp = 1 }
					if = {
						limit = { 
							check_variable = { modifier_temp < 0 }
						}
						set_temp_variable = { modifier_temp = 0 }
					}
					multiply_temp_variable = { industrial_power_temp = modifier_temp }
					add_to_variable = { industrial_power = industrial_power_temp }

					set_temp_variable = { industrial_power_temp = num_of_naval_factories }
					multiply_temp_variable = { industrial_power_temp = global.factory_jobs_base_amount }
					divide_temp_variable = { industrial_power_temp = 50 }
					set_temp_variable = { modifier_temp = modifier@industrial_capacity_dockyard  }
					add_to_temp_variable = { modifier_temp = 1 }
					if = {
						limit = { 
							check_variable = { modifier_temp < 0 }
						}
						set_temp_variable = { modifier_temp = 0 }
					}
					multiply_temp_variable = { industrial_power_temp = modifier_temp }
					add_to_variable = { industrial_power = industrial_power_temp }
				#

				#Price of Goods Index
					set_temp_variable = { total_needs_temp = life_goods_need }
					add_to_temp_variable = { total_needs_temp = everyday_goods_need }
					add_to_temp_variable = { total_needs_temp = luxury_goods_need }
					add_to_temp_variable = { total_needs_temp = services_need }
					add_to_temp_variable = { total_needs_temp = raw_goods_need }
					add_to_temp_variable = { total_needs_temp = industrial_goods_need }

					set_temp_variable = { life_goods_inflation_temp = life_goods_price }
					multiply_temp_variable = { life_goods_inflation_temp = life_goods_need }

					set_temp_variable = { everyday_goods_inflation_temp = everyday_goods_price }
					multiply_temp_variable = { everyday_goods_inflation_temp = everyday_goods_need }

					set_temp_variable = { luxury_goods_inflation_temp = luxury_goods_price }
					multiply_temp_variable = { luxury_goods_inflation_temp = luxury_goods_need }

					set_temp_variable = { services_inflation_temp = services_price }
					multiply_temp_variable = { services_inflation_temp = services_need }

					set_temp_variable = { raw_goods_inflation_temp = raw_goods_price }
					multiply_temp_variable = { raw_goods_inflation_temp = raw_goods_need }

					set_temp_variable = { industrial_goods_inflation_temp = industrial_goods_price }
					multiply_temp_variable = { industrial_goods_inflation_temp = industrial_goods_need }

					set_variable = { price_of_goods_index = life_goods_inflation_temp }
					add_to_variable = { price_of_goods_index = everyday_goods_inflation_temp }
					add_to_variable = { price_of_goods_index = luxury_goods_inflation_temp }
					add_to_variable = { price_of_goods_index = services_inflation_temp }
					add_to_variable = { price_of_goods_index = raw_goods_inflation_temp }
					add_to_variable = { price_of_goods_index = industrial_goods_inflation_temp }
					divide_variable = { price_of_goods_index = total_needs_temp }
				#

				#GDP
					divide_variable = { gdp_amount_this_year = 1000 }
					divide_variable = { gdp_amount_last_year = 1000 }

					set_variable = { annual_gdp_growth = gdp_amount_this_year }
					multiply_variable = { annual_gdp_growth = 100 }
					divide_variable = { annual_gdp_growth = gdp_amount_last_year }
					subtract_from_variable = { annual_gdp_growth = 100 }
				#

				#Budget
					set_variable = { actual_revenue = actual_income_tax_revenue }
					add_to_variable = { actual_revenue = actual_tariff_revenue }
					add_to_variable = { actual_revenue = actual_sales_tax_revenue }

					set_variable = { actual_subsidy_expense = actual_infrastructure_spending }
					add_to_variable = { actual_subsidy_expense = actual_trade_subsidy_spending }
					add_to_variable = { actual_subsidy_expense = actual_industrial_spending }

					#Military
						set_temp_variable = { mil_spend_temp = military_life_goods_demand }
						add_to_temp_variable = { mil_spend_temp = conscripted_life_goods_demand }
						divide_temp_variable = { mil_spend_temp = life_goods_government_demand }
						multiply_temp_variable = { mil_spend_temp = actual_life_goods_spending }
						add_to_variable = { actual_military_spending = mil_spend_temp }
						
						set_temp_variable = { mil_spend_temp = military_everyday_goods_demand }
						add_to_temp_variable = { mil_spend_temp = conscripted_everyday_goods_demand }
						divide_temp_variable = { mil_spend_temp = everyday_goods_government_demand }
						multiply_temp_variable = { mil_spend_temp = actual_everyday_goods_spending }
						add_to_variable = { actual_military_spending = mil_spend_temp }
						
						set_temp_variable = { mil_spend_temp = military_luxury_goods_demand }
						add_to_temp_variable = { mil_spend_temp = conscripted_luxury_goods_demand }
						divide_temp_variable = { mil_spend_temp = luxury_goods_government_demand }
						multiply_temp_variable = { mil_spend_temp = actual_luxury_goods_spending }
						add_to_variable = { actual_military_spending = mil_spend_temp }
						
						set_temp_variable = { mil_spend_temp = military_industrial_goods_demand }
						divide_temp_variable = { mil_spend_temp = industrial_goods_government_demand }
						multiply_temp_variable = { mil_spend_temp = actual_industrial_goods_spending }
						add_to_variable = { actual_military_spending = mil_spend_temp }
					#

					#Projects
						set_temp_variable = { project_spend_temp = projects_life_goods_demand }
						divide_temp_variable = { project_spend_temp = life_goods_government_demand }
						if = {
							limit = {
								check_variable = { project_spend_temp > 0 }
							}
							multiply_temp_variable = { project_spend_temp = actual_life_goods_spending }
							add_to_variable = { actual_project_spending = project_spend_temp }
						}
						
						set_temp_variable = { project_spend_temp = projects_everyday_goods_demand }
						divide_temp_variable = { project_spend_temp = everyday_goods_government_demand }
						if = {
							limit = {
								check_variable = { project_spend_temp > 0 }
							}
							multiply_temp_variable = { project_spend_temp = actual_everyday_goods_spending }
							add_to_variable = { actual_project_spending = project_spend_temp }
						}
						
						set_temp_variable = { project_spend_temp = projects_luxury_goods_demand }
						divide_temp_variable = { project_spend_temp = luxury_goods_government_demand }
						if = {
							limit = {
								check_variable = { project_spend_temp > 0 }
							}
							multiply_temp_variable = { project_spend_temp = actual_luxury_goods_spending }
							add_to_variable = { actual_project_spending = project_spend_temp }
						}
						
						set_temp_variable = { project_spend_temp = projects_services_demand }
						divide_temp_variable = { project_spend_temp = services_government_demand }
						if = {
							limit = {
								check_variable = { project_spend_temp > 0 }
							}
							multiply_temp_variable = { project_spend_temp = actual_services_spending }
							add_to_variable = { actual_project_spending = project_spend_temp }
						}
						
						set_temp_variable = { project_spend_temp = projects_raw_goods_demand }
						divide_temp_variable = { project_spend_temp = raw_goods_government_demand }
						if = {
							limit = {
								check_variable = { project_spend_temp > 0 }
							}
							multiply_temp_variable = { project_spend_temp = actual_raw_goods_spending }
							add_to_variable = { actual_project_spending = project_spend_temp }
						}
						
						set_temp_variable = { project_spend_temp = projects_industrial_goods_demand }
						divide_temp_variable = { project_spend_temp = industrial_goods_government_demand }
						if = {
							limit = {
								check_variable = { project_spend_temp > 0 }
							}
							multiply_temp_variable = { project_spend_temp = actual_industrial_goods_spending }
							add_to_variable = { actual_project_spending = project_spend_temp }
						}

						add_to_variable = { actual_construction_spending = actual_project_spending }
					#

					set_variable = { actual_spending = actual_subsidy_expense }
					add_to_variable = { actual_spending = actual_construction_spending }
					add_to_variable = { actual_spending = national_debt_interest }
					add_to_variable = { actual_spending = actual_administration_spending }
					add_to_variable = { actual_spending = actual_military_spending }

					set_variable = { net_budget = actual_revenue }
					subtract_from_variable = { net_budget = actual_spending }

					set_variable = { debt_to_gdp_ratio = national_debt }
					divide_variable = { debt_to_gdp_ratio = annual_gdp_amount }
					divide_variable = { debt_to_gdp_ratio = price_of_goods_index }
				#
			#

			clear_array = factory_everyday_goods_investment_interest_array
			clear_array = factory_everyday_goods_investment_state_array
			every_controlled_state = {
				create_pie_chart_pop_type = yes
				create_state_gdp_graph = yes
				add_to_variable = { update_state_econ_window = 1 }

				#Industrial Investment
					industrial_investment_calc = yes
				#

				if = {
					limit = {
						check_variable = { global.highest_state_gdp < annual_gdp_amount }
					}
					set_variable = { global.highest_state_gdp = annual_gdp_amount }
				}
				if = {
					limit = {
						check_variable = { global.highest_state_gdp_c < gdp_per_capita }
					}
					set_variable = { global.highest_state_gdp_c = gdp_per_capita }
				}
			}
			force_update_map_mode = yes

			#Adding to Global
				add_to_variable = { global.life_goods_supply = life_goods_supply }
				add_to_variable = { global.life_goods_produced_amount = life_goods_produced_amount }

				add_to_variable = { global.everyday_goods_supply = everyday_goods_supply }
				add_to_variable = { global.everyday_goods_produced_amount = everyday_goods_produced_amount }

				add_to_variable = { global.luxury_goods_supply = luxury_goods_supply }
				add_to_variable = { global.luxury_goods_produced_amount = luxury_goods_produced_amount }

				add_to_variable = { global.services_supply = services_supply }
				add_to_variable = { global.services_produced_amount = services_produced_amount }

				add_to_variable = { global.raw_goods_supply = raw_goods_supply }
				add_to_variable = { global.raw_goods_produced_amount = raw_goods_produced_amount }

				add_to_variable = { global.industrial_goods_supply = industrial_goods_supply }
				add_to_variable = { global.industrial_goods_produced_amount = industrial_goods_produced_amount }

				add_to_variable = { global.life_goods_demand = life_goods_demand }
				add_to_variable = { global.everyday_goods_demand = everyday_goods_demand }
				add_to_variable = { global.luxury_goods_demand = luxury_goods_demand }
				add_to_variable = { global.services_demand = services_demand }
				add_to_variable = { global.raw_goods_demand = raw_goods_demand }
				add_to_variable = { global.industrial_goods_demand = industrial_goods_demand }

				add_to_variable = { global.life_goods_need = life_goods_need }
				add_to_variable = { global.everyday_goods_need = everyday_goods_need }
				add_to_variable = { global.luxury_goods_need = luxury_goods_need }
				add_to_variable = { global.services_need = services_need }
				add_to_variable = { global.raw_goods_need = raw_goods_need }
				add_to_variable = { global.industrial_goods_need = industrial_goods_need }
			#
			global_bank_update = yes
			if = {
				limit = {
					is_ai = no
				}
				update_global_trade_display = yes
				update_new_trade_route = yes
			}

			debug_difference_in_total_money_country = yes
		}

		calculate_global_trade_supply = yes

		calculate_total_money_global = yes

		random_country = {
			add_to_variable = { global.month = 1 }
		}
	}
    
	reset = {
		#Global Vars
			set_variable = { global.month = 0 }
			set_variable = { global.years_passed = 0 }
			#Pops
				#Defined Vars Default Values
					set_variable = { global.pops_male_female_ratio = 1.01 }
					set_variable = { global.pops_male_workforce_base_participation = 0.55 }
					set_variable = { global.pops_female_workforce_base_participation = 0.05 }
					set_variable = { global.pops_literacy_percentage = 15 }
					set_variable = { global.pops_education_percentage = 1 }
					set_variable = { global.pops_militancy = 20 }

					set_variable = { global.pops_natural_birth_base_rate = 3.0 } #Per year rate
					set_variable = { global.pops_natural_death_base_rate = 2.0 } #Per year rate
					set_variable = { global.pops_accidents_death_base_rate = 0.05 } #Per year rate
					set_variable = { global.pops_crime_death_base_rate = 0.005 } #Per year rate
					set_variable = { global.pops_other_death_base_rate = 0.005 } #Per year rate

					set_variable = { global.pops_maximum_starvation_death_rate = 25.0 } #Per year rate

				#Spending Patterns
					set_variable = { global.pops_artisans_raw_goods_spending = 0.20 }
					set_variable = { global.pops_artisans_raw_goods_spending_max = 0.30 }

					set_variable = { global.pops_life_goods_spending = 0.50 }
					set_variable = { global.pops_everyday_goods_spending = 0.75 }
					set_variable = { global.pops_luxury_goods_spending = 0.50 }
					set_variable = { global.pops_services_spending = 0.6 }
					set_variable = { global.pops_life_goods_spending_max = 0.75 }
					set_variable = { global.pops_everyday_goods_spending_max = 0.9 }
					set_variable = { global.pops_luxury_goods_spending_max = 0.9 }
					set_variable = { global.pops_services_spending_max = 0.90 }

					set_variable = { global.pops_savings_spending = 1 } #How much of their excess money goes into savings?
					set_variable = { global.pops_savings_base_goal = 6 } #How many months of earnings should pops save as a base (Can be affected by a lot of things)

				#Upper Strata
					set_variable = { global.pops_upper_strata_life_goods_base_need = 5 }
					set_variable = { global.pops_upper_strata_everyday_goods_base_need = 20 }
					set_variable = { global.pops_upper_strata_luxury_goods_base_need = 40 }

					#Aristocrats
						set_variable =  { global.aristocrats_percentage = 1 }
						set_variable =  { global.aristocrats_rgo_output_modifier = 0.1 } #At full aristocrats

					#Capitalists
						set_variable =  { global.capitalists_percentage = 0.0 }
						set_variable =  { global.capitalists_factory_raw_goods_input_modifier = -0.05 } #At full capitalists
						set_variable =  { global.capitalists_services_output_modifier = 0.1 } #At full capitalists

				#Middle Strata
					set_variable = { global.pops_middle_strata_life_goods_base_need = 3 }
					set_variable = { global.pops_middle_strata_everyday_goods_base_need = 10 }
					set_variable = { global.pops_middle_strata_luxury_goods_base_need = 2 }

					#Artisans
						set_variable =  { global.artisans_percentage = 20 }
						
						set_variable = { global.pops_artisans_everyday_goods_base_workforce_amount = 0.1 } #The base number of artisans that work on a set of goods. This is so that numbers don't tend to go too low
						set_variable = { global.pops_artisans_everyday_goods_base_production = 32 } #Every 100k artisans
						set_variable = { global.pops_artisans_everyday_goods_raw_goods_base_need = 0.3 }
						
						set_variable = { global.pops_artisans_luxury_goods_base_workforce_amount = 0.25 }
						set_variable = { global.pops_artisans_luxury_goods_base_production = 12 }
						set_variable = { global.pops_artisans_luxury_goods_raw_goods_base_need = 0.3 }
						
						set_variable = { global.pops_artisans_industrial_goods_base_workforce_amount = 0.2 }
						set_variable = { global.pops_artisans_industrial_goods_base_production = 16 }
						set_variable = { global.pops_artisans_industrial_goods_raw_goods_base_need = 0.9 }

					#Specialists
						set_variable =  { global.specialists_percentage = 0.0 }
						set_variable = { global.pops_specialists_production_bonus = 1 }

					#Professionals
						set_variable =  { global.professionals_percentage = 0.0 }
						set_variable = { global.pops_professionals_services_base_production = 24 }

					#Officers
						set_variable =  { global.officers_percentage = 0.5 }

				#Lower Strata
					set_variable = { global.pops_lower_strata_life_goods_base_need = 1 }
					set_variable = { global.pops_lower_strata_everyday_goods_base_need = 0.2 }
					set_variable = { global.pops_lower_strata_luxury_goods_base_need = 0.05 }
					
					#RGOs
						set_variable =  { global.rgos_percentage = 74 }
						
						set_variable = { global.pops_rgos_life_goods_base_workforce_amount = 2 } #Base amount of workers so numbers don't go too low
						set_variable = { global.pops_rgos_life_goods_base_production = 6 } #Every 100k RGOs
						set_variable = { global.pops_rgos_raw_goods_base_workforce_amount = 2 }
						set_variable = { global.pops_rgos_raw_goods_base_production = 4 }
						set_variable = { global.pops_rgos_valuable_goods_base_workforce_amount = 0.5 }
						#set_variable = { global.pops_rgos_valuable_goods_base_production = 10 }

						set_variable = { global.pops_rgos_cash_crops_output_multiplier = 1.2 } #Applies to Life/Raw Goods
						set_variable = { global.pops_rgos_coal_output_multiplier = 1.25 } #Only to Raw
						set_variable = { global.pops_rgos_metals_output_multiplier = 1.33 } #Only to Raw
						set_variable = { global.pops_rgos_hydrocarbons_output_multiplier = 1.25 } #Only to Raw
						
						set_variable = { global.pops_rgos_breadbasket_life_goods_output_multiplier = 2 }
						set_variable = { global.pops_rgos_breadbasket_raw_goods_output_multiplier = 1.2 } #Also applies to Valuable Goods
						set_variable = { global.pops_rgos_farmland_life_goods_output_multiplier = 1.33 }
						set_variable = { global.pops_rgos_farmland_raw_goods_output_multiplier = 1.1 } #Also applies to Valuable Goods
						set_variable = { global.pops_rgos_non_arable_life_goods_output_multiplier = 0.5 }
						set_variable = { global.pops_rgos_non_arable_raw_goods_output_multiplier = 0.9 } #Gets applied twice for raw goods w/ cash crops, also applies to Valuable Goods

						#Valuable Goods
						set_variable = { global.pops_rgos_valuable_goods_untapped_output_multiplier = 25 }
						set_variable = { global.pops_rgos_valuable_goods_plentiful_output_multiplier = 10 }
						set_variable = { global.pops_rgos_valuable_goods_exploited_output_multiplier = 3 }
						set_variable = { global.pops_rgos_valuable_goods_depleted_output_multiplier = 1 }

						set_variable = { global.pops_rgos_valuable_goods_untapped_decay_max = 24 } #How many months until the valuable goods decays?
						set_variable = { global.pops_rgos_valuable_goods_plentiful_decay_max = 240 }
						set_variable = { global.pops_rgos_valuable_goods_exploited_decay_max = 360 }
						set_variable = { global.pops_rgos_valuable_goods_depleted_decay_max = 180 }

						#Mechanization
						set_variable = { global.pops_rgos_mechanization_rgo_size_multiplier = 0.1 } #At full mechanization
						set_variable = { global.pops_rgos_mechanization_rgo_output_multiplier = 20 }
						set_variable = { global.pops_rgos_mechanization_industrial_goods_base_need = 20.0 } #Per 100K RGOs at 100% mechanization
						set_variable = { global.pops_rgos_mechanization_expansion_industrial_goods_base_need = 20.0 } #Per 100K RGOS
						set_variable = { global.pops_rgos_mechanization_expansion_base_speed = 2.0 } #Per 100K RGOs.

					#Craftsmen
						set_variable =  { global.craftsmen_percentage = 0.0 }

					#Clerks
						set_variable =  { global.clerks_percentage = 0.0 }
						set_variable = { global.pops_clerks_services_base_production = 16 }
						set_variable = { global.pops_clerks_base_workforce_amount = 0.1 } #Base amount of workers so numbers don't go too low

					#Soldiers
						set_variable =  { global.soldiers_percentage = 4.5 }

			#
			#Factories
				set_variable = { global.factory_industrial_goods_base_need = 0.075 }

				set_variable = { global.factory_raw_goods_spending = 0.25 } #Minimum Spending
				set_variable = { global.factory_industrial_goods_spending = 0.15 }
				set_variable = { global.factory_raw_goods_spending_max = 0.4 } #Max Spending
				set_variable = { global.factory_industrial_goods_spending_max = 0.33 }

				set_variable = { global.factory_money_limit = 25 } #Per 100k employees and the goods base price

				set_variable = { global.factory_jobs_base_amount = 10 } #Per size, adjusted by the pop size
				set_variable = { global.factory_wages_revenue_percentage = 0.4 }
				set_variable = { global.factory_wages_profit_percentage = 0.25 }
				set_variable = { global.factory_wages_max_money_percentage = 0.02 } #Adjusted by % of employment

				set_variable = { global.factory_economy_of_scale = 1.1 } #Every magnitude of employee count at & above 10k, what production multiplier do you get

				#Everyday Goods Factory
					set_variable = { global.factory_everyday_goods_base_production = 20 } #These are for every 100k employees
					set_variable = { global.factory_everyday_goods_raw_goods_base_need = 0.5 } #Per Good Produced
					#Construction
						set_variable = { global.factory_everyday_goods_construction_industrial_goods_base_need = 60 } #Per 100K Employees per Factory
						set_variable = { global.factory_everyday_goods_construction_base_speed = 4 } #How fast construction is

				#Luxury Goods Factory
					set_variable = { global.factory_luxury_goods_base_production = 10 }
					set_variable = { global.factory_luxury_goods_raw_goods_base_need = 0.5 }
					#Construction
						set_variable = { global.factory_luxury_goods_construction_industrial_goods_base_need = 60 } #Per 100K Employees per Factory
						set_variable = { global.factory_luxury_goods_construction_base_speed = 4 } #How fast construction is

				#Industrial Goods Factory
					set_variable = { global.factory_industrial_goods_base_production = 10 }
					set_variable = { global.factory_industrial_goods_raw_goods_base_need = 1 }
					#Construction
						set_variable = { global.factory_industrial_goods_construction_industrial_goods_base_need = 90 } #Per 100K Employees per Factory
						set_variable = { global.factory_industrial_goods_construction_base_speed = 4 } #How fast construction is

			#
			#Resources
				clear_array = global.resources_array #Used for code
				add_to_array = { global.resources_array = 1 } #Life
				add_to_array = { global.resources_array = 2 } #Everyday
				add_to_array = { global.resources_array = 3 } #Luxury
				add_to_array = { global.resources_array = 4 } #Services
				add_to_array = { global.resources_array = 5 } #Raw
				add_to_array = { global.resources_array = 6 } #Industrial
				
				clear_array = global.factory_resources_array #Used for code
				add_to_array = { global.factory_resources_array = 2 } #Everyday
				add_to_array = { global.factory_resources_array = 3 } #Luxury
				add_to_array = { global.factory_resources_array = 6 } #Industrial

				set_variable = { global.base_transport_cost_divisor = 250 } #How much to divide distance_to@state to get the transport cost for state to state trade.
				set_variable = { global.base_shipping_cost_divisor = 400 } #How much to divide distance_to@state to get the shipping cost for country to country trade.
				
				set_variable = { global.price_bound_factor = 5 }
				#Life Goods
					set_variable = { global.life_goods_price_l = 0.2 }
					set_variable = { global.life_goods_price_u = 5 }
					set_variable = { global.life_goods_price = 1 }
					set_variable = { global.life_goods_base_price = 1 }
				#Everyday Goods
					set_variable = { global.everyday_goods_price_l = 0.2 }
					set_variable = { global.everyday_goods_price_u = 5 }
					set_variable = { global.everyday_goods_price = 2 }
					set_variable = { global.everyday_goods_base_price = 2 }
				#Luxury Goods
					set_variable = { global.luxury_goods_price_l = 0.2 }
					set_variable = { global.luxury_goods_price_u = 5 }
					set_variable = { global.luxury_goods_price = 4 }
					set_variable = { global.luxury_goods_base_price = 4 }
				#Services
					set_variable = { global.services_price_l = 0.2 }
					set_variable = { global.services_price_u = 5 }
					set_variable = { global.services_price = 4 }
					set_variable = { global.services_base_price = 4 }
				#Raw Goods
					set_variable = { global.raw_goods_price_l = 0.2 }
					set_variable = { global.raw_goods_price_u = 5 }
					set_variable = { global.raw_goods_price = 0.5 }
					set_variable = { global.raw_goods_base_price = 0.5 }
				#Industrial Goods
					set_variable = { global.industrial_goods_price_l = 0.2 }
					set_variable = { global.industrial_goods_price_u = 5 }
					set_variable = { global.industrial_goods_price = 2 }
					set_variable = { global.industrial_goods_base_price = 2 }
			#
			#Infrastructure
				set_variable = { global.infrastructure_industrial_goods_base_need = 0.0 } #Per level
				set_variable = { global.infrastructure_industrial_goods_base_need_increase_per_level = 0.005 }
				set_variable = { global.infrastructure_industrial_goods_base_need_squared = 0.005 } #level^2 * this
				set_variable = { global.infrastructure_industrial_goods_base_need_cubed = 0.001 } #level^3 * this

				set_variable = { global.infrastructure_construction_industrial_goods_base_need = 40 } #Per level
				set_variable = { global.infrastructure_construction_industrial_goods_base_need_increase_per_level = 4 } #Per level
				set_variable = { global.infrastructure_construction_base_speed = 5 } #How fast construction is

				set_variable = { global.infrastructure_rgo_output_modifier = 0.025 } #per level
				set_variable = { global.infrastructure_factory_throughput_modifier = 0.025 } #per level
				set_variable = { global.infrastructure_build_cost_modifier = -0.01 } #per level
				set_variable = { global.infrastructure_transport_cost_multiplier = 0.95 } #per level

				set_variable = { global.infrastructure_crumbling_threshold = 0.25 } #Below this % fulfillment of industrial goods, infrastructure_crumbling_ticks increases by 1. If above, it is reduced by 1
				set_variable = { global.infrastructure_crumbling_ticks_bar = 36 } #How many ticks is needed until you lose an infra

			#
			#State Categories
			#
			#Governments
				#Military
					#Army
					set_variable = { global.infantry_base_life_goods_need = 0.2 } #Per Battalion
					set_variable = { global.infantry_base_everyday_goods_need = 0.08 }
					set_variable = { global.infantry_base_luxury_goods_need = 0.02 }
					set_variable = { global.infantry_base_industrial_goods_need = 0 }
					
					set_variable = { global.militia_base_life_goods_need = 0.1 }
					set_variable = { global.militia_base_everyday_goods_need = 0.02 }
					set_variable = { global.militia_base_luxury_goods_need = 0 }
					set_variable = { global.militia_base_industrial_goods_need = 0 }
					
					set_variable = { global.artillery_base_life_goods_need = 0.12 }
					set_variable = { global.artillery_base_everyday_goods_need = 0.08 }
					set_variable = { global.artillery_base_luxury_goods_need = 0.02 }
					set_variable = { global.artillery_base_industrial_goods_need = 0.04 }
					
					set_variable = { global.cavalry_base_life_goods_need = 0.2 }
					set_variable = { global.cavalry_base_everyday_goods_need = 0.12 }
					set_variable = { global.cavalry_base_luxury_goods_need = 0.04 }
					set_variable = { global.cavalry_base_industrial_goods_need = 0 }
					
					set_variable = { global.mobile_base_life_goods_need = 0.2 }
					set_variable = { global.mobile_base_everyday_goods_need = 0.12 }
					set_variable = { global.mobile_base_luxury_goods_need = 0.04 }
					set_variable = { global.mobile_base_industrial_goods_need = 0.06 }
					
					set_variable = { global.armor_base_life_goods_need = 0.2 }
					set_variable = { global.armor_base_everyday_goods_need = 0.12 }
					set_variable = { global.armor_base_luxury_goods_need = 0.04 }
					set_variable = { global.armor_base_industrial_goods_need = 0.4 }
					
					set_variable = { global.robotic_base_life_goods_need = 0.04 }
					set_variable = { global.robotic_base_everyday_goods_need = 0.16 }
					set_variable = { global.robotic_base_luxury_goods_need = 0.08 }
					set_variable = { global.robotic_base_industrial_goods_need = 1.0 }
					
					set_variable = { global.support_base_life_goods_need = 0.06 } #Per Support Company
					set_variable = { global.support_base_everyday_goods_need = 0.03 }
					set_variable = { global.support_base_luxury_goods_need = 0 }
					set_variable = { global.support_base_industrial_goods_need = 0 }
					
					#Navy
					set_variable = { global.screen_base_life_goods_need = 0.06 } #Per Ship
					set_variable = { global.screen_base_everyday_goods_need = 0.015 }
					set_variable = { global.screen_base_luxury_goods_need = 0.006 }
					set_variable = { global.screen_base_industrial_goods_need = 0.006 }
					
					set_variable = { global.capital_base_life_goods_need = 0.24 }
					set_variable = { global.capital_base_everyday_goods_need = 0.06 }
					set_variable = { global.capital_base_luxury_goods_need = 0.015 }
					set_variable = { global.capital_base_industrial_goods_need = 0.003 }
					
					set_variable = { global.submarine_base_life_goods_need = 0.05 }
					set_variable = { global.submarine_base_everyday_goods_need = 0.015 }
					set_variable = { global.submarine_base_luxury_goods_need = 0.003 }
					set_variable = { global.submarine_base_industrial_goods_need = 0.03 }
					
					#Airforce
					set_variable = { global.deployed_planes_base_life_goods_need = 0.005 } #Per Deployed Plane
					set_variable = { global.deployed_planes_base_everyday_goods_need = 0.005 }
					set_variable = { global.deployed_planes_base_luxury_goods_need = 0.001 }
					set_variable = { global.deployed_planes_base_industrial_goods_need = 0.003 }

					#Other
					set_variable = { global.conscripted_base_life_goods_need = 3 } #Per 100K
					set_variable = { global.conscripted_base_everyday_goods_need = 1 }
					set_variable = { global.conscripted_base_luxury_goods_need = 0.1 }
					set_variable = { global.conscripted_payroll_multiplier = 2 } #The multiple of the above expense that goes directly to pops

					###############################################################
					# set_variable = { global.infantry_base_life_goods_need = 0.0 } #Per Battalion
					# set_variable = { global.infantry_base_everyday_goods_need = 0.0 }
					# set_variable = { global.infantry_base_luxury_goods_need = 0.0 }
					# set_variable = { global.infantry_base_industrial_goods_need = 0 }
					
					# set_variable = { global.militia_base_life_goods_need = 0.0 }
					# set_variable = { global.militia_base_everyday_goods_need = 0.0 }
					# set_variable = { global.militia_base_luxury_goods_need = 0 }
					# set_variable = { global.militia_base_industrial_goods_need = 0 }
					
					# set_variable = { global.artillery_base_life_goods_need = 0.0 }
					# set_variable = { global.artillery_base_everyday_goods_need = 0.0 }
					# set_variable = { global.artillery_base_luxury_goods_need = 0.0 }
					# set_variable = { global.artillery_base_industrial_goods_need = 0.0 }
					
					# set_variable = { global.cavalry_base_life_goods_need = 0.0 }
					# set_variable = { global.cavalry_base_everyday_goods_need = 0.0 }
					# set_variable = { global.cavalry_base_luxury_goods_need = 0.0 }
					# set_variable = { global.cavalry_base_industrial_goods_need = 0 }
					
					# set_variable = { global.mobile_base_life_goods_need = 0.0 }
					# set_variable = { global.mobile_base_everyday_goods_need = 0.0 }
					# set_variable = { global.mobile_base_luxury_goods_need = 0.0 }
					# set_variable = { global.mobile_base_industrial_goods_need = 0.0 }
					
					# set_variable = { global.armor_base_life_goods_need = 0.0 }
					# set_variable = { global.armor_base_everyday_goods_need = 0.0 }
					# set_variable = { global.armor_base_luxury_goods_need = 0.0 }
					# set_variable = { global.armor_base_industrial_goods_need = 0.0 }
					
					# set_variable = { global.robotic_base_life_goods_need = 0.0 }
					# set_variable = { global.robotic_base_everyday_goods_need = 0.0 }
					# set_variable = { global.robotic_base_luxury_goods_need = 0.0 }
					# set_variable = { global.robotic_base_industrial_goods_need = 0.0 }
					
					# set_variable = { global.support_base_life_goods_need = 0.0 } #Per Support Company
					# set_variable = { global.support_base_everyday_goods_need = 0.0 }
					# set_variable = { global.support_base_luxury_goods_need = 0 }
					# set_variable = { global.support_base_industrial_goods_need = 0 }
					
					# #Navy
					# set_variable = { global.screen_base_life_goods_need = 0.0 } #Per Ship
					# set_variable = { global.screen_base_everyday_goods_need = 0.0 }
					# set_variable = { global.screen_base_luxury_goods_need = 0.0 }
					# set_variable = { global.screen_base_industrial_goods_need = 0.0 }
					
					# set_variable = { global.capital_base_life_goods_need = 0.0 }
					# set_variable = { global.capital_base_everyday_goods_need = 0.0 }
					# set_variable = { global.capital_base_luxury_goods_need = 0.0 }
					# set_variable = { global.capital_base_industrial_goods_need = 0.0 }
					
					# set_variable = { global.submarine_base_life_goods_need = 0.0 }
					# set_variable = { global.submarine_base_everyday_goods_need = 0.0 }
					# set_variable = { global.submarine_base_luxury_goods_need = 0.0 }
					# set_variable = { global.submarine_base_industrial_goods_need = 0.0 }
					
					# #Airforce
					# set_variable = { global.deployed_planes_base_life_goods_need = 0.0 } #Per Deployed Plane
					# set_variable = { global.deployed_planes_base_everyday_goods_need = 0.0 }
					# set_variable = { global.deployed_planes_base_luxury_goods_need = 0.0}
					# set_variable = { global.deployed_planes_base_industrial_goods_need = 0.0 }

					# #Other
					# set_variable = { global.conscripted_base_life_goods_need = 0 } #Per 100K
					# set_variable = { global.conscripted_base_everyday_goods_need = 0 }
					# set_variable = { global.conscripted_base_luxury_goods_need = 0.0 }
					# set_variable = { global.conscripted_payroll_multiplier = 0 } #The multiple of the above expense that goes directly to pops
				#
				#Projects
					clear_array = proj_id
					clear_array = proj_relative
					clear_array = proj_estimated_cost
					clear_array = proj_estimated_monthly_cost
					clear_array = proj_estimated_complete_time
					clear_array = proj_time_elapsed
					clear_array = proj_life_goods_need
					clear_array = proj_life_goods_fulfilled
					clear_array = proj_life_goods_demand
					clear_array = proj_life_goods_build_speed
					clear_array = proj_everyday_goods_need
					clear_array = proj_everyday_goods_fulfilled
					clear_array = proj_everyday_goods_demand
					clear_array = proj_everyday_goods_build_speed
					clear_array = proj_luxury_goods_need
					clear_array = proj_luxury_goods_fulfilled
					clear_array = proj_luxury_goods_demand
					clear_array = proj_luxury_goods_build_speed
					clear_array = proj_services_need
					clear_array = proj_services_fulfilled
					clear_array = proj_services_demand
					clear_array = proj_services_build_speed
					clear_array = proj_raw_goods_need
					clear_array = proj_raw_goods_fulfilled
					clear_array = proj_raw_goods_demand
					clear_array = proj_raw_goods_build_speed
					clear_array = proj_industrial_goods_need
					clear_array = proj_industrial_goods_fulfilled
					clear_array = proj_industrial_goods_demand
					clear_array = proj_industrial_goods_build_speed
				#

				#set_variable = { global.administration_base_expense = 0.5 } #Percentage (from 0.0 to 100.0) of pop earnings that are needed for basic administration
				set_variable = { global.administration_population_expense = 100 } #Below this population amount (in thousands), administration becomes more expensive. Should not be 0
				set_variable = { global.administration_population_expense_modifier = 2 } #Maximum modifier of admin costs when population is 0

				set_variable = { global.default_interest_rate = 3.0 } #Percent per year - Default national bank interest rate for loans to pops/corporations
				set_variable = { global.loan_scarcity_rate = 5.0 } #Percent per year - How much interest should be added when you use up all loans you can get
				set_variable = { global.base_international_interest_rate = 1.0 } #The additional rate that entities pay on getting loans from a foreign national bank
				set_variable = { global.loan_scarcity_increase_willingness = 0.25 } #When doing the autoborrow, how much scarcity increase is willing to be tolerated?

				#Credit Ratings & Interest Rates for Each
					#NOTE - Credit Rating is determined by the system.
					#	  - Actual interest rate can be higher b/c of lack of available funds
					#AAA - An obligor has EXTREMELY STRONG capacity to meet its financial commitments.
					set_variable = { global.credit_rating_AAA_base_interest_rate = 1.75 }
					#AA - An obligor has VERY STRONG capacity to meet its financial commitments. It differs from the highest-rated obligors only to a small degree.
					set_variable = { global.credit_rating_AA_base_interest_rate = 2.0 }
					#A - An obligor has STRONG capacity to meet its financial commitments 
					set_variable = { global.credit_rating_A_base_interest_rate = 2.25 }
					#BBB - An obligor has ADEQUATE capacity to meet its financial commitments
					set_variable = { global.credit_rating_BBB_base_interest_rate = 2.5 }
					#BB - An obligor is LESS VULNERABLE in the near term than other lower-rated obligors
					set_variable = { global.credit_rating_BB_base_interest_rate = 2.75 }
					#B - An obligor is MORE VULNERABLE than the obligors rated 'BB', but the obligor currently has the capacity to meet its financial commitments.
					set_variable = { global.credit_rating_B_base_interest_rate = 3.0 }
					#CCC - An obligor is CURRENTLY VULNERABLE, and is dependent upon favourable business, financial, and economic conditions to meet its financial commitments.
					set_variable = { global.credit_rating_CCC_base_interest_rate = 3.25 }
					#CC - An obligor is CURRENTLY HIGHLY-VULNERABLE.
					set_variable = { global.credit_rating_CC_base_interest_rate = 3.5 }
					#SD - An obligor has failed to pay one or more of its financial obligations (rated or unrated) when it became due. Sovereign Default / Bankruptcy
					set_variable = { global.credit_rating_SD_base_interest_rate = 10.0 }
				#
			#
		#

		#Setup Projects
			clear_array = global.proj_id
			clear_array = global.proj_life_goods_base_need
			clear_array = global.proj_life_goods_base_build_speed
			clear_array = global.proj_everyday_goods_base_need
			clear_array = global.proj_everyday_goods_base_build_speed
			clear_array = global.proj_luxury_goods_base_need
			clear_array = global.proj_luxury_goods_base_build_speed
			clear_array = global.proj_services_base_need
			clear_array = global.proj_services_base_build_speed
			clear_array = global.proj_raw_goods_base_need
			clear_array = global.proj_raw_goods_base_build_speed
			clear_array = global.proj_industrial_goods_base_need
			clear_array = global.proj_industrial_goods_base_build_speed
			clear_array = global.proj_repeatable
			clear_array = global.proj_relative
			proj_setup = yes
		#

		clear_array = global.econ_order_array

		#Resources
			clear_array = global.raw_goods_states
			clear_array = global.valuable_goods_states
			clear_array = global.coal_states
			clear_array = global.cash_crops_states
			clear_array = global.metals_states
			clear_array = global.hydrocarbons_states
			clear_array = global.breadbasket_states
			clear_array = global.farmlands_states
			clear_array = global.non_arable_states

			set_historical_state_rgos = yes #States

			for_each_scope_loop = {
				array = global.raw_goods_states
				set_state_flag = pops_rgos_raw_goods_flag
			}
			for_each_scope_loop = {
				array = global.valuable_goods_states
				set_state_flag = pops_rgos_valuable_goods_flag
				
				if = {
					limit = {
						has_state_flag = pops_rgos_valuable_goods_untapped_flag
					}
					set_variable = { pops_rgos_valuable_goods_decay = global.pops_rgos_valuable_goods_untapped_decay_max }
				}
				if = {
					limit = {
						has_state_flag = pops_rgos_valuable_goods_plentiful_flag
					}
					set_variable = { pops_rgos_valuable_goods_decay = global.pops_rgos_valuable_goods_plentiful_decay_max }
				}
				if = {
					limit = {
						NOT = {
							OR = {
								has_state_flag = pops_rgos_valuable_goods_untapped_flag
								has_state_flag = pops_rgos_valuable_goods_plentiful_flag
								has_state_flag = pops_rgos_valuable_goods_depleted_flag
							}
						}
					}
					set_variable = { pops_rgos_valuable_goods_decay = global.pops_rgos_valuable_goods_exploited_decay_max }
				}
				if = {
					limit = {
						has_state_flag = pops_rgos_valuable_goods_depleted_flag
					}
					set_variable = { pops_rgos_valuable_goods_decay = global.pops_rgos_valuable_goods_depleted_decay_max }
				}
			}
			for_each_scope_loop = {
				array = global.cash_crops_states
				set_state_flag = pops_rgos_cash_crops_flag
			}
			for_each_scope_loop = {
				array = global.coal_states
				set_state_flag = pops_rgos_coal_flag
			}
			for_each_scope_loop = {
				array = global.metals_states
				set_state_flag = pops_rgos_metals_flag
			}
			for_each_scope_loop = {
				array = global.hydrocarbons_states
				set_state_flag = pops_rgos_hydrocarbons_flag
			}
			for_each_scope_loop = {
				array = global.non_arable_states
				set_state_flag = pops_rgos_non_arable_flag
			}
			for_each_scope_loop = {
				array = global.farmlands_states
				set_state_flag = pops_rgos_farmlands_flag
			}
			for_each_scope_loop = {
				array = global.breadbasket_states
				set_state_flag = pops_rgos_breadbasket_flag
			}
		#

		#Country Setup
		every_country = {

			calibrate_tech_bonuses = yes

			#Goods
				set_variable = { life_goods_base_price = global.life_goods_base_price }
				set_variable = { life_goods_price = life_goods_base_price }

				set_variable = { everyday_goods_base_price = global.everyday_goods_base_price }
				set_variable = { everyday_goods_price = everyday_goods_base_price }
				
				set_variable = { luxury_goods_base_price = global.luxury_goods_base_price }
				set_variable = { luxury_goods_price = luxury_goods_base_price }
				
				set_variable = { services_base_price = global.services_base_price }
				set_variable = { services_price = services_base_price }
				
				set_variable = { raw_goods_base_price = global.raw_goods_base_price }
				set_variable = { raw_goods_price = raw_goods_base_price }
				
				set_variable = { industrial_goods_base_price = global.industrial_goods_base_price }
				set_variable = { industrial_goods_price = industrial_goods_base_price }
			#
			#Pops
				#Male/Female Workforce Participation
					if = {
						limit = {
							NOT = { has_variable = pops_male_workforce_participation }
						}
						set_variable = { pops_male_workforce_participation = global.pops_male_workforce_base_participation }
					}
					if = {
						limit = {
							NOT = { has_variable = pops_female_workforce_participation }
						}
						set_variable = { pops_female_workforce_participation = global.pops_female_workforce_base_participation }
					}
				#
			#

			set_variable = { treasury = 0 }
			set_variable = { debt_to_national_bank = 0 }
			clear_array = debt_to_bank_country
			clear_array = debt_to_bank_amount
			clear_array = debt_to_bank_interest_rate
			clear_array = money_lent_country
			clear_array = money_lent_amount

			set_variable = { national_bank_money = 0 }
			set_variable = { national_bank_amount_k = 0 }
			set_variable = { national_bank_amount_left_k = 0 }
			set_variable = { national_bank_amount_lent_k = 0 }
			set_variable = { national_bank_interest_rate = global.default_interest_rate }
			set_variable = { national_bank_interest_income = 0 }

			set_variable = { income_tax_upper_strata_percentage = 0 }
			set_variable = { income_tax_middle_strata_percentage = 0 }
			set_variable = { income_tax_lower_strata_percentage = 0 }
			set_variable = { export_tariff_percentage = 0 }
			set_variable = { import_tariff_percentage = 25 }
			set_variable = { sales_tax_percentage = 25 }

			set_variable = { military_spending_percentage = 0 }
			set_variable = { intelligence_spending_percentage = 100 }
			set_variable = { construction_spending_percentage = 100 }
			

			reset_supply = yes
			reset_demand = yes

			for_each_loop = {
				array = life_goods_global_trade_country_array
				value = c_temp

				clear_variable = life_goods_global_trade_amount_@var:country_temp
				clear_variable = life_goods_global_trade_value_@var:country_temp
				clear_variable = life_goods_global_trade_lock_type_@var:country_temp
			}
			clear_array = life_goods_global_trade_country_array

			#State Setup
			every_controlled_state = {
				#Reset
					set_variable = { life_goods_trade_amount = 0 } #Positive: Goods Bought / Negative: Goods Sold - Note, this only applies in this effect. It's always positive elsewhere.
					set_variable = { life_goods_trade_value = 0 } #Positive: Amount Recieved / Negative: Amount Paid

					set_variable = { everyday_goods_trade_amount = 0 }
					set_variable = { everyday_goods_trade_value = 0 }
					
					set_variable = { luxury_goods_trade_amount = 0 }
					set_variable = { luxury_goods_trade_value = 0 }
					
					set_variable = { services_trade_amount = 0 }
					set_variable = { services_trade_value = 0 }
					
					set_variable = { raw_goods_trade_amount = 0 }
					set_variable = { raw_goods_trade_value = 0 }
					
					set_variable = { industrial_goods_trade_amount = 0 }
					set_variable = { industrial_goods_trade_value = 0 }

					set_variable = { pops_earnings = 0 }
					set_variable = { pops_spending = 0 }
					set_variable = { pops_goods_spending = 0 }
					set_variable = { pops_savings = 0 }
					set_variable = { pops_debt = 0 }
					
					set_variable = { factory_everyday_goods_sold = 0 }
					set_variable = { factory_everyday_goods_earnings = 0 }
					set_variable = { factory_everyday_goods_spending = 0 }
					
					set_variable = { factory_luxury_goods_sold = 0 }
					set_variable = { factory_luxury_goods_earnings = 0 }
					set_variable = { factory_luxury_goods_spending = 0 }
					
					set_variable = { factory_industrial_goods_sold = 0 }
					set_variable = { factory_industrial_goods_earnings = 0 }
					set_variable = { factory_industrial_goods_spending = 0 }

					set_variable = { pops_life_goods_fulfilled_percentage = 1 }
					set_variable = { pops_everyday_goods_fulfilled_percentage = 1 }
					set_variable = { pops_luxury_goods_fulfilled_percentage = 1 }
					set_variable = { pops_services_fulfilled_percentage = 1 }

					set_variable = { pops_annual_life_goods_fulfilled_percentage = 1 }
					set_variable = { pops_annual_everyday_goods_fulfilled_percentage = 1 }
					set_variable = { pops_annual_luxury_goods_fulfilled_percentage = 1 }
					set_variable = { pops_annual_services_goods_fulfilled_percentage = 1 }

					set_variable = { pops_artisans_raw_goods_fulfilled_percentage = 1 }

					set_variable = { factory_everyday_goods_raw_goods_fulfilled_percentage = 1 }
					set_variable = { factory_luxury_goods_raw_goods_fulfilled_percentage = 1 }
					set_variable = { factory_industrial_goods_raw_goods_fulfilled_percentage = 1 }
					set_variable = { factory_everyday_goods_industrial_goods_fulfilled_percentage = 1 }
					set_variable = { factory_luxury_goods_industrial_goods_fulfilled_percentage = 1 }
					set_variable = { factory_industrial_goods_industrial_goods_fulfilled_percentage = 1 }

					set_variable = { infrastructure_industrial_goods_fulfilled_percentage = 1 }
					set_variable = { infrastructure_crumbling_ticks = 0 }

					set_variable = { pops_rgos_mechanization_industrial_goods_fulfilled_percentage = 0 }
					set_variable = { pops_rgos_mechanization_expansion_industrial_goods_fulfillment = 0 }

					clr_state_flag = factory_everyday_goods_in_construction
					clr_state_flag = factory_everyday_goods_construction_government_subsidized
					set_variable = { factory_everyday_goods_construction_investment_money = 0 }
					set_variable = { factory_everyday_goods_construction_industrial_goods_need = 0 }

					clr_state_flag = factory_luxury_goods_in_construction
					clr_state_flag = factory_luxury_goods_construction_government_subsidized
					set_variable = { factory_luxury_goods_construction_investment_money = 0 }
					set_variable = { factory_luxury_goods_construction_industrial_goods_need = 0 }

					clr_state_flag = factory_industrial_goods_in_construction
					clr_state_flag = factory_industrial_goods_construction_government_subsidized
					set_variable = { factory_industrial_goods_construction_investment_money = 0 }
					set_variable = { factory_industrial_goods_construction_industrial_goods_need = 0 }

					clr_state_flag = infrastructure_in_construction
					clr_state_flag = infrastructure_construction_government_subsidized
					set_variable = { infrastructure_construction_investment_money = 0 }
					set_variable = { infrastructure_construction_industrial_goods_need = 0 }

					set_variable = { rgos_mechanization_percentage = 0 }
					set_variable = { pops_rgos_mechanization_expansion_industrial_goods_need = 0 }

					set_variable = { rgos_mechanization_rgo_max_size_multiplier = 1 }
					set_variable = { rgos_mechanization_rgo_output_multiplier = 1 }

					clear_array = annual_gdp_amount_array

				#

				set_variable = { infrastructure_max_level = PREV.infrastructure_max_level }

				#State Categories
					if = {
						limit = {
							has_state_category = megalopolis
						}
						set_variable = { aristocrats_percentage = 0.10 }
						set_variable = { capitalists_percentage = 1.50 }
						set_variable = { artisans_percentage = 15.00 }
						set_variable = { specialists_percentage = 12.00 }
						set_variable = { professionals_percentage = 11.00 }
						set_variable = { officers_percentage = 0.20 }
						set_variable = { rgos_percentage = 8.00 }
						set_variable = { craftsmen_percentage = 27.5 }
						set_variable = { clerks_percentage = 22.00 }
						set_variable = { soldiers_percentage = 2.70 }
					}
					else_if = {
						limit = {
							has_state_category = metropolis
						}
						set_variable = { aristocrats_percentage = 0.20 }
						set_variable = { capitalists_percentage = 1.10 }
						set_variable = { artisans_percentage = 18.00 }
						set_variable = { specialists_percentage = 10.5 }
						set_variable = { professionals_percentage = 7.00 }
						set_variable = { officers_percentage = 0.30 }
						set_variable = { rgos_percentage = 13.70 }
						set_variable = { craftsmen_percentage = 26.00 }
						set_variable = { clerks_percentage = 20.00 }
						set_variable = { soldiers_percentage = 3.20 }
					}
					else_if = {
						limit = {
							has_state_category = large_city 
						}
						set_variable = { aristocrats_percentage = 0.40 }
						set_variable = { capitalists_percentage = 0.80 }
						set_variable = { artisans_percentage = 20.00 }
						set_variable = { specialists_percentage = 6.00 }
						set_variable = { professionals_percentage = 4.00 }
						set_variable = { officers_percentage = 0.30 }
						set_variable = { rgos_percentage = 26.90 }
						set_variable = { craftsmen_percentage = 24.00 }
						set_variable = { clerks_percentage = 14.00 }
						set_variable = { soldiers_percentage = 3.60 }
					}
					else_if = {
						limit = {
							has_state_category = city 
						}
						set_variable = { aristocrats_percentage = 0.70 }
						set_variable = { capitalists_percentage = 0.50 }
						set_variable = { artisans_percentage = 15.50 }
						set_variable = { specialists_percentage = 5.00 }
						set_variable = { professionals_percentage = 2.00 }
						set_variable = { officers_percentage = 0.30 }
						set_variable = { rgos_percentage = 45.00 }
						set_variable = { craftsmen_percentage = 17.00 }
						set_variable = { clerks_percentage = 10.00 }
						set_variable = { soldiers_percentage = 4.00 }
					}
					else_if = {
						limit = {
							has_state_category = large_town 
						}
						set_variable = { aristocrats_percentage = 1.20 }
						set_variable = { capitalists_percentage = 0.20 }
						set_variable = { artisans_percentage = 15.00 }
						set_variable = { specialists_percentage = 2.00 }
						set_variable = { professionals_percentage = 1.00 }
						set_variable = { officers_percentage = 0.40 }
						set_variable = { rgos_percentage = 61.00 }
						set_variable = { craftsmen_percentage = 9.00 }
						set_variable = { clerks_percentage = 6.00 }
						set_variable = { soldiers_percentage = 4.20 }
					}
					else_if = {
						limit = {
							has_state_category = town 
						}
						set_variable = { aristocrats_percentage = 1.70 }
						set_variable = { capitalists_percentage = 0.00 }
						set_variable = { artisans_percentage = 10.00 }
						set_variable = { specialists_percentage = 0.00 }
						set_variable = { professionals_percentage = 0.00 }
						set_variable = { officers_percentage = 0.40 }
						set_variable = { rgos_percentage = 76.00 }
						set_variable = { craftsmen_percentage = 3.00 }
						set_variable = { clerks_percentage = 4.50 }
						set_variable = { soldiers_percentage = 4.40 }
					}
					else_if = {
						limit = {
							has_state_category = rural 
						}
						set_variable = { aristocrats_percentage = 2.50 }
						set_variable = { capitalists_percentage = 0.00 }
						set_variable = { artisans_percentage = 5.50 }
						set_variable = { specialists_percentage = 0.00 }
						set_variable = { professionals_percentage = 0.00 }
						set_variable = { officers_percentage = 0.35 }
						set_variable = { rgos_percentage = 84.00 }
						set_variable = { craftsmen_percentage = 0.00 }
						set_variable = { clerks_percentage = 2.00 }
						set_variable = { soldiers_percentage = 3.65 }
					}
					else_if = {
						limit = {
							has_state_category = pastoral 
						}
						set_variable = { aristocrats_percentage = 1.25 }
						set_variable = { capitalists_percentage = 0.00 }
						set_variable = { artisans_percentage = 3.50 }
						set_variable = { specialists_percentage = 0.00 }
						set_variable = { professionals_percentage = 0.00 }
						set_variable = { officers_percentage = 0.25 }
						set_variable = { rgos_percentage = 91.00 }
						set_variable = { craftsmen_percentage = 0.00 }
						set_variable = { clerks_percentage = 1.00 }
						set_variable = { soldiers_percentage = 3.00 }
					}
					else_if = {
						limit = {
							has_state_category = wasteland 
						}
						set_variable = { aristocrats_percentage = 0.50 }
						set_variable = { capitalists_percentage = 0.00 }
						set_variable = { artisans_percentage = 2.00 }
						set_variable = { specialists_percentage = 0.00 }
						set_variable = { professionals_percentage = 0.00 }
						set_variable = { officers_percentage = 0.0 }
						set_variable = { rgos_percentage = 96.00 }
						set_variable = { craftsmen_percentage = 0.00 }
						set_variable = { clerks_percentage = 0.00 }
						set_variable = { soldiers_percentage = 1.50 }
					}
					else = {
						set_variable = { aristocrats_percentage = 2.00 }
						set_variable = { capitalists_percentage = 0.00 }
						set_variable = { artisans_percentage = 6.00 }
						set_variable = { specialists_percentage = 0.00 }
						set_variable = { professionals_percentage = 0.00 }
						set_variable = { officers_percentage = 0.30 }
						set_variable = { rgos_percentage = 86.00 }
						set_variable = { craftsmen_percentage = 0.00 }
						set_variable = { clerks_percentage = 2.00 }
						set_variable = { soldiers_percentage = 3.70 }
					}
				#

				#Pop Setup
					set_variable = { pops_amount = state_population_k }
					set_variable = { pops_money = pops_amount }
					divide_variable = { pops_money = 10 }

					set_variable = { pops_savings = pops_amount }

					#Pop Type Percentages
						#Aristocrats
							if = {
								limit = {
									NOT = { has_variable = aristocrats_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = aristocrats_percentage
										}
										set_variable = { PREV.aristocrats_percentage = aristocrats_percentage }
									}
									else = {
										set_variable = { PREV.aristocrats_percentage = global.aristocrats_percentage }
									}
								}
							}
						#Capitalists
							if = {
								limit = {
									NOT = { has_variable = capitalists_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = capitalists_percentage
										}
										set_variable = { PREV.capitalists_percentage = capitalists_percentage }
									}
									else = {
										set_variable = { PREV.capitalists_percentage = global.capitalists_percentage }
									}
								}
							}
						#Artisans
							if = {
								limit = {
									NOT = { has_variable = artisans_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = artisans_percentage
										}
										set_variable = { PREV.artisans_percentage = artisans_percentage }
									}
									else = {
										set_variable = { PREV.artisans_percentage = global.artisans_percentage }
									}
								}
							}
						#Specialists
							if = {
								limit = {
									NOT = { has_variable = specialists_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = specialists_percentage
										}
										set_variable = { PREV.specialists_percentage = specialists_percentage }
									}
									else = {
										set_variable = { PREV.specialists_percentage = global.specialists_percentage }
									}
								}
							}
						#Professionals
							if = {
								limit = {
									NOT = { has_variable = professionals_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = professionals_percentage
										}
										set_variable = { PREV.professionals_percentage = professionals_percentage }
									}
									else = {
										set_variable = { PREV.professionals_percentage = global.professionals_percentage }
									}
								}
							}
						#Officers
							if = {
								limit = {
									NOT = { has_variable = officers_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = officers_percentage
										}
										set_variable = { PREV.officers_percentage = officers_percentage }
									}
									else = {
										set_variable = { PREV.officers_percentage = global.officers_percentage }
									}
								}
							}
						#RGOs
							if = {
								limit = {
									NOT = { has_variable = rgos_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = rgos_percentage
										}
										set_variable = { PREV.rgos_percentage = rgos_percentage }
									}
									else = {
										set_variable = { PREV.rgos_percentage = global.rgos_percentage }
									}
								}
							}
						#Craftsmen
							if = {
								limit = {
									NOT = { has_variable = craftsmen_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = craftsmen_percentage
										}
										set_variable = { PREV.craftsmen_percentage = craftsmen_percentage }
									}
									else = {
										set_variable = { PREV.craftsmen_percentage = global.craftsmen_percentage }
									}
								}
							}
						#Clerks
							if = {
								limit = {
									NOT = { has_variable = clerks_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = clerks_percentage
										}
										set_variable = { PREV.clerks_percentage = clerks_percentage }
									}
									else = {
										set_variable = { PREV.clerks_percentage = global.clerks_percentage }
									}
								}
							}
						#Soldiers
							if = {
								limit = {
									NOT = { has_variable = soldiers_percentage }
								}
								PREV = {
									if = {
										limit = {
											has_variable = soldiers_percentage
										}
										set_variable = { PREV.soldiers_percentage = soldiers_percentage }
									}
									else = {
										set_variable = { PREV.soldiers_percentage = global.soldiers_percentage }
									}
								}
							}
					#
					#Pops Male to Female Ratio
						if = {
							limit = {
								NOT = { has_variable = pops_male_female_ratio }
							}
							PREV = {
								if = {
									limit = {
										has_variable = pops_male_female_ratio
									}
									set_variable = { PREV.pops_male_female_ratio = pops_male_female_ratio }
								}
								else = {
									set_variable = { PREV.pops_male_female_ratio = global.pops_male_female_ratio }
								}
							}
						}
					#
				#

				#Goods
					set_variable = { life_goods_base_price = PREV.life_goods_base_price }
					set_variable = { life_goods_price = life_goods_base_price }

					set_variable = { everyday_goods_base_price = PREV.everyday_goods_base_price }
					set_variable = { everyday_goods_price = everyday_goods_base_price }
					
					set_variable = { luxury_goods_base_price = PREV.luxury_goods_base_price }
					set_variable = { luxury_goods_price = luxury_goods_base_price }
					
					set_variable = { services_base_price = PREV.services_base_price }
					set_variable = { services_price = services_base_price }
					
					set_variable = { raw_goods_base_price = PREV.raw_goods_base_price }
					set_variable = { raw_goods_price = raw_goods_base_price }
					
					set_variable = { industrial_goods_base_price = PREV.industrial_goods_base_price }
					set_variable = { industrial_goods_price = industrial_goods_base_price }
				#
				
				update_modifiers_state_effects = yes
				
				pops_update = yes

				calculate_demand = yes

				factories_update = yes
				
				#Starting Factory Distribution:
					set_variable = { private_factory_amount = specialists_workforce_amount }
					add_to_variable = { private_factory_amount = craftsmen_workforce_amount }

					set_temp_variable = { govt_factories = industrial_complex_level }
					add_to_temp_variable = { govt_factories = arms_factory_level }
					add_to_temp_variable = { govt_factories = building_level@dockyard }
					set_temp_variable = { govt_employment_max_temp = govt_factories }
					multiply_temp_variable = { govt_employment_max_temp = global.factory_jobs_base_amount }
					subtract_from_variable = { private_factory_amount = govt_employment_max_temp }

					divide_variable = { private_factory_amount = factory_employment_amount_per_factory }
					add_to_variable = { private_factory_amount = 0.4 }
					round_variable = private_factory_amount
					if = {
						limit = {
							check_variable = { private_factory_amount < 0 }
						}
						set_variable = { private_factory_amount = 0 }
					}
					if = {
						limit = {
							check_variable = { factory_employment_amount_per_factory < 2.5 }
						}
						set_variable = { private_factory_amount = 0 }
					}
					
					set_variable = { total_factory_amount = private_factory_amount }
					add_to_variable = { total_factory_amount = govt_factories }

					#For setting different weights for each type. 0 is none, <1 is less, 1 is normal, >1 is more 
					set_temp_variable = { factory_everyday_goods_distribution_adjust_temp = 1 }
					set_temp_variable = { factory_luxury_goods_distribution_adjust_temp = 1 }
					set_temp_variable = { factory_industrial_goods_distribution_adjust_temp = 1 }

					#Change weights here


					#

					#Factory Modifiers
					set_temp_variable = { factory_everyday_goods_base_production_temp = global.factory_everyday_goods_base_production }
					set_temp_variable = { modifier_temp = factory_everyday_goods_throughput_effect }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_temp_variable = { factory_everyday_goods_base_production_temp = modifier_temp }
					set_temp_variable = { modifier_temp = factory_everyday_goods_output_effect }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_temp_variable = { factory_everyday_goods_base_production_temp = modifier_temp }
					
					set_temp_variable = { factory_luxury_goods_base_production_temp = global.factory_luxury_goods_base_production }
					set_temp_variable = { modifier_temp = factory_luxury_goods_throughput_effect }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_temp_variable = { factory_luxury_goods_base_production_temp = modifier_temp }
					set_temp_variable = { modifier_temp = factory_luxury_goods_output_effect }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_temp_variable = { factory_luxury_goods_base_production_temp = modifier_temp }
					
					set_temp_variable = { factory_industrial_goods_base_production_temp = global.factory_industrial_goods_base_production }
					set_temp_variable = { modifier_temp = factory_industrial_goods_throughput_effect }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_temp_variable = { factory_industrial_goods_base_production_temp = modifier_temp }
					set_temp_variable = { modifier_temp = factory_industrial_goods_output_effect }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_temp_variable = { factory_industrial_goods_base_production_temp = modifier_temp }

					#Get Needs Amount adjusted by factory prodution
					set_temp_variable = { factory_everyday_goods_distribution_temp = pops_everyday_goods_demand }
					divide_temp_variable = { factory_everyday_goods_distribution_temp = factory_everyday_goods_base_production_temp } #TOOD - Use actual factory production amount, not the base one
					multiply_temp_variable = { factory_everyday_goods_distribution_temp = factory_everyday_goods_distribution_adjust_temp }


					set_temp_variable = { factory_luxury_goods_distribution_temp = pops_luxury_goods_demand }
					divide_temp_variable = { factory_luxury_goods_distribution_temp = factory_luxury_goods_base_production_temp } #TOOD
					multiply_temp_variable = { factory_luxury_goods_distribution_temp = factory_luxury_goods_distribution_adjust_temp }

					#Using Everyday Goods factories as a base to get a rough need
					set_variable = { factory_industrial_goods_need = factory_employment_amount_per_factory }
					multiply_variable = { factory_industrial_goods_need = global.factory_everyday_goods_base_production }
					divide_variable = { factory_industrial_goods_need = 100 }
					multiply_variable = { factory_industrial_goods_need = private_factory_amount }
					set_temp_variable = { modifier_temp = factory_everyday_goods_throughput_effect }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_variable = { factory_industrial_goods_need = modifier_temp }
					multiply_variable = { factory_industrial_goods_need = global.factory_industrial_goods_base_need }
					set_temp_variable = { modifier_temp = factory_industrial_goods_maintenance_effect }
					add_to_temp_variable = { modifier_temp = 1 }
					multiply_variable = { factory_industrial_goods_need = modifier_temp }

					set_temp_variable = { factory_industrial_goods_distribution_temp = factory_industrial_goods_need }
					divide_temp_variable = { factory_industrial_goods_distribution_temp = factory_industrial_goods_base_production_temp } #TOOD
					multiply_temp_variable = { factory_industrial_goods_distribution_temp = factory_industrial_goods_distribution_adjust_temp }


					set_temp_variable = { total_distribution_temp = factory_everyday_goods_distribution_temp }
					add_to_temp_variable = { total_distribution_temp = factory_luxury_goods_distribution_temp }
					add_to_temp_variable = { total_distribution_temp = factory_industrial_goods_distribution_temp }

					divide_temp_variable = { factory_everyday_goods_distribution_temp = total_distribution_temp }
					multiply_temp_variable = { factory_everyday_goods_distribution_temp = private_factory_amount }
					set_temp_variable = { factory_everyday_goods_round_temp = factory_everyday_goods_distribution_temp }
					round_temp_variable = factory_everyday_goods_distribution_temp
					subtract_from_temp_variable = { factory_everyday_goods_round_temp = factory_everyday_goods_distribution_temp }

					divide_temp_variable = { factory_luxury_goods_distribution_temp = total_distribution_temp }
					multiply_temp_variable = { factory_luxury_goods_distribution_temp = private_factory_amount }
					set_temp_variable = { factory_luxury_goods_round_temp = factory_luxury_goods_distribution_temp }
					round_temp_variable = factory_luxury_goods_distribution_temp
					subtract_from_temp_variable = { factory_luxury_goods_round_temp = factory_luxury_goods_distribution_temp }

					divide_temp_variable = { factory_industrial_goods_distribution_temp = total_distribution_temp }
					multiply_temp_variable = { factory_industrial_goods_distribution_temp = private_factory_amount }
					set_temp_variable = { factory_industrial_goods_round_temp = factory_industrial_goods_distribution_temp }
					round_temp_variable = factory_industrial_goods_distribution_temp
					subtract_from_temp_variable = { factory_industrial_goods_round_temp = factory_industrial_goods_distribution_temp }

					set_temp_variable = { total_distribution_temp = factory_everyday_goods_distribution_temp }
					add_to_temp_variable = { total_distribution_temp = factory_luxury_goods_distribution_temp }
					add_to_temp_variable = { total_distribution_temp = factory_industrial_goods_distribution_temp }

					#Basically, what this does is that it adds a factory to the category that was the closest to being rounded
					#Positive: Rounded Down
					#Negative: Rounded Up
					if = {
						limit = {
							NOT = { check_variable = { total_distribution_temp = private_factory_amount } }
						}

						if = {
							limit = {
								check_variable = { total_distribution_temp > private_factory_amount }
							}

							if = {
								limit = {
									check_variable = { factory_everyday_goods_round_temp < factory_luxury_goods_round_temp }
									check_variable = { factory_everyday_goods_round_temp < factory_industrial_goods_round_temp }
								}
								subtract_from_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
								subtract_from_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_luxury_goods_round_temp < factory_industrial_goods_round_temp }
										}
										subtract_from_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
									}
									else = {
										subtract_from_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
									}
								}
							}
							else_if = {
								limit = {
									check_variable = { factory_luxury_goods_round_temp < factory_everyday_goods_round_temp }
									check_variable = { factory_luxury_goods_round_temp < factory_industrial_goods_round_temp }
								}
								subtract_from_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
								subtract_from_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_everyday_goods_round_temp < factory_industrial_goods_round_temp }
										}
										subtract_from_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
									}
									else = {
										subtract_from_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
									}
								}
							}
							else = {
								subtract_from_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
								subtract_from_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_everyday_goods_round_temp < factory_luxury_goods_round_temp }
										}
										subtract_from_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
									}
									else = {
										subtract_from_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
									}
								}
							}
						}
						else = {
							if = {
								limit = {
									check_variable = { factory_everyday_goods_round_temp > factory_luxury_goods_round_temp }
									check_variable = { factory_everyday_goods_round_temp > factory_industrial_goods_round_temp }
								}
								add_to_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
								add_to_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_luxury_goods_round_temp > factory_industrial_goods_round_temp }
										}
										add_to_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
									}
									else = {
										add_to_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
									}
								}
							}
							else_if = {
								limit = {
									check_variable = { factory_luxury_goods_round_temp > factory_everyday_goods_round_temp }
									check_variable = { factory_luxury_goods_round_temp > factory_industrial_goods_round_temp }
								}
								add_to_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
								add_to_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_everyday_goods_round_temp > factory_industrial_goods_round_temp }
										}
										add_to_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
									}
									else = {
										add_to_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
									}
								}
							}
							else = {
								add_to_temp_variable = { factory_industrial_goods_distribution_temp = 1 }
								add_to_temp_variable = { total_distribution_temp = 1 }
								
								if = {
									limit = {
										check_variable = { total_distribution_temp > private_factory_amount }
									}
									
									if = {
										limit = {
											check_variable = { factory_everyday_goods_round_temp > factory_luxury_goods_round_temp }
										}
										add_to_temp_variable = { factory_everyday_goods_distribution_temp = 1 }
									}
									else = {
										add_to_temp_variable = { factory_luxury_goods_distribution_temp = 1 }
									}
								}
							}
						}
					}



					set_variable = { factory_everyday_goods_amount = factory_everyday_goods_distribution_temp }
					set_variable = { factory_luxury_goods_amount = factory_luxury_goods_distribution_temp }
					set_variable = { factory_industrial_goods_amount = factory_industrial_goods_distribution_temp }
				#
				

				factories_update = yes
				set_variable = { factory_everyday_goods_money = factory_everyday_goods_money_limit }
				multiply_variable = { factory_everyday_goods_money = 1.25 }
				set_variable = { factory_luxury_goods_money = factory_luxury_goods_money_limit }
				multiply_variable = { factory_luxury_goods_money = 1.25 }
				set_variable = { factory_industrial_goods_money = factory_industrial_goods_money_limit }
				multiply_variable = { factory_industrial_goods_money = 1.25 }
				update_production_maintenance = yes
				calculate_supply = yes

				clear_array = pops_life_goods_fulfilled_array
				clear_array = pops_everyday_goods_fulfilled_array
				clear_array = pops_luxury_goods_fulfilled_array
				clear_array = factory_everyday_goods_earnings_array
				clear_array = factory_everyday_goods_spending_array
				clear_array = factory_luxury_goods_earnings_array
				clear_array = factory_luxury_goods_spending_array
				clear_array = factory_industrial_goods_earnings_array
				clear_array = factory_industrial_goods_spending_array
				clear_array = gdp_amount_array

				pops_update = yes

				create_pie_chart_pop_type = yes
				calculate_price = yes
				calculate_demand = yes
				calculate_price = yes
				reset_demand = yes
			}
			reset_demand = yes
			every_controlled_state = {
				calculate_demand = yes
				add_to_variable = { update_state_econ_window = 1 }
			}
		}
	}
#

#Update Scripts
	national_bank_update = {
		#Country Scope

		#Amount of money that can be loaned
			set_variable = { pops_savings_k = 0 }
			every_controlled_state = {
				set_temp_variable = { pops_savings_temp = pops_savings }
				divide_temp_variable = { pops_savings_temp = 1000 }
				add_to_variable = { PREV.pops_savings_k = pops_savings_temp }
			}
			set_variable = { national_bank_amount_k = pops_savings_k }
			multiply_variable = { national_bank_amount_k = 10 }
		#

		#Money scarcity
			#Go through borrowers to get loan amounts - TODO
				#Home Country
				set_variable = { national_bank_amount_lent_k = 0 }

				#Foreign Countries/Corporations
				set_temp_variable = { money_lent_temp = 0 }
				for_each_loop = {
					array = money_lent_amount
					value = m
					add_to_temp_variable = { money_lent_temp = m }
				}
				divide_temp_variable = { money_lent_temp = 1000 }
				add_to_variable = { national_bank_amount_lent_k = money_lent_temp }
			#

			set_variable = { national_bank_amount_left_k = national_bank_amount_k }
			subtract_from_variable = { national_bank_amount_left_k = national_bank_amount_lent_k }

			if = {
				limit = {
					check_variable = { national_bank_amount_left_k < 0 }
				}
				set_variable = { national_bank_interest_from_scarcity = 1 }
			}
			else = {
				set_variable = { national_bank_interest_from_scarcity = national_bank_amount_lent_k }
				divide_variable = { national_bank_interest_from_scarcity = national_bank_amount_k }
			}
			multiply_variable = { national_bank_interest_from_scarcity = global.loan_scarcity_rate }

			set_variable = { national_bank_international_interest_rate = national_bank_interest_from_scarcity }
			add_to_variable = { national_bank_international_interest_rate = global.base_international_interest_rate } #National Banks prefer to lend to their own country
		#
	}
	national_debt_update = {
		#Country Scope

		
		#Money owed to foreign countries & interest
			clear_array = debt_to_bank_interest_rate
			set_variable = { debt_to_foreign_countries = 0 }
			set_variable = { debt_to_national_bank = 0 }
			for_each_loop = {
				array = debt_to_bank_amount
				value = m
				index = c
				if = {
					limit = {
						tag = debt_to_bank_country^c
					}
					set_variable = { debt_to_national_bank = m }
					set_temp_variable = { interest_temp = national_bank_interest_from_scarcity }
					add_to_temp_variable = { interest_temp = credit_rating_interest }
					add_to_array = { debt_to_bank_interest_rate = interest_temp }
				}
				else = {
					add_to_variable = { debt_to_foreign_countries = m }
					set_temp_variable = { country_temp = debt_to_bank_country^c }
					set_temp_variable = { interest_temp = country_temp:national_bank_international_interest_rate }
					add_to_temp_variable = { interest_temp = credit_rating_interest }
					add_to_array = { debt_to_bank_interest_rate = interest_temp }
				}
			}
		#

		set_variable = { national_debt = debt_to_national_bank }
		add_to_variable = { national_debt = debt_to_foreign_countries }

		#Total Interest Rate
		set_variable = { national_debt_interest_rate = national_debt_interest }
		multiply_variable = { national_debt_interest_rate = 1200 }
		divide_variable = { national_debt_interest_rate = national_debt }

		#Max Repayment Amount (Used in Loc)
		set_variable = { national_debt_max_repayment_amount = treasury }
		if = {
			limit = { 
				check_variable = { national_debt_max_repayment_amount > national_debt }
			}
			set_variable = { national_debt_max_repayment_amount = national_debt }
		}

		#Sorting the debt to bank arrays by interest rate
			
			set_temp_variable = { length_temp = debt_to_bank_interest_rate^num }
			if = {
				limit = {
					check_variable = { length_temp > 1 }
				}
				for_loop_effect = {
					start = 0
					end = length_temp
					add = 1
					value = v
					find_highest_in_array = {
						array = debt_to_bank_interest_rate
						value = highest_value
						index = highest_index
					}
					#Interest Rate
					add_to_temp_array = {
						array = debt_to_bank_interest_rate_temp
						value = highest_value
					}
					remove_from_array = {
						array = debt_to_bank_interest_rate
						index = highest_index
					}
					#Country
					add_to_temp_array = {
						array = debt_to_bank_country_temp
						value = debt_to_bank_country^highest_index
					}
					remove_from_array = {
						array = debt_to_bank_country
						index = highest_index
					}
					#Amount
					add_to_temp_array = {
						array = debt_to_bank_amount_temp
						value = debt_to_bank_amount^highest_index
					}
					remove_from_array = {
						array = debt_to_bank_amount
						index = highest_index
					}

				}
				for_loop_effect = {
					start = 0
					end = length_temp
					add = 1
					value = v
					break = b
					add_to_array = {
						array = debt_to_bank_interest_rate
						value = debt_to_bank_interest_rate_temp^v
					}
					add_to_array = {
						array = debt_to_bank_country
						value = debt_to_bank_country_temp^v
					}
					add_to_array = {
						array = debt_to_bank_amount
						value = debt_to_bank_amount_temp^v
					}
				}
			}
		#
	}

	global_bank_update = {
		#Country Scope
		#Note: This loops through every country. Use it sparingly
		
		clear_array = global_bank_countries #Sorted by international interest rate
		clear_array = global_bank_interest_rate #Sorted by international interest rate
		for_each_loop = {
			array = global.global_bank_countries
			index = gi
			#Loops through the global econ array and adds countries to the global bank array, sorting by international interest rate

			if = {
				limit = {
					tag = global.global_bank_countries^gi
				}
				#Goes through the list to add it to the correct place
				set_temp_variable = { interest_temp = national_bank_interest_from_scarcity }
				add_to_temp_variable = { interest_temp = credit_rating_interest }
				for_each_loop = {
					array = global_bank_countries
					index = ii
					value = country_temp
					break = bb

					if = {
						limit = {
							check_variable = { global_bank_interest_rate^ii > interest_temp }
						}
						add_to_array = { 
							array = global_bank_countries 
							value = THIS
							index = ii
						}
						add_to_array = { 
							array = global_bank_interest_rate 
							value = interest_temp
							index = ii
						}
						set_temp_variable = { bb = 1 }
					}
				}
			}
			else = {
				add_to_array = { global_bank_countries = global.global_bank_countries^gi }
				add_to_array = { global_bank_interest_rate = global.global_bank_interest_rate^gi }
				set_temp_variable = { index_temp = global_bank_interest_rate^num }
				subtract_from_temp_variable = { index_temp = 1 }
				add_to_variable = { global_bank_interest_rate^index_temp = credit_rating_interest }
				set_variable = { int_t = global_bank_interest_rate^index_temp }				
			}
		}
		if = {
			limit = {
				NOT = { is_in_array = { global_bank_countries = THIS } }
			}
			#Goes through the list to add it to the correct place
			set_temp_variable = { interest_temp = national_bank_interest_from_scarcity }
			add_to_temp_variable = { interest_temp = credit_rating_interest }
			for_each_loop = {
				array = global_bank_countries
				index = ii
				value = country_temp
				break = bb

				if = {
					limit = {
						check_variable = { global_bank_interest_rate^ii > interest_temp }
					}
					add_to_array = { 
						array = global_bank_countries 
						value = THIS
						index = ii
					}
					add_to_array = { 
						array = global_bank_interest_rate 
						value = interest_temp
						index = ii
					}
					set_temp_variable = { bb = 1 }
				}
			}
			if = {
				limit = {
					check_variable = { bb = 0 }
				}
				add_to_array = { 
					array = global_bank_countries 
					value = THIS
				}
				add_to_array = { 
					array = global_bank_interest_rate 
					value = interest_temp
				}
			}
		}
	}

	close_repay_debt_window = {
		#Country Scope
		#Closes the repay debt window and resets the repayment values

		clr_country_flag = country_repay_debt_view_open
		set_variable = { debt_repayment_amount = 0 }
		set_variable = { debt_repayment_country = 0 }
	}
	close_borrow_money_window = {
		#Country Scope
		#Closes the borrow money window and resets the values

		clr_country_flag = country_borrow_money_view_open
		set_variable = { borrow_money_amount = 0 }
		set_variable = { borrow_money_country = 0 }
	}

	update_global_trade_display = {
		clear_array = global_trade_country_array
		clear_array = global_trade_amount_array
		clear_array = global_trade_value_array
		clear_array = global_trade_shipping_cost_array
		clear_array = global_trade_price_array
		clear_array = global_trade_lock_type_array

		if = {
			limit = {
				check_variable = { global_trade_selected_good = 0 } #Life Goods
			}

			for_each_loop = {
				array = life_goods_global_trade_country_array
				value = country_temp
				index = iii
				break = cheapest_brk

				add_to_array = { global_trade_country_array = country_temp }
				add_to_array = { global_trade_amount_array = life_goods_global_trade_amount_@var:country_temp }
				add_to_array = { global_trade_lock_type_array = life_goods_global_trade_lock_type_@var:country_temp }

				set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
				add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
				subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
				subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
				add_to_temp_variable = { net_tariff_percentage_temp = 100 }
				if = {
					limit = {
						check_variable = { net_tariff_percentage_temp < 10 }
					}
					set_temp_variable = { net_tariff_percentage_temp = 10 }
				}

				set_temp_variable = { true_price = country_temp:life_goods_price }
				multiply_temp_variable = { true_price = net_tariff_percentage_temp }
				divide_temp_variable = { true_price = 100 }
				add_to_array = { global_trade_price_array = true_price }

				add_to_array = { global_trade_value_array = life_goods_global_trade_value_@var:country_temp }
				add_to_array = { global_trade_shipping_cost_array = life_goods_global_trade_shipping_cost_@var:country_temp }
			}
		}
		else_if = {
			limit = {
				check_variable = { global_trade_selected_good = 1 } #Everyday Goods
			}

			for_each_loop = {
				array = everyday_goods_global_trade_country_array
				value = country_temp
				index = iii
				break = cheapest_brk

				add_to_array = { global_trade_country_array = country_temp }
				add_to_array = { global_trade_amount_array = everyday_goods_global_trade_amount_@var:country_temp }
				add_to_array = { global_trade_lock_type_array = everyday_goods_global_trade_lock_type_@var:country_temp }

				set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
				add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
				subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
				subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
				add_to_temp_variable = { net_tariff_percentage_temp = 100 }
				if = {
					limit = {
						check_variable = { net_tariff_percentage_temp < 10 }
					}
					set_temp_variable = { net_tariff_percentage_temp = 10 }
				}

				set_temp_variable = { true_price = country_temp:everyday_goods_price }
				multiply_temp_variable = { true_price = net_tariff_percentage_temp }
				divide_temp_variable = { true_price = 100 }
				add_to_array = { global_trade_price_array = true_price }

				add_to_array = { global_trade_value_array = everyday_goods_global_trade_value_@var:country_temp }
				add_to_array = { global_trade_shipping_cost_array = everyday_goods_global_trade_shipping_cost_@var:country_temp }
			}
		}
		else_if = {
			limit = {
				check_variable = { global_trade_selected_good = 2 } #Luxury Goods
			}

			for_each_loop = {
				array = luxury_goods_global_trade_country_array
				value = country_temp
				index = iii
				break = cheapest_brk

				add_to_array = { global_trade_country_array = country_temp }
				add_to_array = { global_trade_amount_array = luxury_goods_global_trade_amount_@var:country_temp }
				add_to_array = { global_trade_lock_type_array = luxury_goods_global_trade_lock_type_@var:country_temp }

				set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
				add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
				subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
				subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
				add_to_temp_variable = { net_tariff_percentage_temp = 100 }
				if = {
					limit = {
						check_variable = { net_tariff_percentage_temp < 10 }
					}
					set_temp_variable = { net_tariff_percentage_temp = 10 }
				}

				set_temp_variable = { true_price = country_temp:luxury_goods_price }
				multiply_temp_variable = { true_price = net_tariff_percentage_temp }
				divide_temp_variable = { true_price = 100 }
				add_to_array = { global_trade_price_array = true_price }

				add_to_array = { global_trade_value_array = luxury_goods_global_trade_value_@var:country_temp }
				add_to_array = { global_trade_shipping_cost_array = luxury_goods_global_trade_shipping_cost_@var:country_temp }
			}
		}
		else_if = {
			limit = {
				check_variable = { global_trade_selected_good = 3 } #Services
			}

			for_each_loop = {
				array = services_global_trade_country_array
				value = country_temp
				index = iii
				break = cheapest_brk

				add_to_array = { global_trade_country_array = country_temp }
				add_to_array = { global_trade_amount_array = services_global_trade_amount_@var:country_temp }
				add_to_array = { global_trade_lock_type_array = services_global_trade_lock_type_@var:country_temp }

				set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
				add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
				subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
				subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
				add_to_temp_variable = { net_tariff_percentage_temp = 100 }
				if = {
					limit = {
						check_variable = { net_tariff_percentage_temp < 10 }
					}
					set_temp_variable = { net_tariff_percentage_temp = 10 }
				}

				set_temp_variable = { true_price = country_temp:services_price }
				multiply_temp_variable = { true_price = net_tariff_percentage_temp }
				divide_temp_variable = { true_price = 100 }
				add_to_array = { global_trade_price_array = true_price }

				add_to_array = { global_trade_value_array = services_global_trade_value_@var:country_temp }
				add_to_array = { global_trade_shipping_cost_array = services_global_trade_shipping_cost_@var:country_temp }
			}
		}
		else_if = {
			limit = {
				check_variable = { global_trade_selected_good = 4 } #Raw Goods
			}

			for_each_loop = {
				array = raw_goods_global_trade_country_array
				value = country_temp
				index = iii
				break = cheapest_brk

				add_to_array = { global_trade_country_array = country_temp }
				add_to_array = { global_trade_amount_array = raw_goods_global_trade_amount_@var:country_temp }
				add_to_array = { global_trade_lock_type_array = raw_goods_global_trade_lock_type_@var:country_temp }

				set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
				add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
				subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
				subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
				add_to_temp_variable = { net_tariff_percentage_temp = 100 }
				if = {
					limit = {
						check_variable = { net_tariff_percentage_temp < 10 }
					}
					set_temp_variable = { net_tariff_percentage_temp = 10 }
				}

				set_temp_variable = { true_price = country_temp:raw_goods_price }
				multiply_temp_variable = { true_price = net_tariff_percentage_temp }
				divide_temp_variable = { true_price = 100 }
				add_to_array = { global_trade_price_array = true_price }

				add_to_array = { global_trade_value_array = raw_goods_global_trade_value_@var:country_temp }
				add_to_array = { global_trade_shipping_cost_array = raw_goods_global_trade_shipping_cost_@var:country_temp }
			}
		}
		else_if = {
			limit = {
				check_variable = { global_trade_selected_good = 5 } #Industrial Goods
			}

			for_each_loop = {
				array = industrial_goods_global_trade_country_array
				value = country_temp
				index = iii
				break = cheapest_brk

				add_to_array = { global_trade_country_array = country_temp }
				add_to_array = { global_trade_amount_array = industrial_goods_global_trade_amount_@var:country_temp }
				add_to_array = { global_trade_lock_type_array = industrial_goods_global_trade_lock_type_@var:country_temp }

				set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
				add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
				subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
				subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
				add_to_temp_variable = { net_tariff_percentage_temp = 100 }
				if = {
					limit = {
						check_variable = { net_tariff_percentage_temp < 10 }
					}
					set_temp_variable = { net_tariff_percentage_temp = 10 }
				}

				set_temp_variable = { true_price = country_temp:industrial_goods_price }
				multiply_temp_variable = { true_price = net_tariff_percentage_temp }
				divide_temp_variable = { true_price = 100 }
				add_to_array = { global_trade_price_array = true_price }

				add_to_array = { global_trade_value_array = industrial_goods_global_trade_value_@var:country_temp }
				add_to_array = { global_trade_shipping_cost_array = industrial_goods_global_trade_shipping_cost_@var:country_temp }
			}
		}
	}
	update_new_trade_route = {
		clear_array = global_trade_route_country_array
		clear_array = global_trade_route_shipping_cost_array
		clear_array = global_trade_route_price_array
		clear_array = global_trade_route_price_advantage_array
				
		if = { #Life Goods
			limit = {
				check_variable = { global_trade_selected_good = 0 }
			}

			for_each_loop = {
				array = global.life_goods_global_trade_country_array
				value = country_temp
				index = iii
				break = cheapest_brk
				if = {
					limit = {
						NOT = { is_in_array = { life_goods_global_trade_country_array = country_temp } }
						NOT = { tag = country_temp }
					}

					add_to_array = { global_trade_route_country_array = country_temp }

					set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					if = {
						limit = {
							check_variable = { net_tariff_percentage_temp < 10 }
						}
						set_temp_variable = { net_tariff_percentage_temp = 10 }
					}

					set_temp_variable = { true_price = country_temp:life_goods_price }
					multiply_temp_variable = { true_price = net_tariff_percentage_temp }
					divide_temp_variable = { true_price = 100 }
					add_to_array = { global_trade_route_price_array = true_price }

					#Price Advantage (vs global)
					set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					if = {
						limit = {
							check_variable = { net_tariff_percentage_temp < 10 }
						}
						set_temp_variable = { net_tariff_percentage_temp = 10 }
					}

					set_temp_variable = { global_true_price = global.life_goods_price }
					multiply_temp_variable = { global_true_price = net_tariff_percentage_temp }
					divide_temp_variable = { global_true_price = 100 }
					
					set_temp_variable = { a_temp = true_price }
					divide_temp_variable = { a_temp = global_true_price }
					subtract_from_temp_variable = { a_temp = 1 }
					add_to_array = { global_trade_route_price_advantage_array = a_temp }


					#Shipping Cost
					if = { 
						limit = {
							is_in_array = { global_trade_neighbor_array = country_temp }
						}
						add_to_array = { global_trade_route_shipping_cost_array = 0 }
					}
					else = {
						set_temp_variable = { exporter_capital = country_temp:capital }
						var:exporter_capital = {
							set_variable = { PREV.shipping_distance = distance_to@PREV.capital } #This needs to be a normal variable
						}
						divide_variable = { shipping_distance = global.base_shipping_cost_divisor }
						set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
						add_to_temp_variable = { modifier_temp = 1 }
						multiply_variable = { shipping_distance = modifier_temp }
						add_to_variable = { shipping_distance = 1 }

						add_to_array = { global_trade_route_shipping_cost_array = shipping_distance }
					}
				}
			}
		}
		else_if = { #Everyday Goods
			limit = {
				check_variable = { global_trade_selected_good = 1 }
			}

			for_each_loop = {
				array = global.everyday_goods_global_trade_country_array
				value = country_temp
				index = iii
				break = cheapest_brk
				if = {
					limit = {
						NOT = { is_in_array = { everyday_goods_global_trade_country_array = country_temp } }
						NOT = { tag = country_temp }
					}

					add_to_array = { global_trade_route_country_array = country_temp }

					set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					if = {
						limit = {
							check_variable = { net_tariff_percentage_temp < 10 }
						}
						set_temp_variable = { net_tariff_percentage_temp = 10 }
					}

					set_temp_variable = { true_price = country_temp:everyday_goods_price }
					multiply_temp_variable = { true_price = net_tariff_percentage_temp }
					divide_temp_variable = { true_price = 100 }
					add_to_array = { global_trade_route_price_array = true_price }

					#Price Advantage (vs global)
					set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					if = {
						limit = {
							check_variable = { net_tariff_percentage_temp < 10 }
						}
						set_temp_variable = { net_tariff_percentage_temp = 10 }
					}

					set_temp_variable = { global_true_price = global.everyday_goods_price }
					multiply_temp_variable = { global_true_price = net_tariff_percentage_temp }
					divide_temp_variable = { global_true_price = 100 }
					
					set_temp_variable = { a_temp = true_price }
					divide_temp_variable = { a_temp = global_true_price }
					subtract_from_temp_variable = { a_temp = 1 }
					add_to_array = { global_trade_route_price_advantage_array = a_temp }


					#Shipping Cost
					if = { 
						limit = {
							is_in_array = { global_trade_neighbor_array = country_temp }
						}
						add_to_array = { global_trade_route_shipping_cost_array = 0 }
					}
					else = {
						set_temp_variable = { exporter_capital = country_temp:capital }
						var:exporter_capital = {
							set_variable = { PREV.shipping_distance = distance_to@PREV.capital } #This needs to be a normal variable
						}
						divide_variable = { shipping_distance = global.base_shipping_cost_divisor }
						set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
						add_to_temp_variable = { modifier_temp = 1 }
						multiply_variable = { shipping_distance = modifier_temp }
						add_to_variable = { shipping_distance = 1 }

						add_to_array = { global_trade_route_shipping_cost_array = shipping_distance }
					}
				}
			}
		}
		else_if = { #Luxury Goods
			limit = {
				check_variable = { global_trade_selected_good = 2 }
			}

			for_each_loop = {
				array = global.luxury_goods_global_trade_country_array
				value = country_temp
				index = iii
				break = cheapest_brk
				if = {
					limit = {
						NOT = { is_in_array = { luxury_goods_global_trade_country_array = country_temp } }
						NOT = { tag = country_temp }
					}

					add_to_array = { global_trade_route_country_array = country_temp }

					set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					if = {
						limit = {
							check_variable = { net_tariff_percentage_temp < 10 }
						}
						set_temp_variable = { net_tariff_percentage_temp = 10 }
					}

					set_temp_variable = { true_price = country_temp:luxury_goods_price }
					multiply_temp_variable = { true_price = net_tariff_percentage_temp }
					divide_temp_variable = { true_price = 100 }
					add_to_array = { global_trade_route_price_array = true_price }

					#Price Advantage (vs global)
					set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					if = {
						limit = {
							check_variable = { net_tariff_percentage_temp < 10 }
						}
						set_temp_variable = { net_tariff_percentage_temp = 10 }
					}

					set_temp_variable = { global_true_price = global.luxury_goods_price }
					multiply_temp_variable = { global_true_price = net_tariff_percentage_temp }
					divide_temp_variable = { global_true_price = 100 }
					
					set_temp_variable = { a_temp = true_price }
					divide_temp_variable = { a_temp = global_true_price }
					subtract_from_temp_variable = { a_temp = 1 }
					add_to_array = { global_trade_route_price_advantage_array = a_temp }


					#Shipping Cost
					if = { 
						limit = {
							is_in_array = { global_trade_neighbor_array = country_temp }
						}
						add_to_array = { global_trade_route_shipping_cost_array = 0 }
					}
					else = {
						set_temp_variable = { exporter_capital = country_temp:capital }
						var:exporter_capital = {
							set_variable = { PREV.shipping_distance = distance_to@PREV.capital } #This needs to be a normal variable
						}
						divide_variable = { shipping_distance = global.base_shipping_cost_divisor }
						set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
						add_to_temp_variable = { modifier_temp = 1 }
						multiply_variable = { shipping_distance = modifier_temp }
						add_to_variable = { shipping_distance = 1 }

						add_to_array = { global_trade_route_shipping_cost_array = shipping_distance }
					}
				}
			}
		}
		else_if = { #Services
			limit = {
				check_variable = { global_trade_selected_good = 3 }
			}

			for_each_loop = {
				array = global.services_global_trade_country_array
				value = country_temp
				index = iii
				break = cheapest_brk
				if = {
					limit = {
						NOT = { is_in_array = { services_global_trade_country_array = country_temp } }
						NOT = { tag = country_temp }
					}

					add_to_array = { global_trade_route_country_array = country_temp }

					set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					if = {
						limit = {
							check_variable = { net_tariff_percentage_temp < 10 }
						}
						set_temp_variable = { net_tariff_percentage_temp = 10 }
					}

					set_temp_variable = { true_price = country_temp:services_price }
					multiply_temp_variable = { true_price = net_tariff_percentage_temp }
					divide_temp_variable = { true_price = 100 }
					add_to_array = { global_trade_route_price_array = true_price }

					#Price Advantage (vs global)
					set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					if = {
						limit = {
							check_variable = { net_tariff_percentage_temp < 10 }
						}
						set_temp_variable = { net_tariff_percentage_temp = 10 }
					}

					set_temp_variable = { global_true_price = global.services_price }
					multiply_temp_variable = { global_true_price = net_tariff_percentage_temp }
					divide_temp_variable = { global_true_price = 100 }
					
					set_temp_variable = { a_temp = true_price }
					divide_temp_variable = { a_temp = global_true_price }
					subtract_from_temp_variable = { a_temp = 1 }
					add_to_array = { global_trade_route_price_advantage_array = a_temp }


					#Shipping Cost
					if = { 
						limit = {
							is_in_array = { global_trade_neighbor_array = country_temp }
						}
						add_to_array = { global_trade_route_shipping_cost_array = 0 }
					}
					else = {
						set_temp_variable = { exporter_capital = country_temp:capital }
						var:exporter_capital = {
							set_variable = { PREV.shipping_distance = distance_to@PREV.capital } #This needs to be a normal variable
						}
						divide_variable = { shipping_distance = global.base_shipping_cost_divisor }
						set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
						add_to_temp_variable = { modifier_temp = 1 }
						multiply_variable = { shipping_distance = modifier_temp }
						add_to_variable = { shipping_distance = 1 }

						add_to_array = { global_trade_route_shipping_cost_array = shipping_distance }
					}
				}
			}
		}
		else_if = { #Raw Goods
			limit = {
				check_variable = { global_trade_selected_good = 4 }
			}

			for_each_loop = {
				array = global.raw_goods_global_trade_country_array
				value = country_temp
				index = iii
				break = cheapest_brk
				if = {
					limit = {
						NOT = { is_in_array = { raw_goods_global_trade_country_array = country_temp } }
						NOT = { tag = country_temp }
					}

					add_to_array = { global_trade_route_country_array = country_temp }

					set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					if = {
						limit = {
							check_variable = { net_tariff_percentage_temp < 10 }
						}
						set_temp_variable = { net_tariff_percentage_temp = 10 }
					}

					set_temp_variable = { true_price = country_temp:raw_goods_price }
					multiply_temp_variable = { true_price = net_tariff_percentage_temp }
					divide_temp_variable = { true_price = 100 }
					add_to_array = { global_trade_route_price_array = true_price }

					#Price Advantage (vs global)
					set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					if = {
						limit = {
							check_variable = { net_tariff_percentage_temp < 10 }
						}
						set_temp_variable = { net_tariff_percentage_temp = 10 }
					}

					set_temp_variable = { global_true_price = global.raw_goods_price }
					multiply_temp_variable = { global_true_price = net_tariff_percentage_temp }
					divide_temp_variable = { global_true_price = 100 }
					
					set_temp_variable = { a_temp = true_price }
					divide_temp_variable = { a_temp = global_true_price }
					subtract_from_temp_variable = { a_temp = 1 }
					add_to_array = { global_trade_route_price_advantage_array = a_temp }


					#Shipping Cost
					if = { 
						limit = {
							is_in_array = { global_trade_neighbor_array = country_temp }
						}
						add_to_array = { global_trade_route_shipping_cost_array = 0 }
					}
					else = {
						set_temp_variable = { exporter_capital = country_temp:capital }
						var:exporter_capital = {
							set_variable = { PREV.shipping_distance = distance_to@PREV.capital } #This needs to be a normal variable
						}
						divide_variable = { shipping_distance = global.base_shipping_cost_divisor }
						set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
						add_to_temp_variable = { modifier_temp = 1 }
						multiply_variable = { shipping_distance = modifier_temp }
						add_to_variable = { shipping_distance = 1 }

						add_to_array = { global_trade_route_shipping_cost_array = shipping_distance }
					}
				}
			}
		}
		else_if = { #Industrial Goods
			limit = {
				check_variable = { global_trade_selected_good = 5 }
			}

			for_each_loop = {
				array = global.industrial_goods_global_trade_country_array
				value = country_temp
				index = iii
				break = cheapest_brk
				if = {
					limit = {
						NOT = { is_in_array = { industrial_goods_global_trade_country_array = country_temp } }
						NOT = { tag = country_temp }
					}

					add_to_array = { global_trade_route_country_array = country_temp }

					set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = country_temp:export_tariff_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = country_temp:export_subsidy_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					if = {
						limit = {
							check_variable = { net_tariff_percentage_temp < 10 }
						}
						set_temp_variable = { net_tariff_percentage_temp = 10 }
					}

					set_temp_variable = { true_price = country_temp:industrial_goods_price }
					multiply_temp_variable = { true_price = net_tariff_percentage_temp }
					divide_temp_variable = { true_price = 100 }
					add_to_array = { global_trade_route_price_array = true_price }

					#Price Advantage (vs global)
					set_temp_variable = { net_tariff_percentage_temp = import_tariff_percentage }
					subtract_from_temp_variable = { net_tariff_percentage_temp = import_subsidy_percentage }
					add_to_temp_variable = { net_tariff_percentage_temp = 100 }
					if = {
						limit = {
							check_variable = { net_tariff_percentage_temp < 10 }
						}
						set_temp_variable = { net_tariff_percentage_temp = 10 }
					}

					set_temp_variable = { global_true_price = global.industrial_goods_price }
					multiply_temp_variable = { global_true_price = net_tariff_percentage_temp }
					divide_temp_variable = { global_true_price = 100 }
					
					set_temp_variable = { a_temp = true_price }
					divide_temp_variable = { a_temp = global_true_price }
					subtract_from_temp_variable = { a_temp = 1 }
					add_to_array = { global_trade_route_price_advantage_array = a_temp }


					#Shipping Cost
					if = { 
						limit = {
							is_in_array = { global_trade_neighbor_array = country_temp }
						}
						add_to_array = { global_trade_route_shipping_cost_array = 0 }
					}
					else = {
						set_temp_variable = { exporter_capital = country_temp:capital }
						var:exporter_capital = {
							set_variable = { PREV.shipping_distance = distance_to@PREV.capital } #This needs to be a normal variable
						}
						divide_variable = { shipping_distance = global.base_shipping_cost_divisor }
						set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
						add_to_temp_variable = { modifier_temp = 1 }
						multiply_variable = { shipping_distance = modifier_temp }
						add_to_variable = { shipping_distance = 1 }

						add_to_array = { global_trade_route_shipping_cost_array = shipping_distance }
					}
				}
			}
		}

		clear_variable = shipping_distance
	}
	verify_new_trade_amount = {

		#NOTE: If you update this here, please update verify_button_trade_amount
		#		to have the same conditions
		if = {
			limit = {
				check_variable = { global_trade_selected_good = 0 }
			}
			set_temp_variable = { trade_cap_temp = life_goods_need }
			subtract_from_temp_variable = { trade_cap_temp = life_goods_supply }
			if ={
				limit = {
					check_variable = { new_trade_amount > trade_cap_temp }
				}
				set_variable = { new_trade_amount = trade_cap_temp }
			}
			if ={
				limit = {
					NOT = { check_variable = { trade_route_country = 0 } }
					check_variable = { new_trade_amount > trade_route_country:life_goods_supply }
				}
				set_variable = { new_trade_amount = trade_route_country:life_goods_supply }
			}
		}
		else_if = {
			limit = {
				check_variable = { global_trade_selected_good = 1 }
			}
			set_temp_variable = { trade_cap_temp = everyday_goods_need }
			subtract_from_temp_variable = { trade_cap_temp = everyday_goods_supply }
			if ={
				limit = {
					check_variable = { new_trade_amount > trade_cap_temp }
				}
				set_variable = { new_trade_amount = trade_cap_temp }
			}
			if ={
				limit = {
					NOT = { check_variable = { trade_route_country = 0 } }
					check_variable = { new_trade_amount > trade_route_country:everyday_goods_supply }
				}
				set_variable = { new_trade_amount = trade_route_country:everyday_goods_supply }
			}
		}
		else_if = {
			limit = {
				check_variable = { global_trade_selected_good = 2 }
			}
			set_temp_variable = { trade_cap_temp = luxury_goods_need }
			subtract_from_temp_variable = { trade_cap_temp = luxury_goods_supply }
			if ={
				limit = {
					check_variable = { new_trade_amount > trade_cap_temp }
				}
				set_variable = { new_trade_amount = trade_cap_temp }
			}
			if ={
				limit = {
					NOT = { check_variable = { trade_route_country = 0 } }
					check_variable = { new_trade_amount > trade_route_country:luxury_goods_supply }
				}
				set_variable = { new_trade_amount = trade_route_country:luxury_goods_supply }
			}
		}
		else_if = {
			limit = {
				check_variable = { global_trade_selected_good = 3 }
			}
			set_temp_variable = { trade_cap_temp = services_demand_gp }
			subtract_from_temp_variable = { trade_cap_temp = services_supply }
			if ={
				limit = {
					check_variable = { new_trade_amount > trade_cap_temp }
				}
				set_variable = { new_trade_amount = trade_cap_temp }
			}
			if ={
				limit = {
					NOT = { check_variable = { trade_route_country = 0 } }
					check_variable = { new_trade_amount > trade_route_country:services_supply }
				}
				set_variable = { new_trade_amount = trade_route_country:services_supply }
			}
		}
		else_if = {
			limit = {
				check_variable = { global_trade_selected_good = 4 }
			}
			set_temp_variable = { trade_cap_temp = raw_goods_need }
			subtract_from_temp_variable = { trade_cap_temp = raw_goods_supply }
			if ={
				limit = {
					check_variable = { new_trade_amount > trade_cap_temp }
				}
				set_variable = { new_trade_amount = trade_cap_temp }
			}
			if ={
				limit = {
					NOT = { check_variable = { trade_route_country = 0 } }
					check_variable = { new_trade_amount > trade_route_country:raw_goods_supply }
				}
				set_variable = { new_trade_amount = trade_route_country:raw_goods_supply }
			}
		}
		else_if = {
			limit = {
				check_variable = { global_trade_selected_good = 5 }
			}
			set_temp_variable = { trade_cap_temp = industrial_goods_need }
			subtract_from_temp_variable = { trade_cap_temp = industrial_goods_supply }
			if ={
				limit = {
					check_variable = { new_trade_amount > trade_cap_temp }
				}
				set_variable = { new_trade_amount = trade_cap_temp }
			}
			if ={
				limit = {
					NOT = { check_variable = { trade_route_country = 0 } }
					check_variable = { new_trade_amount > trade_route_country:industrial_goods_supply }
				}
				set_variable = { new_trade_amount = trade_route_country:industrial_goods_supply }
			}
		}

		if = {
			limit = {
				check_variable = { new_trade_amount < 0 }
			}
			set_variable = { new_trade_amount = 0 }
		}
		update_shipping_stress_est = yes
	}
	verify_button_trade_amount = {

		#NOTE: If you update this here, please update verify_new_trade_amount
		#		to have the same conditions
		if = {
			limit = {
				check_variable = { global_trade_selected_good = 0 }
			}
			set_temp_variable = { trade_cap_temp = life_goods_need }
			subtract_from_temp_variable = { trade_cap_temp = life_goods_supply }
			if ={
				limit = {
					check_variable = { button_trade_amount > trade_cap_temp }
				}
				set_variable = { button_trade_amount = trade_cap_temp }
			}
			if ={
				limit = {
					NOT = { check_variable = { trade_route_country = 0 } }
					check_variable = { button_trade_amount > trade_route_country:life_goods_supply }
				}
				set_variable = { button_trade_amount = trade_route_country:life_goods_supply }
			}
		}
		else_if = {
			limit = {
				check_variable = { global_trade_selected_good = 1 }
			}
			set_temp_variable = { trade_cap_temp = everyday_goods_need }
			subtract_from_temp_variable = { trade_cap_temp = everyday_goods_supply }
			if ={
				limit = {
					check_variable = { button_trade_amount > trade_cap_temp }
				}
				set_variable = { button_trade_amount = trade_cap_temp }
			}
			if ={
				limit = {
					NOT = { check_variable = { trade_route_country = 0 } }
					check_variable = { button_trade_amount > trade_route_country:everyday_goods_supply }
				}
				set_variable = { button_trade_amount = trade_route_country:everyday_goods_supply }
			}
		}
		else_if = {
			limit = {
				check_variable = { global_trade_selected_good = 2 }
			}
			set_temp_variable = { trade_cap_temp = luxury_goods_need }
			subtract_from_temp_variable = { trade_cap_temp = luxury_goods_supply }
			if ={
				limit = {
					check_variable = { button_trade_amount > trade_cap_temp }
				}
				set_variable = { button_trade_amount = trade_cap_temp }
			}
			if ={
				limit = {
					NOT = { check_variable = { trade_route_country = 0 } }
					check_variable = { button_trade_amount > trade_route_country:luxury_goods_supply }
				}
				set_variable = { button_trade_amount = trade_route_country:luxury_goods_supply }
			}
		}
		else_if = {
			limit = {
				check_variable = { global_trade_selected_good = 3 }
			}
			set_temp_variable = { trade_cap_temp = services_demand_gp }
			subtract_from_temp_variable = { trade_cap_temp = services_supply }
			if ={
				limit = {
					check_variable = { button_trade_amount > trade_cap_temp }
				}
				set_variable = { button_trade_amount = trade_cap_temp }
			}
			if ={
				limit = {
					NOT = { check_variable = { trade_route_country = 0 } }
					check_variable = { button_trade_amount > trade_route_country:services_supply }
				}
				set_variable = { button_trade_amount = trade_route_country:services_supply }
			}
		}
		else_if = {
			limit = {
				check_variable = { global_trade_selected_good = 4 }
			}
			set_temp_variable = { trade_cap_temp = raw_goods_need }
			subtract_from_temp_variable = { trade_cap_temp = raw_goods_supply }
			if ={
				limit = {
					check_variable = { button_trade_amount > trade_cap_temp }
				}
				set_variable = { button_trade_amount = trade_cap_temp }
			}
			if ={
				limit = {
					NOT = { check_variable = { trade_route_country = 0 } }
					check_variable = { button_trade_amount > trade_route_country:raw_goods_supply }
				}
				set_variable = { button_trade_amount = trade_route_country:raw_goods_supply }
			}
		}
		else_if = {
			limit = {
				check_variable = { global_trade_selected_good = 5 }
			}
			set_temp_variable = { trade_cap_temp = industrial_goods_need }
			subtract_from_temp_variable = { trade_cap_temp = industrial_goods_supply }
			if ={
				limit = {
					check_variable = { button_trade_amount > trade_cap_temp }
				}
				set_variable = { button_trade_amount = trade_cap_temp }
			}
			if ={
				limit = {
					NOT = { check_variable = { trade_route_country = 0 } }
					check_variable = { button_trade_amount > trade_route_country:industrial_goods_supply }
				}
				set_variable = { button_trade_amount = trade_route_country:industrial_goods_supply }
			}
		}

		if = {
			limit = {
				check_variable = { button_trade_amount < 0 }
			}
			set_variable = { button_trade_amount = 0 }
		}
	}
	update_shipping_stress_est = {
		set_variable = { shipping_stress_est = new_trade_amount }
		if = {
			limit = {
				check_variable = { trade_route_country = 0 }
			}

		}
		else = {
			for_each_loop = {
				array = global_trade_route_country_array
				value = country_temp
				index = iii
				break = verify_brk

				if = {
					limit = {
						check_variable = { country_temp = trade_route_country }
					}
					multiply_variable = { shipping_stress_est = global_trade_route_shipping_cost_@var:country_temp }
					set_temp_variable = { verify_brk = 1 }
				}
			}
		}
		add_to_variable = { shipping_stress_est = shipping_stress }

	}
#

# AI Scripts

	industrial_investment_calc = {
		#Calculates the vars for investment interest
		#State Scope

		# Note: 
		#   IE is short for Ingame Effect, not an example
		#
		# Investment:
		#   Things that affect the likelyhood to build a new factory:
		#       = Market Conditions
		#           IE - Investors take into account goods prices & supply/demand.
		#               - Local, National, and Global supply & price of Raw Goods & Production Good
		#                   - Latter 2's weight depend on transport cost & shipping cost respectively
		#       = Existing buildings VS new sites
		#           IE - Corporations will consider buying factories off other corps or locals in state
		#       = Financial Incentives/Disincentives
		#           IE - Private Investors will take into account the following:
		#               +  Industrial Subsidies (if applied to the state/industry)
		#               -  Taxation (Corporate/Income/Sales, Tariffs if countrywide production > demand)
		#       = Construction Cost 
		#           IE - Industrial Goods price in the state & countrywide. Industrial Goods supply/demand countrywide. 
		#       = Infrastructure
		#           IE - Transport Cost in state, Electricity Generation in state/neighbors
		#       = Labor Availability
		#           IE - Investors like Unemployment
		#       = National/Global Status
		#           IE - Different laws & values & modifiers affect investment confidence
		#               + Investment Confidence (Adds onto investment interest)
		#                   +- Govt. Policy (Property, Child Labor, Workhours, Growth Policies, 
		#                                   Border, Discrim (if non-accepted culture), Econ Mob, Conscription)
		#                   +  High Stability
		#                   -  Low Stability (REALLY BAD. Businesses want stability)
		#                   +  National GDP Growth
		#                   +  National Inflation (Inflation means money is better spent today)
		#                   -  National Deflation (Deflation means money is better saved)
		#                   +  National Population Growth
		#                   +- Events & Focuses


		# If the value is *Positive,* then it will be considered to be built.
		# That does not mean that construction will occur right away. It just means that ppl think that it's a good investment.

		industrial_everyday_goods_investment_calc = yes     #factory_everyday_goods_investment_interest
		industrial_luxury_goods_investment_calc = yes       #factory_luxury_goods_investment_interest
		industrial_industrial_goods_investment_calc = yes   #factory_industrial_goods_investment_interest

		set_temp_variable = { highest_interest = 0 } #None
		set_temp_variable = { highest_interest_amount = 0 }
		if = { #Everyday Goods Factory
			limit = {
				NOT = { has_state_flag = factory_everyday_goods_in_construction }
				check_variable = { factory_everyday_goods_investment_interest > highest_interest_amount }
			}
			set_temp_variable = { highest_interest = 1 }
			set_temp_variable = { highest_interest_amount = factory_everyday_goods_investment_interest }
		}
		if = { #Luxury Goods Factory
			limit = {
				NOT = { has_state_flag = factory_luxury_goods_in_construction }
				check_variable = { factory_luxury_goods_investment_interest > highest_interest_amount }
			}
			set_temp_variable = { highest_interest = 2 }
			set_temp_variable = { highest_interest_amount = factory_luxury_goods_investment_interest }
		}
		if = { #Industrial Goods Factory
			limit = {
				NOT = { has_state_flag = factory_industrial_goods_in_construction }
				check_variable = { factory_industrial_goods_investment_interest > highest_interest_amount }
			}
			set_temp_variable = { highest_interest = 3 }
			set_temp_variable = { highest_interest_amount = factory_industrial_goods_investment_interest }
		}

		if = { #Build an Everyday Goods Factory
			limit = {
				check_variable = { highest_interest = 1 }
				check_variable = { factory_everyday_goods_investment_interest > 10 }
				check_variable = { pops_savings > 100 }
				NOT = { has_state_flag = factory_everyday_goods_in_construction }
				check_variable = { global.years_passed > 0 }
			}
			set_temp_variable = { investment_money_temp = pops_savings }
			subtract_from_temp_variable = { investment_money_temp = 100 }
			
			set_temp_variable = { investment_money_max_temp = factory_everyday_goods_construction_industrial_goods_need }
			multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
			multiply_temp_variable = { investment_money_max_temp = 1.5 }
			if = {
				limit = {
					check_variable = { investment_money_temp > investment_money_max_temp }
				}
				set_temp_variable = { investment_money_temp = investment_money_max_temp }
			}

			start_everyday_goods_factory_construction = yes
			subtract_from_variable = { pops_savings = investment_money_temp }
		}
		else_if = { #Build a Luxury Goods Factory
			limit = {
				check_variable = { highest_interest = 2 }
				check_variable = { factory_luxury_goods_investment_interest > 10 }
				check_variable = { pops_savings > 100 }
				NOT = { has_state_flag = factory_luxury_goods_in_construction }
				check_variable = { global.years_passed > 0 }
			}
			set_temp_variable = { investment_money_temp = pops_savings }
			subtract_from_temp_variable = { investment_money_temp = 100 }
			
			set_temp_variable = { investment_money_max_temp = factory_luxury_goods_construction_industrial_goods_need }
			multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
			multiply_temp_variable = { investment_money_max_temp = 1.5 }
			if = {
				limit = {
					check_variable = { investment_money_temp > investment_money_max_temp }
				}
				set_temp_variable = { investment_money_temp = investment_money_max_temp }
			}

			start_luxury_goods_factory_construction = yes
			subtract_from_variable = { pops_savings = investment_money_temp }
		}
		else_if = { #Build an Industrial Goods Factory
			limit = {
				check_variable = { highest_interest = 3 }
				check_variable = { factory_industrial_goods_investment_interest > 10 }
				check_variable = { pops_savings > 100 }
				NOT = { has_state_flag = factory_industrial_goods_in_construction }
				check_variable = { global.years_passed > 0 }
			}
			set_temp_variable = { investment_money_temp = pops_savings }
			subtract_from_temp_variable = { investment_money_temp = 100 }
			
			set_temp_variable = { investment_money_max_temp = factory_industrial_goods_construction_industrial_goods_need }
			multiply_temp_variable = { investment_money_max_temp = industrial_goods_price }
			multiply_temp_variable = { investment_money_max_temp = 1.5 }
			if = {
				limit = {
					check_variable = { investment_money_temp > investment_money_max_temp }
				}
				set_temp_variable = { investment_money_temp = investment_money_max_temp }
			}

			start_industrial_goods_factory_construction = yes
			subtract_from_variable = { pops_savings = investment_money_temp }
		}
	}
	industrial_everyday_goods_investment_calc = {
		#Calculates the vars for investment interest
		#State Scope

		# If the value is *Positive,* then it will be considered to be built.
		# That does not mean that construction will occur right away. It just means that ppl think that it's a good investment.

		set_variable = { factory_everyday_goods_investment_interest = -200 } #Base of -200

		#Get Factory Production
			#Get Employment Amount
			set_temp_variable = { factory_employment_amount_temp = private_factory_amount }
			add_to_temp_variable = { factory_employment_amount_temp = 1 }
			multiply_temp_variable = { factory_employment_amount_temp = factory_employment_amount_per_factory }

			set_temp_variable = { govt_employment_max_temp = industrial_complex_level }
			add_to_temp_variable = { govt_employment_max_temp = arms_factory_level }
			add_to_temp_variable = { govt_employment_max_temp = building_level@dockyard }
			multiply_temp_variable = { govt_employment_max_temp = global.factory_jobs_base_amount }
			add_to_temp_variable = { factory_employment_amount_temp = govt_employment_max_temp }

			set_temp_variable = { factory_employment_max_temp = specialists_workforce_amount }
			add_to_temp_variable = { factory_employment_max_temp = craftsmen_workforce_amount }
			if = {
				limit = {
					check_variable = { factory_employment_max_temp > factory_employment_amount_temp }
				}
				set_variable = { factory_employment_max_temp = factory_employment_amount_temp }
			}

			set_temp_variable = { factory_employment_percentage_temp = factory_employment_max_temp }
			multiply_temp_variable = { factory_employment_percentage_temp = 100 }
			divide_temp_variable = { factory_employment_percentage_temp = factory_employment_amount_temp }
			if = {
				limit = {
					check_variable = { factory_employment_percentage_temp < 25 }
				}
				set_temp_variable = { factory_employment_percentage_temp = 25 }
			}

			#Specialist Bonus
			set_temp_variable = { specialists_bonus_multiplier = 1 }
			set_temp_variable = { specialists_percentage_temp = specialists_workforce_amount }
			divide_temp_variable = { specialists_percentage_temp = factory_employment_amount_temp }
			multiply_temp_variable = { specialists_percentage_temp = global.pops_specialists_production_bonus }
			add_to_temp_variable = { specialists_bonus_multiplier = specialists_percentage_temp }

			#Throughput
			set_temp_variable = { factory_production_temp = factory_employment_amount_per_factory }
			multiply_temp_variable = { factory_production_temp = global.factory_everyday_goods_base_production }
			multiply_temp_variable = { factory_production_temp = specialists_bonus_multiplier }
			divide_temp_variable = { factory_production_temp = 100 }
			multiply_temp_variable = { factory_production_temp = factory_employment_percentage_temp }
			divide_temp_variable = { factory_production_temp = 100 }
			set_temp_variable = { modifier_temp = factory_everyday_goods_throughput_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_production_temp = modifier_temp }

			#Maintenace
			set_temp_variable = { factory_industrial_goods_need_temp = factory_production_temp }
			multiply_temp_variable = { factory_industrial_goods_need_temp = global.factory_industrial_goods_base_need }
			set_temp_variable = { modifier_temp = factory_industrial_goods_maintenance_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_industrial_goods_need_temp = modifier_temp }

			#Input
			set_temp_variable = { factory_raw_goods_need_temp = global.factory_everyday_goods_raw_goods_base_need }
			multiply_temp_variable = { factory_raw_goods_need_temp = factory_production_temp }
			set_temp_variable = { modifier_temp = factory_everyday_goods_raw_goods_input_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_raw_goods_need_temp = modifier_temp }

			#Fulfilled
			set_temp_variable = { fulfilled_temp = factory_everyday_goods_raw_goods_fulfilled_percentage }
			add_to_temp_variable = { fulfilled_temp = factory_everyday_goods_industrial_goods_fulfilled_percentage }
			divide_temp_variable = { fulfilled_temp = 2 }

			if = {
				limit = {
					OR = {
						check_variable = { factory_employment_amount < 0.1 }
						check_variable = { factory_everyday_goods_amount = 0 }
					}
					check_variable = { fulfilled_temp < 0.25 }
				}
				if = {
					limit = {
						check_variable = { factory_everyday_goods_amount = 0 }
					}
					set_temp_variable = { fulfilled_temp = 1 }
				}
				else = {
					set_temp_variable = { fulfilled_temp = 0.25 }
				}
			}

			#Output
			multiply_temp_variable = { factory_production_temp = fulfilled_temp }
			set_temp_variable = { modifier_temp = factory_everyday_goods_output_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_production_temp = modifier_temp }

			#factory_production_temp
			#factory_industrial_goods_need_temp
			#factory_raw_goods_need_temp
		#
		
		#Market Conditions
			#Weights
			set_temp_variable = { local_weight_temp = 0.89 }
			set_temp_variable = { country_weight_temp = 0.1 }
			set_temp_variable = { global_weight_temp = 0.01 }

			set_temp_variable = { modifier_temp = 1 }
			add_to_temp_variable = { modifier_temp = transport_cost_effect }
			divide_temp_variable = { country_weight_temp = modifier_temp }
			
			set_temp_variable = { modifier_temp = 1 }
			add_to_temp_variable = { modifier_temp = PREV.modifier@shipping_cost_modifier }
			divide_temp_variable = { global_weight_temp = modifier_temp }
			divide_temp_variable = { global_weight_temp = modifier_temp }

			set_temp_variable = { weight_total_temp = local_weight_temp }
			add_to_temp_variable = { weight_total_temp = country_weight_temp }
			add_to_temp_variable = { weight_total_temp = global_weight_temp }
			

			#Local
			set_temp_variable = { local_raw_goods_weight_temp = raw_goods_price }
			
			#Country
			set_temp_variable = { country_raw_goods_weight_temp = PREV.raw_goods_price }

			#Global
			set_temp_variable = { global_raw_goods_weight_temp = global.raw_goods_price }

			multiply_temp_variable = { local_raw_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_raw_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_raw_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { raw_goods_price_temp = local_raw_goods_weight_temp }
			add_to_temp_variable = { raw_goods_price_temp = country_raw_goods_weight_temp }
			add_to_temp_variable = { raw_goods_price_temp = global_raw_goods_weight_temp }
			divide_temp_variable = { raw_goods_price_temp = weight_total_temp }

			set_temp_variable = { raw_goods_cost_temp = raw_goods_price_temp }
			multiply_temp_variable = { raw_goods_cost_temp = factory_raw_goods_need_temp }
			

			#Local
			set_temp_variable = { local_industrial_goods_weight_temp = industrial_goods_price }
			
			#Country
			set_temp_variable = { country_industrial_goods_weight_temp = PREV.industrial_goods_price }

			#Global
			set_temp_variable = { global_industrial_goods_weight_temp = global.industrial_goods_price }

			multiply_temp_variable = { local_industrial_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_industrial_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_industrial_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { industrial_goods_price_temp = local_industrial_goods_weight_temp }
			add_to_temp_variable = { industrial_goods_price_temp = country_industrial_goods_weight_temp }
			add_to_temp_variable = { industrial_goods_price_temp = global_industrial_goods_weight_temp }
			divide_temp_variable = { industrial_goods_price_temp = weight_total_temp }

			set_temp_variable = { industrial_goods_cost_temp = industrial_goods_price_temp }
			multiply_temp_variable = { industrial_goods_cost_temp = factory_industrial_goods_need_temp }

			
			#Local
			set_temp_variable = { local_everyday_goods_weight_temp = everyday_goods_price }
			
			#Country
			set_temp_variable = { country_everyday_goods_weight_temp = PREV.everyday_goods_price }

			#Global
			set_temp_variable = { global_everyday_goods_weight_temp = global.everyday_goods_price }

			multiply_temp_variable = { local_everyday_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_everyday_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_industrial_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { everyday_goods_revenue_temp = local_everyday_goods_weight_temp }
			add_to_temp_variable = { everyday_goods_revenue_temp = country_everyday_goods_weight_temp }
			add_to_temp_variable = { everyday_goods_revenue_temp = global_everyday_goods_weight_temp }
			multiply_temp_variable = { everyday_goods_revenue_temp = factory_production_temp }
			divide_temp_variable = { everyday_goods_revenue_temp = weight_total_temp }

			set_temp_variable = { revenue_cost_ratio = everyday_goods_revenue_temp }
			set_temp_variable = { goods_cost_temp = raw_goods_cost_temp }
			add_to_temp_variable = { goods_cost_temp = industrial_goods_cost_temp }
			if = {
				limit = {
					check_variable = { goods_cost_temp > 0 }
				}
				divide_temp_variable = { revenue_cost_ratio = goods_cost_temp }
			}
			else_if = {
				limit = {
					check_variable = { revenue_cost_ratio > 0 }
				}
				set_temp_variable = { revenue_cost_ratio = 11 }
			}
			else = {
				set_temp_variable = { revenue_cost_ratio = 0 }
			}
			subtract_from_temp_variable = { revenue_cost_ratio = 1 }

			set_temp_variable = { everyday_goods_condition_temp = 100 }
			multiply_temp_variable = { everyday_goods_condition_temp = revenue_cost_ratio }
			add_to_variable = { factory_everyday_goods_investment_interest = everyday_goods_condition_temp }

			#raw_goods_cost_temp
			#raw_goods_price_temp
			#industrial_goods_cost_temp
			#industrial_goods_price_temp
			#goods_cost_temp
			#everyday_goods_revenue_temp
			set_variable = { goods_revenue_s = everyday_goods_revenue_temp }
			set_variable = { goods_cost_s = goods_cost_temp }
		#

		#Financial Incentives
			#Industrial Subsidies
			set_temp_variable = { subsidies_condition_temp = PREV.industrial_subsidy_percentage }
			multiply_temp_variable = { subsidies_condition_temp = goods_cost_temp }
			divide_temp_variable = { subsidies_condition_temp = everyday_goods_revenue_temp }
			divide_temp_variable = { subsidies_condition_temp = 2 } #Adds half back
			add_to_variable = { factory_everyday_goods_investment_interest = subsidies_condition_temp }

			#Taxation
			#TODO
		#
		
		#Construction Cost        
			set_variable = { constr_cost_temp = global.factory_everyday_goods_construction_industrial_goods_base_need }
			multiply_variable = { constr_cost_temp = factory_employment_amount_per_factory }
			divide_variable = { constr_cost_temp = 100 }
			set_temp_variable = { modifier_temp = factory_build_cost_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { constr_cost_temp = modifier_temp }
			multiply_variable = { constr_cost_temp = industrial_goods_price_temp }
			multiply_variable = { constr_cost_temp = 2 }

			set_temp_variable = { revenue_excess_temp = everyday_goods_revenue_temp }
			subtract_from_temp_variable = { revenue_excess_temp = goods_cost_temp }
			if = {
				limit = {
					check_variable = { revenue_excess_temp < 0.01 }
				}
				set_temp_variable = { revenue_excess_temp = 0.01 }
			}

			set_temp_variable = { constr_cost_condition_temp = constr_cost_temp }
			divide_temp_variable = { constr_cost_condition_temp = revenue_excess_temp }
			multiply_temp_variable = { constr_cost_condition_temp = -10 } #Every multiple of excess revenue reduces interest by 20
			add_to_variable = { factory_everyday_goods_investment_interest = constr_cost_condition_temp }
		#

		#Infrastructure
			set_temp_variable = { transport_cost_condition_temp = transport_cost_effect }
			multiply_temp_variable = { transport_cost_condition_temp = -100 } #at -100% transport cost, +100 interest`
			add_to_variable = { factory_everyday_goods_investment_interest = transport_cost_condition_temp }
		#

		#Labor Availability
			if = {
				limit = {
					check_variable = { factory_employment_percentage < 100 }
				}

				set_temp_variable = { labor_condition_temp = factory_employment_amount_max }
				subtract_from_temp_variable = { labor_condition_temp = factory_employment_amount }
				divide_temp_variable = { labor_condition_temp = factory_employment_amount_per_factory }
				multiply_temp_variable = { labor_condition_temp = 200 } #for each factory-sized chunk
				subtract_from_variable = { factory_everyday_goods_investment_interest = labor_condition_temp }
			}
			else = {
				set_temp_variable = { labor_condition_temp = craftsmen_unemployed_amount }
				add_to_temp_variable = { labor_condition_temp = specialists_unemployed_amount }
				divide_temp_variable = { labor_condition_temp = factory_employment_amount_per_factory }
				multiply_temp_variable = { labor_condition_temp = 50 } #for each factory-sized chunk
				add_to_variable = { factory_everyday_goods_investment_interest = labor_condition_temp }
			}
			
		#

		#Investment Confidence
			add_to_variable = { factory_everyday_goods_investment_interest = PREV.investment_confidence }
		#

		#Other Constructions
			#If some other building is being constructed, it takes away from confidence in a new one.
			if = {
				limit = {
					has_state_flag = factory_everyday_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = factory_luxury_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = factory_industrial_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = infrastructure_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 25 } #Not as much as it's infra
			}
		#
	}
	industrial_luxury_goods_investment_calc = {
		#Calculates the vars for investment interest
		#State Scope

		# If the value is *Positive,* then it will be considered to be built.
		# That does not mean that construction will occur right away. It just means that ppl think that it's a good investment.

		set_variable = { factory_luxury_goods_investment_interest = -200 } #Base of -200

		#Get Factory Production
			#Get Employment Amount
			set_temp_variable = { factory_employment_amount_temp = private_factory_amount }
			add_to_temp_variable = { factory_employment_amount_temp = 1 }
			multiply_temp_variable = { factory_employment_amount_temp = factory_employment_amount_per_factory }

			set_temp_variable = { govt_employment_max_temp = industrial_complex_level }
			add_to_temp_variable = { govt_employment_max_temp = arms_factory_level }
			add_to_temp_variable = { govt_employment_max_temp = building_level@dockyard }
			multiply_temp_variable = { govt_employment_max_temp = global.factory_jobs_base_amount }
			add_to_temp_variable = { factory_employment_amount_temp = govt_employment_max_temp }

			set_temp_variable = { factory_employment_max_temp = specialists_workforce_amount }
			add_to_temp_variable = { factory_employment_max_temp = craftsmen_workforce_amount }
			if = {
				limit = {
					check_variable = { factory_employment_max_temp > factory_employment_amount_temp }
				}
				set_variable = { factory_employment_max_temp = factory_employment_amount_temp }
			}

			set_temp_variable = { factory_employment_percentage_temp = factory_employment_max_temp }
			multiply_temp_variable = { factory_employment_percentage_temp = 100 }
			divide_temp_variable = { factory_employment_percentage_temp = factory_employment_amount_temp }
			if = {
				limit = {
					check_variable = { factory_employment_percentage_temp < 25 }
				}
				set_temp_variable = { factory_employment_percentage_temp = 25 }
			}

			#Specialist Bonus
			set_temp_variable = { specialists_bonus_multiplier = 1 }
			set_temp_variable = { specialists_percentage_temp = specialists_workforce_amount }
			divide_temp_variable = { specialists_percentage_temp = factory_employment_amount_temp }
			multiply_temp_variable = { specialists_percentage_temp = global.pops_specialists_production_bonus }
			add_to_temp_variable = { specialists_bonus_multiplier = specialists_percentage_temp }

			#Throughput
			set_temp_variable = { factory_production_temp = factory_employment_amount_per_factory }
			multiply_temp_variable = { factory_production_temp = global.factory_luxury_goods_base_production }
			multiply_temp_variable = { factory_production_temp = specialists_bonus_multiplier }
			divide_temp_variable = { factory_production_temp = 100 }
			multiply_temp_variable = { factory_production_temp = factory_employment_percentage_temp }
			divide_temp_variable = { factory_production_temp = 100 }
			set_temp_variable = { modifier_temp = factory_luxury_goods_throughput_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_production_temp = modifier_temp }

			#Maintenace
			set_temp_variable = { factory_industrial_goods_need_temp = factory_production_temp }
			multiply_temp_variable = { factory_industrial_goods_need_temp = global.factory_industrial_goods_base_need }
			set_temp_variable = { modifier_temp = factory_industrial_goods_maintenance_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_industrial_goods_need_temp = modifier_temp }

			#Input
			set_temp_variable = { factory_raw_goods_need_temp = global.factory_luxury_goods_raw_goods_base_need }
			multiply_temp_variable = { factory_raw_goods_need_temp = factory_production_temp }
			set_temp_variable = { modifier_temp = factory_luxury_goods_raw_goods_input_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_raw_goods_need_temp = modifier_temp }

			#Fulfilled
			set_temp_variable = { fulfilled_temp = factory_luxury_goods_raw_goods_fulfilled_percentage }
			add_to_temp_variable = { fulfilled_temp = factory_luxury_goods_industrial_goods_fulfilled_percentage }
			divide_temp_variable = { fulfilled_temp = 2 }

			if = {
				limit = {
					OR = {
						check_variable = { factory_employment_amount < 0.1 }
						check_variable = { factory_luxury_goods_amount = 0 }
					}
					check_variable = { fulfilled_temp < 0.25 }
				}
				if = {
					limit = {
						check_variable = { factory_luxury_goods_amount = 0 }
					}
					set_temp_variable = { fulfilled_temp = 1 }
				}
				else = {
					set_temp_variable = { fulfilled_temp = 0.25 }
				}
			}

			#Output
			multiply_temp_variable = { factory_production_temp = fulfilled_temp }
			set_temp_variable = { modifier_temp = factory_luxury_goods_output_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_production_temp = modifier_temp }

			#factory_production_temp
			#factory_industrial_goods_need_temp
			#factory_raw_goods_need_temp
		#
		
		#Market Conditions
			#Weights
			set_temp_variable = { local_weight_temp = 0.89 }
			set_temp_variable = { country_weight_temp = 0.1 }
			set_temp_variable = { global_weight_temp = 0.01 }

			set_temp_variable = { modifier_temp = 1 }
			add_to_temp_variable = { modifier_temp = transport_cost_effect }
			divide_temp_variable = { country_weight_temp = modifier_temp }
			
			set_temp_variable = { modifier_temp = 1 }
			add_to_temp_variable = { modifier_temp = PREV.modifier@shipping_cost_modifier }
			divide_temp_variable = { global_weight_temp = modifier_temp }
			divide_temp_variable = { global_weight_temp = modifier_temp }

			set_temp_variable = { weight_total_temp = local_weight_temp }
			add_to_temp_variable = { weight_total_temp = country_weight_temp }
			add_to_temp_variable = { weight_total_temp = global_weight_temp }
			

			#Local
			set_temp_variable = { local_raw_goods_weight_temp = raw_goods_price }
			
			#Country
			set_temp_variable = { country_raw_goods_weight_temp = PREV.raw_goods_price }

			#Global
			set_temp_variable = { global_raw_goods_weight_temp = global.raw_goods_price }

			multiply_temp_variable = { local_raw_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_raw_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_raw_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { raw_goods_price_temp = local_raw_goods_weight_temp }
			add_to_temp_variable = { raw_goods_price_temp = country_raw_goods_weight_temp }
			add_to_temp_variable = { raw_goods_price_temp = global_raw_goods_weight_temp }
			divide_temp_variable = { raw_goods_price_temp = weight_total_temp }

			set_temp_variable = { raw_goods_cost_temp = raw_goods_price_temp }
			multiply_temp_variable = { raw_goods_cost_temp = factory_raw_goods_need_temp }
			

			#Local
			set_temp_variable = { local_industrial_goods_weight_temp = industrial_goods_price }
			
			#Country
			set_temp_variable = { country_industrial_goods_weight_temp = PREV.industrial_goods_price }

			#Global
			set_temp_variable = { global_industrial_goods_weight_temp = global.industrial_goods_price }

			multiply_temp_variable = { local_industrial_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_industrial_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_industrial_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { industrial_goods_price_temp = local_industrial_goods_weight_temp }
			add_to_temp_variable = { industrial_goods_price_temp = country_industrial_goods_weight_temp }
			add_to_temp_variable = { industrial_goods_price_temp = global_industrial_goods_weight_temp }
			divide_temp_variable = { industrial_goods_price_temp = weight_total_temp }

			set_temp_variable = { industrial_goods_cost_temp = industrial_goods_price_temp }
			multiply_temp_variable = { industrial_goods_cost_temp = factory_industrial_goods_need_temp }

			
			#Local
			set_temp_variable = { local_luxury_goods_weight_temp = luxury_goods_price }
			
			#Country
			set_temp_variable = { country_luxury_goods_weight_temp = PREV.luxury_goods_price }

			#Global
			set_temp_variable = { global_luxury_goods_weight_temp = global.luxury_goods_price }

			multiply_temp_variable = { local_luxury_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_luxury_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_industrial_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { luxury_goods_revenue_temp = local_luxury_goods_weight_temp }
			add_to_temp_variable = { luxury_goods_revenue_temp = country_luxury_goods_weight_temp }
			add_to_temp_variable = { luxury_goods_revenue_temp = global_luxury_goods_weight_temp }
			multiply_temp_variable = { luxury_goods_revenue_temp = factory_production_temp }
			divide_temp_variable = { luxury_goods_revenue_temp = weight_total_temp }

			set_temp_variable = { revenue_cost_ratio = luxury_goods_revenue_temp }
			set_temp_variable = { goods_cost_temp = raw_goods_cost_temp }
			add_to_temp_variable = { goods_cost_temp = industrial_goods_cost_temp }
			if = {
				limit = {
					check_variable = { goods_cost_temp > 0 }
				}
				divide_temp_variable = { revenue_cost_ratio = goods_cost_temp }
			}
			else_if = {
				limit = {
					check_variable = { revenue_cost_ratio > 0 }
				}
				set_temp_variable = { revenue_cost_ratio = 11 }
			}
			else = {
				set_temp_variable = { revenue_cost_ratio = 0 }
			}
			subtract_from_temp_variable = { revenue_cost_ratio = 1 }

			set_temp_variable = { luxury_goods_condition_temp = 100 }
			multiply_temp_variable = { luxury_goods_condition_temp = revenue_cost_ratio }
			add_to_variable = { factory_luxury_goods_investment_interest = luxury_goods_condition_temp }

			#raw_goods_cost_temp
			#raw_goods_price_temp
			#industrial_goods_cost_temp
			#industrial_goods_price_temp
			#goods_cost_temp
			#luxury_goods_revenue_temp
		#

		#Financial Incentives
			#Industrial Subsidies
			set_temp_variable = { subsidies_condition_temp = PREV.industrial_subsidy_percentage }
			multiply_temp_variable = { subsidies_condition_temp = goods_cost_temp }
			divide_temp_variable = { subsidies_condition_temp = luxury_goods_revenue_temp }
			divide_temp_variable = { subsidies_condition_temp = 2 } #Adds half back
			add_to_variable = { factory_luxury_goods_investment_interest = subsidies_condition_temp }

			#Taxation
			#TODO
		#
		
		#Construction Cost        
			set_variable = { constr_cost_temp = global.factory_luxury_goods_construction_industrial_goods_base_need }
			multiply_variable = { constr_cost_temp = factory_employment_amount_per_factory }
			divide_variable = { constr_cost_temp = 100 }
			set_temp_variable = { modifier_temp = factory_build_cost_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { constr_cost_temp = modifier_temp }
			multiply_variable = { constr_cost_temp = industrial_goods_price_temp }
			multiply_variable = { constr_cost_temp = 2 }

			set_temp_variable = { revenue_excess_temp = luxury_goods_revenue_temp }
			subtract_from_temp_variable = { revenue_excess_temp = goods_cost_temp }
			if = {
				limit = {
					check_variable = { revenue_excess_temp < 0.01 }
				}
				set_temp_variable = { revenue_excess_temp = 0.01 }
			}

			set_temp_variable = { constr_cost_condition_temp = constr_cost_temp }
			divide_temp_variable = { constr_cost_condition_temp = revenue_excess_temp }
			multiply_temp_variable = { constr_cost_condition_temp = -10 } #Every multiple of excess revenue reduces interest by 20
			add_to_variable = { factory_luxury_goods_investment_interest = constr_cost_condition_temp }
		#

		#Infrastructure
			set_temp_variable = { transport_cost_condition_temp = transport_cost_effect }
			multiply_temp_variable = { transport_cost_condition_temp = -100 } #at -100% transport cost, +100 interest`
			add_to_variable = { factory_luxury_goods_investment_interest = transport_cost_condition_temp }
		#

		#Labor Availability
			if = {
				limit = {
					check_variable = { factory_employment_percentage < 100 }
				}

				set_temp_variable = { labor_condition_temp = factory_employment_amount_max }
				subtract_from_temp_variable = { labor_condition_temp = factory_employment_amount }
				divide_temp_variable = { labor_condition_temp = factory_employment_amount_per_factory }
				multiply_temp_variable = { labor_condition_temp = 200 } #for each factory-sized chunk
				subtract_from_variable = { factory_luxury_goods_investment_interest = labor_condition_temp }
			}
			else = {
				set_temp_variable = { labor_condition_temp = craftsmen_unemployed_amount }
				add_to_temp_variable = { labor_condition_temp = specialists_unemployed_amount }
				divide_temp_variable = { labor_condition_temp = factory_employment_amount_per_factory }
				multiply_temp_variable = { labor_condition_temp = 50 } #for each factory-sized chunk
				add_to_variable = { factory_luxury_goods_investment_interest = labor_condition_temp }
			}
			
		#

		#Investment Confidence
			add_to_variable = { factory_luxury_goods_investment_interest = PREV.investment_confidence }
		#

		#Other Constructions
			#If some other building is being constructed, it takes away from confidence in a new one.
			if = {
				limit = {
					has_state_flag = factory_everyday_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = factory_luxury_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = factory_industrial_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = infrastructure_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 25 } #Not as much as it's infra
			}
		#

	}
	industrial_industrial_goods_investment_calc = {
		#Calculates the vars for investment interest
		#State Scope

		# If the value is *Positive,* then it will be considered to be built.
		# That does not mean that construction will occur right away. It just means that ppl think that it's a good investment.

		set_variable = { factory_industrial_goods_investment_interest = -200 } #Base of -200

		#Get Factory Production
			#Get Employment Amount
			set_temp_variable = { factory_employment_amount_temp = private_factory_amount }
			add_to_temp_variable = { factory_employment_amount_temp = 1 }
			multiply_temp_variable = { factory_employment_amount_temp = factory_employment_amount_per_factory }

			set_temp_variable = { govt_employment_max_temp = industrial_complex_level }
			add_to_temp_variable = { govt_employment_max_temp = arms_factory_level }
			add_to_temp_variable = { govt_employment_max_temp = building_level@dockyard }
			multiply_temp_variable = { govt_employment_max_temp = global.factory_jobs_base_amount }
			add_to_temp_variable = { factory_employment_amount_temp = govt_employment_max_temp }

			set_temp_variable = { factory_employment_max_temp = specialists_workforce_amount }
			add_to_temp_variable = { factory_employment_max_temp = craftsmen_workforce_amount }
			if = {
				limit = {
					check_variable = { factory_employment_max_temp > factory_employment_amount_temp }
				}
				set_variable = { factory_employment_max_temp = factory_employment_amount_temp }
			}

			set_temp_variable = { factory_employment_percentage_temp = factory_employment_max_temp }
			multiply_temp_variable = { factory_employment_percentage_temp = 100 }
			divide_temp_variable = { factory_employment_percentage_temp = factory_employment_amount_temp }
			if = {
				limit = {
					check_variable = { factory_employment_percentage_temp < 25 }
				}
				set_temp_variable = { factory_employment_percentage_temp = 25 }
			}

			#Specialist Bonus
			set_temp_variable = { specialists_bonus_multiplier = 1 }
			set_temp_variable = { specialists_percentage_temp = specialists_workforce_amount }
			divide_temp_variable = { specialists_percentage_temp = factory_employment_amount_temp }
			multiply_temp_variable = { specialists_percentage_temp = global.pops_specialists_production_bonus }
			add_to_temp_variable = { specialists_bonus_multiplier = specialists_percentage_temp }

			#Throughput
			set_temp_variable = { factory_production_temp = factory_employment_amount_per_factory }
			multiply_temp_variable = { factory_production_temp = global.factory_industrial_goods_base_production }
			multiply_temp_variable = { factory_production_temp = specialists_bonus_multiplier }
			divide_temp_variable = { factory_production_temp = 100 }
			multiply_temp_variable = { factory_production_temp = factory_employment_percentage_temp }
			divide_temp_variable = { factory_production_temp = 100 }
			set_temp_variable = { modifier_temp = factory_industrial_goods_throughput_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_production_temp = modifier_temp }

			#Maintenace
			set_temp_variable = { factory_industrial_goods_need_temp = factory_production_temp }
			multiply_temp_variable = { factory_industrial_goods_need_temp = global.factory_industrial_goods_base_need }
			set_temp_variable = { modifier_temp = factory_industrial_goods_maintenance_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_industrial_goods_need_temp = modifier_temp }

			#Input
			set_temp_variable = { factory_raw_goods_need_temp = global.factory_industrial_goods_raw_goods_base_need }
			multiply_temp_variable = { factory_raw_goods_need_temp = factory_production_temp }
			set_temp_variable = { modifier_temp = factory_industrial_goods_raw_goods_input_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_raw_goods_need_temp = modifier_temp }

			#Fulfilled
			set_temp_variable = { fulfilled_temp = factory_industrial_goods_raw_goods_fulfilled_percentage }
			add_to_temp_variable = { fulfilled_temp = factory_industrial_goods_industrial_goods_fulfilled_percentage }
			divide_temp_variable = { fulfilled_temp = 2 }

			if = {
				limit = {
					OR = {
						check_variable = { factory_employment_amount < 0.1 }
						check_variable = { factory_industrial_goods_amount = 0 }
					}
					check_variable = { fulfilled_temp < 0.25 }
				}
				if = {
					limit = {
						check_variable = { factory_industrial_goods_amount = 0 }
					}
					set_temp_variable = { fulfilled_temp = 1 }
				}
				else = {
					set_temp_variable = { fulfilled_temp = 0.25 }
				}
			}

			#Output
			multiply_temp_variable = { factory_production_temp = fulfilled_temp }
			set_temp_variable = { modifier_temp = factory_industrial_goods_output_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_temp_variable = { factory_production_temp = modifier_temp }

			#factory_production_temp
			#factory_industrial_goods_need_temp
			#factory_raw_goods_need_temp
		#
		
		#Market Conditions
			#Weights
			set_temp_variable = { local_weight_temp = 0.89 }
			set_temp_variable = { country_weight_temp = 0.1 }
			set_temp_variable = { global_weight_temp = 0.01 }

			set_temp_variable = { modifier_temp = 1 }
			add_to_temp_variable = { modifier_temp = transport_cost_effect }
			divide_temp_variable = { country_weight_temp = modifier_temp }
			
			set_temp_variable = { modifier_temp = 1 }
			add_to_temp_variable = { modifier_temp = PREV.modifier@shipping_cost_modifier }
			divide_temp_variable = { global_weight_temp = modifier_temp }
			divide_temp_variable = { global_weight_temp = modifier_temp }

			set_temp_variable = { weight_total_temp = local_weight_temp }
			add_to_temp_variable = { weight_total_temp = country_weight_temp }
			add_to_temp_variable = { weight_total_temp = global_weight_temp }
			

			#Local
			set_temp_variable = { local_raw_goods_weight_temp = raw_goods_price }
			
			#Country
			set_temp_variable = { country_raw_goods_weight_temp = PREV.raw_goods_price }

			#Global
			set_temp_variable = { global_raw_goods_weight_temp = global.raw_goods_price }

			multiply_temp_variable = { local_raw_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_raw_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_raw_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { raw_goods_price_temp = local_raw_goods_weight_temp }
			add_to_temp_variable = { raw_goods_price_temp = country_raw_goods_weight_temp }
			add_to_temp_variable = { raw_goods_price_temp = global_raw_goods_weight_temp }
			divide_temp_variable = { raw_goods_price_temp = weight_total_temp }

			set_temp_variable = { raw_goods_cost_temp = raw_goods_price_temp }
			multiply_temp_variable = { raw_goods_cost_temp = factory_raw_goods_need_temp }
			

			#Local
			set_temp_variable = { local_industrial_goods_weight_temp = industrial_goods_price }
			
			#Country
			set_temp_variable = { country_industrial_goods_weight_temp = PREV.industrial_goods_price }

			#Global
			set_temp_variable = { global_industrial_goods_weight_temp = global.industrial_goods_price }

			multiply_temp_variable = { local_industrial_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_industrial_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_industrial_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { industrial_goods_price_temp = local_industrial_goods_weight_temp }
			add_to_temp_variable = { industrial_goods_price_temp = country_industrial_goods_weight_temp }
			add_to_temp_variable = { industrial_goods_price_temp = global_industrial_goods_weight_temp }
			divide_temp_variable = { industrial_goods_price_temp = weight_total_temp }

			set_temp_variable = { industrial_goods_cost_temp = industrial_goods_price_temp }
			multiply_temp_variable = { industrial_goods_cost_temp = factory_industrial_goods_need_temp }

			
			#Local
			set_temp_variable = { local_industrial_goods_weight_temp = industrial_goods_price }
			
			#Country
			set_temp_variable = { country_industrial_goods_weight_temp = PREV.industrial_goods_price }

			#Global
			set_temp_variable = { global_industrial_goods_weight_temp = global.industrial_goods_price }

			multiply_temp_variable = { local_industrial_goods_weight_temp = local_weight_temp }
			multiply_temp_variable = { country_industrial_goods_weight_temp = country_weight_temp }
			multiply_temp_variable = { global_industrial_goods_weight_temp = global_weight_temp }
			
			set_temp_variable = { industrial_goods_revenue_temp = local_industrial_goods_weight_temp }
			add_to_temp_variable = { industrial_goods_revenue_temp = country_industrial_goods_weight_temp }
			add_to_temp_variable = { industrial_goods_revenue_temp = global_industrial_goods_weight_temp }
			multiply_temp_variable = { industrial_goods_revenue_temp = factory_production_temp }
			divide_temp_variable = { industrial_goods_revenue_temp = weight_total_temp }

			set_temp_variable = { revenue_cost_ratio = industrial_goods_revenue_temp }
			set_temp_variable = { goods_cost_temp = raw_goods_cost_temp }
			add_to_temp_variable = { goods_cost_temp = industrial_goods_cost_temp }
			if = {
				limit = {
					check_variable = { goods_cost_temp > 0 }
				}
				divide_temp_variable = { revenue_cost_ratio = goods_cost_temp }
			}
			else_if = {
				limit = {
					check_variable = { revenue_cost_ratio > 0 }
				}
				set_temp_variable = { revenue_cost_ratio = 11 }
			}
			else = {
				set_temp_variable = { revenue_cost_ratio = 0 }
			}
			subtract_from_temp_variable = { revenue_cost_ratio = 1 }

			set_temp_variable = { industrial_goods_condition_temp = 100 }
			multiply_temp_variable = { industrial_goods_condition_temp = revenue_cost_ratio }
			add_to_variable = { factory_industrial_goods_investment_interest = industrial_goods_condition_temp }

			#raw_goods_cost_temp
			#raw_goods_price_temp
			#industrial_goods_cost_temp
			#industrial_goods_price_temp
			#goods_cost_temp
			#industrial_goods_revenue_temp
		#

		#Financial Incentives
			#Industrial Subsidies
			set_temp_variable = { subsidies_condition_temp = PREV.industrial_subsidy_percentage }
			multiply_temp_variable = { subsidies_condition_temp = goods_cost_temp }
			divide_temp_variable = { subsidies_condition_temp = industrial_goods_revenue_temp }
			divide_temp_variable = { subsidies_condition_temp = 2 } #Adds half back
			add_to_variable = { factory_industrial_goods_investment_interest = subsidies_condition_temp }

			#Taxation
			#TODO
		#
		
		#Construction Cost        
			set_variable = { constr_cost_temp = global.factory_industrial_goods_construction_industrial_goods_base_need }
			multiply_variable = { constr_cost_temp = factory_employment_amount_per_factory }
			divide_variable = { constr_cost_temp = 100 }
			set_temp_variable = { modifier_temp = factory_build_cost_effect }
			add_to_temp_variable = { modifier_temp = 1 }
			multiply_variable = { constr_cost_temp = modifier_temp }
			multiply_variable = { constr_cost_temp = industrial_goods_price_temp }
			multiply_variable = { constr_cost_temp = 2 }

			set_temp_variable = { revenue_excess_temp = industrial_goods_revenue_temp }
			subtract_from_temp_variable = { revenue_excess_temp = goods_cost_temp }
			if = {
				limit = {
					check_variable = { revenue_excess_temp < 0.01 }
				}
				set_temp_variable = { revenue_excess_temp = 0.01 }
			}

			set_temp_variable = { constr_cost_condition_temp = constr_cost_temp }
			divide_temp_variable = { constr_cost_condition_temp = revenue_excess_temp }
			multiply_temp_variable = { constr_cost_condition_temp = -10 } #Every multiple of excess revenue reduces interest by 20
			add_to_variable = { factory_industrial_goods_investment_interest = constr_cost_condition_temp }
		#

		#Infrastructure
			set_temp_variable = { transport_cost_condition_temp = transport_cost_effect }
			multiply_temp_variable = { transport_cost_condition_temp = -100 } #at -100% transport cost, +100 interest`
			add_to_variable = { factory_industrial_goods_investment_interest = transport_cost_condition_temp }
		#

		#Labor Availability
			if = {
				limit = {
					check_variable = { factory_employment_percentage < 100 }
				}

				set_temp_variable = { labor_condition_temp = factory_employment_amount_max }
				subtract_from_temp_variable = { labor_condition_temp = factory_employment_amount }
				divide_temp_variable = { labor_condition_temp = factory_employment_amount_per_factory }
				multiply_temp_variable = { labor_condition_temp = 200 } #for each factory-sized chunk
				subtract_from_variable = { factory_industrial_goods_investment_interest = labor_condition_temp }
			}
			else = {
				set_temp_variable = { labor_condition_temp = craftsmen_unemployed_amount }
				add_to_temp_variable = { labor_condition_temp = specialists_unemployed_amount }
				divide_temp_variable = { labor_condition_temp = factory_employment_amount_per_factory }
				multiply_temp_variable = { labor_condition_temp = 50 } #for each factory-sized chunk
				add_to_variable = { factory_industrial_goods_investment_interest = labor_condition_temp }
			}
			
		#

		#Investment Confidence
			add_to_variable = { factory_industrial_goods_investment_interest = PREV.investment_confidence }
		#
		
		#Other Constructions
			#If some other building is being constructed, it takes away from confidence in a new one.
			if = {
				limit = {
					has_state_flag = factory_everyday_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = factory_luxury_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = factory_industrial_goods_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 100 }
			}
			if = {
				limit = {
					has_state_flag = infrastructure_in_construction
				}
				subtract_from_variable = { factory_everyday_goods_investment_interest = 25 } #Not as much as it's infra
			}
		#
	}

#

#Misc Scripts

sort = {
	358 = {
		clear_array = buildings
		add_to_array = { buildings = arms_factory_level }
		add_to_array = { buildings = industrial_complex_level  }
		add_to_array = { buildings = building_level@dockyard }
		add_to_array = { buildings = infrastructure_level  }
		
		set_temp_variable = { length_temp = buildings^num }
		for_loop_effect = {
			start = 0
			end = length_temp
			add = 1
			value = v
			break = b
			find_highest_in_array = {
				array = buildings
				value = buildings_highest_value
				index = buildings_highest_index
			}
			remove_from_array = {
				array = buildings
				index = buildings_highest_index
			}
			add_to_temp_array = { 
				array = buildings_temp
				value = buildings_highest_value 
			}
		}
		for_loop_effect = {
			start = 0
			end = length_temp
			add = 1
			value = v
			break = b
			add_to_array = { 
				array = buildings
				value = buildings_temp^v 
			}
		}

	}
}

# HoI4 State Land Connection Indexer by Yard1
# Provides a simple way to check if two states share a land connection
# Call the scripted effect below in on_startup from a country scope (any will do, I suggest random_country)
# In order to check if two states have a land connection to each other, compare their state_land_connection_index variables. If they are the same, then they have a land connection.
mark_land_connected_states = {
	random_country = {
		set_variable = { global.current_state_land_connection_index = 1 }
		every_state = {
			add_to_array = { global.unchecked_land_connection_states = THIS }
		}
		while_loop_effect = {
			limit = {
				check_variable = { global.unchecked_land_connection_states^num > 0 }
			}
			# log = "Run land connection loop with index [?global.current_state_land_connection_index|0], [?global.unchecked_land_connection_states^num|0] states left to index"
			var:global.unchecked_land_connection_states^0 = {
				# log = "Adding index [?global.current_state_land_connection_index|0] to [?this.GetName]"
				set_variable = { state_land_connection_index = global.current_state_land_connection_index }
				every_neighbor_state = {
					# log = "Adding index [?global.current_state_land_connection_index|0] to [?this.GetName], neighbor of [?prev.GetName]"
					set_variable = { state_land_connection_index = global.current_state_land_connection_index }
					if = {
						limit = { is_in_array = { global.unchecked_land_connection_states = THIS } }
						remove_from_array = { global.unchecked_land_connection_states = THIS }
					}
				}
				remove_from_array = { global.unchecked_land_connection_states = THIS }
			}
			set_temp_variable = { temp_lc_state = 0 }
			while_loop_effect = {
				limit = {
					any_of = {
						array = global.unchecked_land_connection_states
						var:v = {
							any_neighbor_state = { has_variable = state_land_connection_index }
						}
						set_temp_variable = { global.temp_lc_state = v }
					}
				}
				if = {
					limit = { NOT = { check_variable = { temp_lc_state = 0 } } }
					# log = "Found [?temp_lc_state.GetName] as a neighbor of an indexed state"
					var:temp_lc_state = {
						# log = "Adding index [?global.current_state_land_connection_index|0] to [?this.GetName]"
						set_variable = { state_land_connection_index = global.current_state_land_connection_index }
						remove_from_array = { global.unchecked_land_connection_states = THIS }
						every_neighbor_state = {
							# log = "Adding index [?global.current_state_land_connection_index|0] to [?this.GetName], neighbor of [?prev.GetName]"
							set_variable = { state_land_connection_index = global.current_state_land_connection_index }
							if = {
								limit = { is_in_array = { global.unchecked_land_connection_states = THIS } }
								remove_from_array = { global.unchecked_land_connection_states = THIS }
							}
						}
					}
				}
			}
			# log = "Land connection loop done, [?global.unchecked_land_connection_states^num|0] states left to index"
			# log = "----"
			add_to_variable = { global.current_state_land_connection_index = 1 }
		}
		clear_variable = global.current_state_land_connection_index
		clear_array = global.unchecked_land_connection_states
	}
}
#Put in on_startup in a country scope (any, doesn’t matter which, you can use random_country)
#In order to check if two states have a land connection to each other, compare their state_land_connection_index variables. If they are the same, then they have a land connection. Example:
# If this returns true, then the capitals of THIS and FROM share a land connection
	#check_variable = { THIS.capital.state_land_connection_index = FROM.capital.state_land_connection_index }